{"version":3,"file":"FrameLoop.js","sourceRoot":"","sources":["../../src/FrameLoop.ts"],"names":[],"mappings":"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","sourcesContent":["import { FrameRequestCallback } from './types'\nimport * as G from './globals'\n\ndeclare const console: any\ndeclare const process:\n  | { env: { [key: string]: string | undefined } }\n  | undefined\n\n// The global `requestAnimationFrame` must be dereferenced to avoid \"Illegal invocation\" errors\nconst requestAnimationFrame: RequestFrameFn = fn =>\n  (void 0, G.requestAnimationFrame)(fn)\n\nexport type RequestFrameFn = (cb: FrameRequestCallback) => number | void\n\nexport interface OpaqueAnimation {\n  idle: boolean\n  priority: number\n  advance(dt: number): void\n}\n\nexport interface Timeout {\n  time: number\n  handler: () => void\n  cancel: () => void\n}\n\n/**\n * FrameLoop executes its animations in order of lowest priority first.\n * Animations are retained until idle.\n */\nexport class FrameLoop {\n  /**\n   * Start a new animation, or reorder an active animation in\n   * the animations array in response to a priority change.\n   */\n  start: (animation: OpaqueAnimation) => void\n\n  /**\n   * Advance the animations to the current time.\n   */\n  advance: () => void\n\n  /**\n   * Invoke the given `handler` on the soonest frame after the given\n   * `ms` delay is completed. When the delay is `<= 0`, the handler is\n   * invoked immediately.\n   */\n  setTimeout: (handler: () => void, ms: number) => Timeout\n\n  /**\n   * Execute a function once after all animations have updated.\n   */\n  onFrame: (cb: FrameRequestCallback) => void\n\n  /**\n   * Execute a function once at the very end of the current frame.\n   *\n   * Only call this within an `onFrame` callback.\n   */\n  onWrite: (cb: FrameRequestCallback) => void\n\n  // Exposed for testing.\n  protected _animations!: OpaqueAnimation[]\n  protected _dispose!: () => void\n\n  constructor(raf = requestAnimationFrame) {\n    let idle = true\n    let writing = false\n\n    // The most recent framestamp\n    let lastTime = 0\n\n    // The active animations for the current frame, sorted by lowest priority first\n    let animations: OpaqueAnimation[] = []\n\n    // The priority of the currently advancing animation.\n    // To protect against a race condition whenever a frame is being processed,\n    // where the filtering of `animations` is corrupted with a shifting index,\n    // causing animations to potentially advance 2x faster than intended.\n    let priority = 0\n\n    // Animations starting on the next frame\n    const startQueue = new Set<OpaqueAnimation>()\n\n    // Flushed after all animations are updated.\n    // Used to dispatch events to an \"onFrame\" prop, for example.\n    const frameQueue = new Set<FrameRequestCallback>()\n\n    // Flushed at the very end of each frame.\n    // Used to avoid layout thrashing in @react-spring/web, for example.\n    const writeQueue = new Set<FrameRequestCallback>()\n\n    // Add an animation to the frameloop\n    const start = (animation: OpaqueAnimation) => {\n      let index = animations.indexOf(animation)\n      if (index < 0) {\n        index = animations.findIndex(\n          other => other.priority > animation.priority\n        )\n        animations.splice(~index ? index : animations.length, 0, animation)\n      }\n    }\n\n    const loop = () => {\n      if (idle) return\n      try {\n        advance()\n        raf(loop)\n      } catch (e) {\n        console.error(e)\n      }\n    }\n\n    // Start the frameloop\n    const kickoff = () => {\n      if (idle) {\n        idle = false\n\n        // To minimize frame skips, the frameloop never stops.\n        if (lastTime == 0) {\n          lastTime = G.now()\n          raf(loop)\n        }\n      }\n    }\n\n    const timeoutQueue: Timeout[] = []\n\n    this.setTimeout = (handler, ms) => {\n      const time = G.now() + ms\n      const cancel = () => {\n        const index = timeoutQueue.findIndex(t => t.cancel == cancel)\n        if (index >= 0) {\n          timeoutQueue.splice(index, 1)\n        }\n      }\n\n      const index = findIndex(timeoutQueue, t => t.time > time)\n      const timeout = { time, handler, cancel }\n      timeoutQueue.splice(index, 0, timeout)\n\n      kickoff()\n      return timeout\n    }\n\n    // Process the current frame.\n    const advance = (this.advance = () => {\n      const time = G.now()\n\n      // Start animations that were added during last frame.\n      if (startQueue.size) {\n        startQueue.forEach(start)\n        startQueue.clear()\n      }\n\n      // Flush the timeout queue.\n      if (timeoutQueue.length) {\n        G.batchedUpdates(() => {\n          const count = findIndex(timeoutQueue, t => t.time > time)\n          timeoutQueue.splice(0, count).forEach(t => t.handler())\n        })\n      }\n\n      if (time > lastTime) {\n        // http://gafferongames.com/game-physics/fix-your-timestep/\n        const dt = Math.min(64, time - lastTime)\n        lastTime = time\n\n        G.batchedUpdates(() => {\n          // Animations can be added while the frameloop is updating,\n          // but they need a higher priority to be started on this frame.\n          if (animations.length) {\n            G.willAdvance(animations)\n            animations = animations.filter(animation => {\n              priority = animation.priority\n\n              // Animations may go idle before the next frame.\n              if (!animation.idle) {\n                animation.advance(dt)\n              }\n\n              // Remove idle animations.\n              return !animation.idle\n            })\n            priority = 0\n          }\n\n          if (frameQueue.size) {\n            frameQueue.forEach(onFrame => onFrame(time))\n            frameQueue.clear()\n          }\n\n          if (writeQueue.size) {\n            writing = true\n            writeQueue.forEach(write => write(time))\n            writeQueue.clear()\n            writing = false\n          }\n        })\n      }\n    })\n\n    this.start = animation => {\n      if (priority > animation.priority) {\n        startQueue.add(animation)\n      } else {\n        start(animation)\n        kickoff()\n      }\n    }\n\n    this.onFrame = cb => {\n      frameQueue.add(cb)\n      kickoff()\n    }\n\n    this.onWrite = cb => {\n      if (writing) cb(lastTime)\n      else writeQueue.add(cb)\n    }\n\n    // Expose internals for testing.\n    if (\n      typeof process !== 'undefined' &&\n      process.env.NODE_ENV !== 'production'\n    ) {\n      const dispose = () => {\n        idle = true\n        startQueue.clear()\n        timeoutQueue.length = 0\n      }\n      Object.defineProperties(this, {\n        _animations: { get: () => animations },\n        _dispose: { get: () => dispose },\n      })\n    }\n  }\n}\n\n/** Like `Array.prototype.findIndex` but returns `arr.length` instead of `-1` */\nfunction findIndex<T>(arr: T[], test: (value: T) => boolean) {\n  const index = arr.findIndex(test)\n  return index < 0 ? arr.length : index\n}\n"]}