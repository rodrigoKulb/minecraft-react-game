{"version":3,"file":"createInterpolator.js","sourceRoot":"","sources":["../../src/createInterpolator.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,CAAC,MAAM,WAAW,CAAA;AAC9B,OAAO,EAAE,EAAE,EAAE,MAAM,WAAW,CAAA;AAU9B,MAAM,CAAC,IAAM,kBAAkB,GAAwB,UACrD,KAA6E,EAC7E,MAA8B,EAC9B,WAA6B;IAE7B,IAAI,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;QACjB,OAAO,KAAK,CAAA;KACb;IAED,IAAI,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;QACjB,OAAO,kBAAkB,CAAC;YACxB,KAAK,OAAA;YACL,MAAM,EAAE,MAAO;YACf,WAAW,aAAA;SACZ,CAAC,CAAA;KACH;IAED,IAAI,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;QAC3B,OAAO,CAAC,CAAC,wBAAwB,CAAC,KAAY,CAAQ,CAAA;KACvD;IAED,IAAM,MAAM,GAAG,KAAmC,CAAA;IAClD,IAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAA;IACjC,IAAM,UAAU,GAAG,MAAM,CAAC,KAAK,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;IAEzC,IAAM,eAAe,GACnB,MAAM,CAAC,eAAe,IAAI,MAAM,CAAC,WAAW,IAAI,QAAQ,CAAA;IAC1D,IAAM,gBAAgB,GACpB,MAAM,CAAC,gBAAgB,IAAI,MAAM,CAAC,WAAW,IAAI,QAAQ,CAAA;IAC3D,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,EAAD,CAAC,CAAC,CAAA;IAExC,OAAO,UAAC,KAAa;QACnB,IAAM,KAAK,GAAG,SAAS,CAAC,KAAK,EAAE,UAAU,CAAC,CAAA;QAC1C,OAAO,WAAW,CAChB,KAAK,EACL,UAAU,CAAC,KAAK,CAAC,EACjB,UAAU,CAAC,KAAK,GAAG,CAAC,CAAC,EACrB,WAAW,CAAC,KAAK,CAAC,EAClB,WAAW,CAAC,KAAK,GAAG,CAAC,CAAC,EACtB,MAAM,EACN,eAAe,EACf,gBAAgB,EAChB,MAAM,CAAC,GAAG,CACX,CAAA;IACH,CAAC,CAAA;AACH,CAAC,CAAA;AAED,SAAS,WAAW,CAClB,KAAa,EACb,QAAgB,EAChB,QAAgB,EAChB,SAAiB,EACjB,SAAiB,EACjB,MAAsB,EACtB,eAAgC,EAChC,gBAAiC,EACjC,GAA2B;IAE3B,IAAI,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAA;IACrC,cAAc;IACd,IAAI,MAAM,GAAG,QAAQ,EAAE;QACrB,IAAI,eAAe,KAAK,UAAU;YAAE,OAAO,MAAM,CAAA;aAC5C,IAAI,eAAe,KAAK,OAAO;YAAE,MAAM,GAAG,QAAQ,CAAA;KACxD;IACD,IAAI,MAAM,GAAG,QAAQ,EAAE;QACrB,IAAI,gBAAgB,KAAK,UAAU;YAAE,OAAO,MAAM,CAAA;aAC7C,IAAI,gBAAgB,KAAK,OAAO;YAAE,MAAM,GAAG,QAAQ,CAAA;KACzD;IACD,IAAI,SAAS,KAAK,SAAS;QAAE,OAAO,SAAS,CAAA;IAC7C,IAAI,QAAQ,KAAK,QAAQ;QAAE,OAAO,KAAK,IAAI,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAA;IAC3E,cAAc;IACd,IAAI,QAAQ,KAAK,CAAC,QAAQ;QAAE,MAAM,GAAG,CAAC,MAAM,CAAA;SACvC,IAAI,QAAQ,KAAK,QAAQ;QAAE,MAAM,GAAG,MAAM,GAAG,QAAQ,CAAA;;QACrD,MAAM,GAAG,CAAC,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,QAAQ,GAAG,QAAQ,CAAC,CAAA;IACzD,SAAS;IACT,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAA;IACvB,eAAe;IACf,IAAI,SAAS,KAAK,CAAC,QAAQ;QAAE,MAAM,GAAG,CAAC,MAAM,CAAA;SACxC,IAAI,SAAS,KAAK,QAAQ;QAAE,MAAM,GAAG,MAAM,GAAG,SAAS,CAAA;;QACvD,MAAM,GAAG,MAAM,GAAG,CAAC,SAAS,GAAG,SAAS,CAAC,GAAG,SAAS,CAAA;IAC1D,OAAO,MAAM,CAAA;AACf,CAAC;AAED,SAAS,SAAS,CAAC,KAAa,EAAE,UAA6B;IAC7D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,EAAE,CAAC;QAC5C,IAAI,UAAU,CAAC,CAAC,CAAC,IAAI,KAAK;YAAE,MAAK;IACnC,OAAO,CAAC,GAAG,CAAC,CAAA;AACd,CAAC","sourcesContent":["import * as G from './globals'\nimport { is } from './helpers'\nimport {\n  Animatable,\n  InterpolatorFn,\n  EasingFunction,\n  ExtrapolateType,\n  InterpolatorConfig,\n  InterpolatorFactory,\n} from './types'\n\nexport const createInterpolator: InterpolatorFactory = (\n  range: readonly number[] | InterpolatorFn<any, any> | InterpolatorConfig<any>,\n  output?: readonly Animatable[],\n  extrapolate?: ExtrapolateType\n) => {\n  if (is.fun(range)) {\n    return range\n  }\n\n  if (is.arr(range)) {\n    return createInterpolator({\n      range,\n      output: output!,\n      extrapolate,\n    })\n  }\n\n  if (is.str(range.output[0])) {\n    return G.createStringInterpolator(range as any) as any\n  }\n\n  const config = range as InterpolatorConfig<number>\n  const outputRange = config.output\n  const inputRange = config.range || [0, 1]\n\n  const extrapolateLeft =\n    config.extrapolateLeft || config.extrapolate || 'extend'\n  const extrapolateRight =\n    config.extrapolateRight || config.extrapolate || 'extend'\n  const easing = config.easing || (t => t)\n\n  return (input: number) => {\n    const range = findRange(input, inputRange)\n    return interpolate(\n      input,\n      inputRange[range],\n      inputRange[range + 1],\n      outputRange[range],\n      outputRange[range + 1],\n      easing,\n      extrapolateLeft,\n      extrapolateRight,\n      config.map\n    )\n  }\n}\n\nfunction interpolate(\n  input: number,\n  inputMin: number,\n  inputMax: number,\n  outputMin: number,\n  outputMax: number,\n  easing: EasingFunction,\n  extrapolateLeft: ExtrapolateType,\n  extrapolateRight: ExtrapolateType,\n  map?: (x: number) => number\n) {\n  let result = map ? map(input) : input\n  // Extrapolate\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') return result\n    else if (extrapolateLeft === 'clamp') result = inputMin\n  }\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') return result\n    else if (extrapolateRight === 'clamp') result = inputMax\n  }\n  if (outputMin === outputMax) return outputMin\n  if (inputMin === inputMax) return input <= inputMin ? outputMin : outputMax\n  // Input Range\n  if (inputMin === -Infinity) result = -result\n  else if (inputMax === Infinity) result = result - inputMin\n  else result = (result - inputMin) / (inputMax - inputMin)\n  // Easing\n  result = easing(result)\n  // Output Range\n  if (outputMin === -Infinity) result = -result\n  else if (outputMax === Infinity) result = result + outputMin\n  else result = result * (outputMax - outputMin) + outputMin\n  return result\n}\n\nfunction findRange(input: number, inputRange: readonly number[]) {\n  for (var i = 1; i < inputRange.length - 1; ++i)\n    if (inputRange[i] >= input) break\n  return i - 1\n}\n"]}