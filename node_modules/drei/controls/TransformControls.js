import _extends from '@babel/runtime/helpers/esm/extends';
import _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';
import React, { forwardRef, useMemo, useRef, useLayoutEffect, useEffect } from 'react';
import { useThree } from 'react-three-fiber';
import { TransformControls as TransformControls$1 } from 'three/examples/jsm/controls/TransformControls';
import pick from 'lodash.pick';
import omit from 'lodash.omit';

const TransformControls = /*#__PURE__*/forwardRef((_ref, ref) => {
  let {
    children
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["children"]);

  const transformOnlyPropNames = ['enabled', 'axis', 'mode', 'translationSnap', 'rotationSnap', 'scaleSnap', 'space', 'size', 'dragging', 'showX', 'showY', 'showZ'];
  const transformProps = pick(props, transformOnlyPropNames);
  const objectProps = omit(props, transformOnlyPropNames);
  const {
    camera,
    gl,
    invalidate
  } = useThree();
  const controls = useMemo(() => new TransformControls$1(camera, gl.domElement), [camera, gl.domElement]);
  const group = useRef();
  useLayoutEffect(() => void controls.attach(group.current), [children, controls]);
  useEffect(() => {
    controls == null ? void 0 : controls.addEventListener == null ? void 0 : controls.addEventListener('change', invalidate);
    return () => controls == null ? void 0 : controls.removeEventListener == null ? void 0 : controls.removeEventListener('change', invalidate);
  }, [controls, invalidate]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("primitive", _extends({
    dispose: null,
    object: controls,
    ref: ref
  }, transformProps)), /*#__PURE__*/React.createElement("group", _extends({
    ref: group
  }, objectProps), children));
});

export { TransformControls };
