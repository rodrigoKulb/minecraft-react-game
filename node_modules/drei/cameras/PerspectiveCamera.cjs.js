'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('@babel/runtime/helpers/extends');
var _objectWithoutPropertiesLoose = require('@babel/runtime/helpers/objectWithoutPropertiesLoose');
var React = require('react');
var reactThreeFiber = require('react-three-fiber');
var mergeRefs = require('react-merge-refs');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefaultLegacy(_extends);
var _objectWithoutPropertiesLoose__default = /*#__PURE__*/_interopDefaultLegacy(_objectWithoutPropertiesLoose);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var mergeRefs__default = /*#__PURE__*/_interopDefaultLegacy(mergeRefs);

var PerspectiveCamera = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _ref$makeDefault = _ref.makeDefault,
      makeDefault = _ref$makeDefault === void 0 ? false : _ref$makeDefault,
      props = _objectWithoutPropertiesLoose__default['default'](_ref, ["makeDefault"]);

  var _useThree = reactThreeFiber.useThree(),
      setDefaultCamera = _useThree.setDefaultCamera,
      camera = _useThree.camera,
      size = _useThree.size;

  var cameraRef = reactThreeFiber.useUpdate(function (cam) {
    cam.aspect = size.width / size.height;
    cam.updateProjectionMatrix();
  }, [size, props]);
  React.useLayoutEffect(function () {
    if (makeDefault && cameraRef.current) {
      var oldCam = camera;
      setDefaultCamera(cameraRef.current);
      return function () {
        return setDefaultCamera(oldCam);
      };
    }
  }, [camera, cameraRef, makeDefault, setDefaultCamera]);
  return /*#__PURE__*/React__default['default'].createElement("perspectiveCamera", _extends__default['default']({
    ref: mergeRefs__default['default']([cameraRef, ref])
  }, props));
});

exports.PerspectiveCamera = PerspectiveCamera;
