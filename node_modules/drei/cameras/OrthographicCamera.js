import _extends from '@babel/runtime/helpers/esm/extends';
import _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';
import React, { forwardRef, useLayoutEffect } from 'react';
import { useThree, useUpdate } from 'react-three-fiber';
import mergeRefs from 'react-merge-refs';

const OrthographicCamera = /*#__PURE__*/forwardRef((_ref, ref) => {
  let {
    children,
    makeDefault = false
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["children", "makeDefault"]);

  const {
    setDefaultCamera,
    camera,
    size
  } = useThree();
  const cameraRef = useUpdate(cam => cam.updateProjectionMatrix(), [size, props]);
  useLayoutEffect(() => {
    if (makeDefault && cameraRef.current) {
      const oldCam = camera;
      setDefaultCamera(cameraRef.current);
      return () => setDefaultCamera(oldCam);
    }
  }, [camera, cameraRef, makeDefault, setDefaultCamera]);
  return /*#__PURE__*/React.createElement("orthographicCamera", _extends({
    left: size.width / -2,
    right: size.width / 2,
    top: size.height / 2,
    bottom: size.height / -2,
    ref: mergeRefs([cameraRef, ref])
  }, props), children);
});

export { OrthographicCamera };
