'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('@babel/runtime/helpers/extends');
var _objectWithoutPropertiesLoose = require('@babel/runtime/helpers/objectWithoutPropertiesLoose');
var React = require('react');
var reactThreeFiber = require('react-three-fiber');
var THREE = require('three');
var ReactDOM = require('react-dom');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefaultLegacy(_extends);
var _objectWithoutPropertiesLoose__default = /*#__PURE__*/_interopDefaultLegacy(_objectWithoutPropertiesLoose);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var ReactDOM__default = /*#__PURE__*/_interopDefaultLegacy(ReactDOM);

var v1 = new THREE.Vector3();
var v2 = new THREE.Vector3();
var v3 = new THREE.Vector3();

function calculatePosition(el, camera, size) {
  var objectPos = v1.setFromMatrixPosition(el.matrixWorld);
  objectPos.project(camera);
  var widthHalf = size.width / 2;
  var heightHalf = size.height / 2;
  return [objectPos.x * widthHalf + widthHalf, -(objectPos.y * heightHalf) + heightHalf];
}

function isObjectBehindCamera(el, camera) {
  var objectPos = v1.setFromMatrixPosition(el.matrixWorld);
  var cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);
  var deltaCamObj = objectPos.sub(cameraPos);
  var camDir = camera.getWorldDirection(v3);
  return deltaCamObj.angleTo(camDir) > Math.PI / 2;
}

function objectScale(el, camera) {
  if (camera instanceof THREE.PerspectiveCamera) {
    var objectPos = v1.setFromMatrixPosition(el.matrixWorld);
    var cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);
    var vFOV = camera.fov * Math.PI / 180;
    var dist = objectPos.distanceTo(cameraPos);
    return 1 / (2 * Math.tan(vFOV / 2) * dist);
  }

  if (camera instanceof THREE.OrthographicCamera) return camera.zoom;
  return 1;
}

function objectZIndex(el, camera, zIndexRange) {
  if (camera instanceof THREE.PerspectiveCamera || camera instanceof THREE.OrthographicCamera) {
    var objectPos = v1.setFromMatrixPosition(el.matrixWorld);
    var cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);
    var dist = objectPos.distanceTo(cameraPos);
    var A = (zIndexRange[1] - zIndexRange[0]) / (camera.far - camera.near);
    var B = zIndexRange[1] - A * camera.far;
    return Math.round(A * dist + B);
  }

  return undefined;
}

var Html = /*#__PURE__*/React__default['default'].forwardRef(function (_ref, ref) {
  var _portal$current;

  var children = _ref.children,
      _ref$eps = _ref.eps,
      eps = _ref$eps === void 0 ? 0.001 : _ref$eps,
      style = _ref.style,
      className = _ref.className,
      prepend = _ref.prepend,
      center = _ref.center,
      fullscreen = _ref.fullscreen,
      portal = _ref.portal,
      scaleFactor = _ref.scaleFactor,
      _ref$zIndexRange = _ref.zIndexRange,
      zIndexRange = _ref$zIndexRange === void 0 ? [16777271, 0] : _ref$zIndexRange,
      props = _objectWithoutPropertiesLoose__default['default'](_ref, ["children", "eps", "style", "className", "prepend", "center", "fullscreen", "portal", "scaleFactor", "zIndexRange"]);

  var _useThree = reactThreeFiber.useThree(),
      gl = _useThree.gl,
      scene = _useThree.scene,
      camera = _useThree.camera,
      size = _useThree.size;

  var _useState = React.useState(function () {
    return document.createElement('div');
  }),
      el = _useState[0];

  var group = React.useRef(null);
  var old = React.useRef([0, 0]);
  var target = (_portal$current = portal == null ? void 0 : portal.current) != null ? _portal$current : gl.domElement.parentNode;
  React.useEffect(function () {
    if (group.current) {
      scene.updateMatrixWorld();
      var vec = calculatePosition(group.current, camera, size);
      el.style.cssText = "position:absolute;top:0;left:0;transform:translate3d(" + vec[0] + "px," + vec[1] + "px,0);transform-origin:0 0;";

      if (target) {
        if (prepend) target.prepend(el);else target.appendChild(el);
      }

      return function () {
        if (target) target.removeChild(el);
        ReactDOM__default['default'].unmountComponentAtNode(el);
      };
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, [target]);
  var styles = React.useMemo(function () {
    return _extends__default['default']({
      position: 'absolute',
      transform: center ? 'translate3d(-50%,-50%,0)' : 'none'
    }, fullscreen && {
      top: -size.height / 2,
      left: -size.width / 2,
      width: size.width,
      height: size.height
    }, style);
  }, [style, center, fullscreen, size]);
  React.useEffect(function () {
    return void ReactDOM__default['default'].render( /*#__PURE__*/React__default['default'].createElement("div", {
      ref: ref,
      style: styles,
      className: className,
      children: children
    }), el);
  });
  reactThreeFiber.useFrame(function () {
    if (group.current) {
      var vec = calculatePosition(group.current, camera, size);

      if (Math.abs(old.current[0] - vec[0]) > eps || Math.abs(old.current[1] - vec[1]) > eps) {
        el.style.display = !isObjectBehindCamera(group.current, camera) ? 'block' : 'none';
        var scale = scaleFactor === undefined ? 1 : objectScale(group.current, camera) * scaleFactor;
        el.style.transform = "translate3d(" + vec[0] + "px," + vec[1] + "px,0) scale(" + scale + ")";
        el.style.zIndex = "" + objectZIndex(group.current, camera, zIndexRange);
      }

      old.current = vec;
    }
  });
  return /*#__PURE__*/React__default['default'].createElement("group", _extends__default['default']({}, props, {
    ref: group
  }));
});
var HTML = /*#__PURE__*/React__default['default'].forwardRef(function (props, ref) {
  React.useEffect(function () {
    return void console.warn('The <HTML> component was renamed to <Html>');
  }, []);
  return /*#__PURE__*/React__default['default'].createElement(Html, _extends__default['default']({}, props, {
    ref: ref
  }));
});

exports.HTML = HTML;
exports.Html = Html;
