'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var THREE = require('three');

var _inverseMatrix = new THREE.Matrix4();

var _ray = new THREE.Ray();

var _sphere = new THREE.Sphere();

var _vA = new THREE.Vector3();

function meshBounds(raycaster, intersects) {
  var geometry = this.geometry;
  var material = this.material;
  var matrixWorld = this.matrixWorld;
  if (material === undefined) return; // Checking boundingSphere distance to ray

  if (geometry.boundingSphere === null) geometry.computeBoundingSphere();

  _sphere.copy(geometry.boundingSphere);

  _sphere.applyMatrix4(matrixWorld);

  if (raycaster.ray.intersectsSphere(_sphere) === false) return;

  _inverseMatrix.getInverse(matrixWorld);

  _ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix); // Check boundingBox before continuing


  if (geometry.boundingBox !== null && _ray.intersectBox(geometry.boundingBox, _vA) === null) return;
  intersects.push({
    distance: _vA.distanceTo(raycaster.ray.origin),
    point: _vA.clone(),
    object: this
  });
}

exports.meshBounds = meshBounds;
