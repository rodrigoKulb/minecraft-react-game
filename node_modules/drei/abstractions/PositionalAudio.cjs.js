'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('@babel/runtime/helpers/extends');
var _objectWithoutPropertiesLoose = require('@babel/runtime/helpers/objectWithoutPropertiesLoose');
var React = require('react');
var reactThreeFiber = require('react-three-fiber');
var mergeRefs = require('react-merge-refs');
var THREE = require('three');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefaultLegacy(_extends);
var _objectWithoutPropertiesLoose__default = /*#__PURE__*/_interopDefaultLegacy(_objectWithoutPropertiesLoose);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var mergeRefs__default = /*#__PURE__*/_interopDefaultLegacy(mergeRefs);

var PositionalAudio = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var url = _ref.url,
      _ref$distance = _ref.distance,
      distance = _ref$distance === void 0 ? 1 : _ref$distance,
      _ref$loop = _ref.loop,
      loop = _ref$loop === void 0 ? true : _ref$loop,
      props = _objectWithoutPropertiesLoose__default['default'](_ref, ["url", "distance", "loop"]);

  var sound = React.useRef();

  var _useThree = reactThreeFiber.useThree(),
      camera = _useThree.camera;

  var _useState = React.useState(function () {
    return new THREE.AudioListener();
  }),
      listener = _useState[0];

  var buffer = reactThreeFiber.useLoader(THREE.AudioLoader, url);
  React.useEffect(function () {
    var _sound = sound.current;

    if (_sound) {
      _sound.setBuffer(buffer);

      _sound.setRefDistance(distance);

      _sound.setLoop(loop);

      _sound.play();
    }

    camera.add(listener);
    return function () {
      camera.remove(listener);

      if (_sound) {
        _sound.stop();

        _sound.disconnect();
      }
    };
  }, [buffer, camera, distance, listener, loop]);
  return /*#__PURE__*/React__default['default'].createElement("positionalAudio", _extends__default['default']({
    ref: mergeRefs__default['default']([sound, ref]),
    args: [listener]
  }, props));
});

exports.PositionalAudio = PositionalAudio;
