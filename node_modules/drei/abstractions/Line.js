import _extends from '@babel/runtime/helpers/esm/extends';
import _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';
import React, { useState, useMemo, useEffect, useLayoutEffect } from 'react';
import { Vector2 } from 'three';
import { LineGeometry } from 'three/examples/jsm/lines/LineGeometry';
import { LineMaterial } from 'three/examples/jsm/lines/LineMaterial';
import { Line2 } from 'three/examples/jsm/lines/Line2';

const Line = /*#__PURE__*/React.forwardRef(function Line(_ref, ref) {
  let {
    points,
    color = 'black',
    vertexColors,
    lineWidth,
    dashed
  } = _ref,
      rest = _objectWithoutPropertiesLoose(_ref, ["points", "color", "vertexColors", "lineWidth", "dashed"]);

  const [line2] = useState(() => new Line2());
  const [lineGeometry] = useState(() => new LineGeometry());
  const [lineMaterial] = useState(() => new LineMaterial());
  const resolution = useMemo(() => new Vector2(512, 512), []);
  useEffect(() => {
    lineGeometry.setPositions(points.flat());
    if (vertexColors) lineGeometry.setColors(vertexColors.flat());
    line2.computeLineDistances();
  }, [points, vertexColors, line2, lineGeometry]);
  useLayoutEffect(() => {
    if (dashed) {
      lineMaterial.defines.USE_DASH = '';
    } else {
      // Setting lineMaterial.defines.USE_DASH to undefined is apparently not sufficient.
      delete lineMaterial.defines.USE_DASH;
    }

    lineMaterial.needsUpdate = true;
  }, [dashed, lineMaterial]);
  return /*#__PURE__*/React.createElement("primitive", _extends({
    dispose: null,
    object: line2,
    ref: ref
  }, rest), /*#__PURE__*/React.createElement("primitive", {
    dispose: null,
    object: lineGeometry,
    attach: "geometry"
  }), /*#__PURE__*/React.createElement("primitive", _extends({
    dispose: null,
    object: lineMaterial,
    attach: "material",
    color: color,
    vertexColors: Boolean(vertexColors),
    resolution: resolution,
    linewidth: lineWidth,
    dashed: dashed
  }, rest)));
});

export { Line };
