'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('@babel/runtime/helpers/extends');
var _objectWithoutPropertiesLoose = require('@babel/runtime/helpers/objectWithoutPropertiesLoose');
var React = require('react');
var reactThreeFiber = require('react-three-fiber');
var THREE = require('three');
var HorizontalBlurShader = require('three/examples/jsm/shaders/HorizontalBlurShader');
var VerticalBlurShader = require('three/examples/jsm/shaders/VerticalBlurShader');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefaultLegacy(_extends);
var _objectWithoutPropertiesLoose__default = /*#__PURE__*/_interopDefaultLegacy(_objectWithoutPropertiesLoose);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var ContactShadows = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _ref$opacity = _ref.opacity,
      opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,
      _ref$width = _ref.width,
      width = _ref$width === void 0 ? 1 : _ref$width,
      _ref$height = _ref.height,
      height = _ref$height === void 0 ? 1 : _ref$height,
      _ref$blur = _ref.blur,
      blur = _ref$blur === void 0 ? 1 : _ref$blur,
      _ref$far = _ref.far,
      far = _ref$far === void 0 ? 10 : _ref$far,
      _ref$resolution = _ref.resolution,
      resolution = _ref$resolution === void 0 ? 256 : _ref$resolution,
      props = _objectWithoutPropertiesLoose__default['default'](_ref, ["opacity", "width", "height", "blur", "far", "resolution"]);

  var _useThree = reactThreeFiber.useThree(),
      scene = _useThree.scene,
      gl = _useThree.gl;

  var shadowCamera = React.useRef();

  var _useMemo = React.useMemo(function () {
    var renderTarget = new THREE.WebGLRenderTarget(resolution, resolution);
    var renderTargetBlur = new THREE.WebGLRenderTarget(resolution, resolution);
    renderTargetBlur.texture.generateMipmaps = renderTarget.texture.generateMipmaps = false;
    var planeGeometry = new THREE.PlaneBufferGeometry(width, height).rotateX(Math.PI / 2);
    var blurPlane = new THREE.Mesh(planeGeometry);
    var depthMaterial = new THREE.MeshDepthMaterial();
    depthMaterial.depthTest = depthMaterial.depthWrite = false;

    depthMaterial.onBeforeCompile = function (shader) {
      return shader.fragmentShader = shader.fragmentShader.replace('1.0 - fragCoordZ ), opacity );', '0.0 ), ( 1.0 - fragCoordZ ) * 1.0 );');
    };

    var horizontalBlurMaterial = new THREE.ShaderMaterial(HorizontalBlurShader.HorizontalBlurShader);
    var verticalBlurMaterial = new THREE.ShaderMaterial(VerticalBlurShader.VerticalBlurShader);
    verticalBlurMaterial.depthTest = horizontalBlurMaterial.depthTest = false;
    return [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur];
  }, [resolution, width, height]),
      renderTarget = _useMemo[0],
      planeGeometry = _useMemo[1],
      depthMaterial = _useMemo[2],
      blurPlane = _useMemo[3],
      horizontalBlurMaterial = _useMemo[4],
      verticalBlurMaterial = _useMemo[5],
      renderTargetBlur = _useMemo[6];

  reactThreeFiber.useFrame(function () {
    if (shadowCamera.current) {
      var initialBackground = scene.background;
      scene.background = null;
      scene.overrideMaterial = depthMaterial;
      gl.setRenderTarget(renderTarget);
      gl.render(scene, shadowCamera.current);
      scene.overrideMaterial = null;
      blurPlane.material = horizontalBlurMaterial;
      blurPlane.material.uniforms.tDiffuse.value = renderTarget.texture;
      horizontalBlurMaterial.uniforms.h.value = blur / 256;
      gl.setRenderTarget(renderTargetBlur);
      gl.render(blurPlane, shadowCamera.current);
      blurPlane.material = verticalBlurMaterial;
      blurPlane.material.uniforms.tDiffuse.value = renderTargetBlur.texture;
      verticalBlurMaterial.uniforms.v.value = blur / 256;
      gl.setRenderTarget(renderTarget);
      gl.render(blurPlane, shadowCamera.current);
      gl.setRenderTarget(null);
      scene.background = initialBackground;
    }
  });
  return /*#__PURE__*/React__default['default'].createElement("group", _extends__default['default']({}, props, {
    ref: ref
  }), /*#__PURE__*/React__default['default'].createElement("mesh", {
    geometry: planeGeometry,
    scale: [1, -1, 1],
    rotation: [-Math.PI / 2, 0, 0]
  }, /*#__PURE__*/React__default['default'].createElement("meshBasicMaterial", {
    map: renderTarget.texture,
    transparent: true,
    opacity: opacity
  })), /*#__PURE__*/React__default['default'].createElement("orthographicCamera", {
    ref: shadowCamera,
    args: [-width / 2, width / 2, height / 2, -height / 2, 0, far]
  }));
});

exports.ContactShadows = ContactShadows;
