'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('@babel/runtime/helpers/extends');
var THREE = require('three');
var _assertThisInitialized = require('@babel/runtime/helpers/assertThisInitialized');
var _inheritsLoose = require('@babel/runtime/helpers/inheritsLoose');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefaultLegacy(_extends);
var _assertThisInitialized__default = /*#__PURE__*/_interopDefaultLegacy(_assertThisInitialized);
var _inheritsLoose__default = /*#__PURE__*/_interopDefaultLegacy(_inheritsLoose);

function shaderMaterial(uniforms, vertexShader, fragmentShader, onInit) {
  return /*#__PURE__*/function (_THREE$ShaderMaterial) {
    _inheritsLoose__default['default'](_class, _THREE$ShaderMaterial);

    function _class() {
      var _this;

      var entries = Object.entries(uniforms); // Create unforms and shaders

      _this = _THREE$ShaderMaterial.call(this, {
        uniforms: entries.reduce(function (acc, _ref) {
          var _extends2;

          var name = _ref[0],
              value = _ref[1];
          return _extends__default['default']({}, acc, (_extends2 = {}, _extends2[name] = {
            value: value
          }, _extends2));
        }, {}),
        vertexShader: vertexShader,
        fragmentShader: fragmentShader
      }) || this; // Create getter/setters

      entries.forEach(function (_ref2) {
        var name = _ref2[0];
        return Object.defineProperty(_assertThisInitialized__default['default'](_this), name, {
          get: function get() {
            return _this.uniforms[name].value;
          },
          set: function set(v) {
            return _this.uniforms[name].value = v;
          }
        });
      });
      if (onInit) onInit(_assertThisInitialized__default['default'](_this));
      return _this;
    }

    return _class;
  }(THREE.ShaderMaterial);
}

exports.shaderMaterial = shaderMaterial;
