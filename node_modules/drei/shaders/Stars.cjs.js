'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var reactThreeFiber = require('react-three-fiber');
var THREE = require('three');
var _inheritsLoose = require('@babel/runtime/helpers/inheritsLoose');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var _inheritsLoose__default = /*#__PURE__*/_interopDefaultLegacy(_inheritsLoose);

var StarfieldMaterial = /*#__PURE__*/function (_ShaderMaterial) {
  _inheritsLoose__default['default'](StarfieldMaterial, _ShaderMaterial);

  function StarfieldMaterial() {
    return _ShaderMaterial.call(this, {
      uniforms: {
        time: {
          value: 0.0
        },
        fade: {
          value: 1.0
        }
      },
      vertexShader: "uniform float time;\n      attribute float size;\n      varying vec3 vColor;\n      void main() {\n        vColor = color;\n        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);\n        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(mvPosition.x + 2.0 * time + 100.0));\n        gl_Position = projectionMatrix * mvPosition;\n      }",
      fragmentShader: "uniform sampler2D pointTexture;\n      uniform float fade;\n      varying vec3 vColor;\n      void main() {\n        float opacity = 1.0;\n        if (fade == 1.0) {\n          float d = distance(gl_PointCoord, vec2(0.5, 0.5));\n          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));\n        }\n        gl_FragColor = vec4(vColor, opacity);\n      }"
    }) || this;
  }

  return StarfieldMaterial;
}(THREE.ShaderMaterial);

var genStar = function genStar(r) {
  return new THREE.Vector3().setFromSpherical(new THREE.Spherical(r, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI));
};

var Stars = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _ref$radius = _ref.radius,
      radius = _ref$radius === void 0 ? 100 : _ref$radius,
      _ref$depth = _ref.depth,
      depth = _ref$depth === void 0 ? 50 : _ref$depth,
      _ref$count = _ref.count,
      count = _ref$count === void 0 ? 5000 : _ref$count,
      _ref$saturation = _ref.saturation,
      saturation = _ref$saturation === void 0 ? 0 : _ref$saturation,
      _ref$factor = _ref.factor,
      factor = _ref$factor === void 0 ? 4 : _ref$factor,
      _ref$fade = _ref.fade,
      fade = _ref$fade === void 0 ? false : _ref$fade;
  var material = React.useRef();

  var _useMemo = React.useMemo(function () {
    var positions = [];
    var colors = [];
    var sizes = Array.from({
      length: count
    }, function () {
      return (0.5 + 0.5 * Math.random()) * factor;
    });
    var color = new THREE.Color();
    var r = radius + depth;
    var increment = depth / count;

    for (var i = 0; i < count; i++) {
      r -= increment * Math.random();
      positions.push.apply(positions, genStar(r).toArray());
      color.setHSL(i / count, saturation, 0.9);
      colors.push(color.r, color.g, color.b);
    }

    return [new Float32Array(positions), new Float32Array(colors), new Float32Array(sizes)];
  }, [count, depth, factor, radius, saturation]),
      position = _useMemo[0],
      color = _useMemo[1],
      size = _useMemo[2];

  reactThreeFiber.useFrame(function (state) {
    return material.current && (material.current.uniforms.time.value = state.clock.getElapsedTime());
  });
  var starfieldMaterial = React.useMemo(function () {
    return new StarfieldMaterial();
  }, []);
  return /*#__PURE__*/React__default['default'].createElement("points", {
    ref: ref
  }, /*#__PURE__*/React__default['default'].createElement("bufferGeometry", {
    attach: "geometry"
  }, /*#__PURE__*/React__default['default'].createElement("bufferAttribute", {
    attachObject: ['attributes', 'position'],
    args: [position, 3]
  }), /*#__PURE__*/React__default['default'].createElement("bufferAttribute", {
    attachObject: ['attributes', 'color'],
    args: [color, 3]
  }), /*#__PURE__*/React__default['default'].createElement("bufferAttribute", {
    attachObject: ['attributes', 'size'],
    args: [size, 1]
  })), /*#__PURE__*/React__default['default'].createElement("primitive", {
    ref: material,
    object: starfieldMaterial,
    attach: "material",
    blending: THREE.AdditiveBlending,
    "uniforms-fade-value": fade,
    transparent: true,
    vertexColors: true
  }));
});

exports.Stars = Stars;
