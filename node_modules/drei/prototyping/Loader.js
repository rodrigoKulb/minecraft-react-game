import _extends from '@babel/runtime/helpers/esm/extends';
import React from 'react';
import 'three';
import 'zustand';
import { useProgress } from '../loaders/useProgress.js';
import { useTransition, a } from '@react-spring/web';

const styles = {
  container: {
    position: 'absolute',
    top: 0,
    left: 0,
    width: '100%',
    height: '100%',
    background: '#171717',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    zIndex: 1000
  },
  inner: {
    width: 100,
    height: 3,
    background: '#272727',
    textAlign: 'center'
  },
  bar: {
    height: 3,
    width: '100%',
    background: 'white',
    transformOrigin: 'left center'
  },
  data: {
    display: 'inline-block',
    position: 'relative',
    fontVariantNumeric: 'tabular-nums',
    marginTop: '0.8em',
    color: '#f0f0f0',
    fontSize: '0.6em',
    fontFamily: "-apple-system, BlinkMacSystemFont, \"Inter\", \"Segoe UI\", \"Helvetica Neue\", Helvetica, Arial, Roboto, Ubuntu, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"",
    whiteSpace: 'nowrap'
  }
};
function Loader({
  containerStyles,
  innerStyles,
  barStyles,
  dataStyles,
  dataInterpolation = p => "Loading " + p.toFixed(2) + "%",
  initialState = active => active
}) {
  const {
    active,
    progress
  } = useProgress();
  const transition = useTransition(initialState(active), {
    from: {
      opacity: 1,
      progress: 0
    },
    leave: {
      opacity: 0
    },
    update: {
      progress: progress / 100
    }
  });
  return transition(({
    progress,
    opacity
  }, active) => active && /*#__PURE__*/React.createElement(a.div, {
    style: _extends({}, styles.container, {
      opacity
    }, containerStyles)
  }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
    style: _extends({}, styles.inner, innerStyles)
  }, /*#__PURE__*/React.createElement(a.div, {
    style: _extends({}, styles.bar, {
      scaleX: progress
    }, barStyles)
  }), /*#__PURE__*/React.createElement(a.span, {
    style: _extends({}, styles.data, dataStyles)
  }, progress.to(dataInterpolation))))));
}

export { Loader };
