import { useRef, useEffect } from 'react';
import { Geometry, BufferGeometry } from 'three';
import { TessellateModifier } from 'three/examples/jsm/modifiers/TessellateModifier';

function useTessellation(passes = 3, maxEdgeLength) {
  const ref = useRef();
  const original = useRef();
  const modifier = useRef();
  useEffect(() => {
    if (!original.current) {
      original.current = ref.current.geometry.clone();
      modifier.current = new TessellateModifier(parseInt(maxEdgeLength));
    }
  }, [maxEdgeLength]);
  useEffect(() => {
    modifier.current.maxEdgeLength = maxEdgeLength;
  }, [maxEdgeLength]);
  useEffect(() => {
    if (original.current && ref.current) {
      let geometry = new Geometry();

      if (original.current instanceof BufferGeometry) {
        geometry.fromBufferGeometry(original.current);
      } else {
        geometry = original.current.clone();
      }

      const bufferGeometry = new BufferGeometry();

      for (let i = 0; i < passes; i++) {
        modifier.current.modify(geometry);
      }

      const tessellated = bufferGeometry.fromGeometry(geometry);
      ref.current.geometry = tessellated;
    }
  }, [maxEdgeLength, passes]);
  return ref;
}

export { useTessellation };
