{"ast":null,"code":"var _jsxFileName = \"/home/rodrigo/Dropbox/Projetos/rodrigoKulb/minecraft-react/src/components/Hud.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useFrame, useThree } from 'react-three-fiber';\nimport { useStore } from '../hooks/useStore';\nimport * as textures from '../textures';\n\nconst Material = ({\n  args,\n  color,\n  texture,\n  isActive,\n  ...props\n}) => {\n  return /*#__PURE__*/React.createElement(\"mesh\", Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"boxBufferGeometry\", {\n    attach: \"geometry\",\n    args: args,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }\n  }), [...Array(6)].map((_, index) => {\n    return /*#__PURE__*/React.createElement(\"meshStandardMaterial\", {\n      attachArray: \"material\",\n      map: texture,\n      key: index,\n      transparent: true,\n      opacity: isActive ? 1 : 0.4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 11\n      }\n    });\n  }));\n};\n\nconst MaterialContainer = ({\n  args,\n  color,\n  activeTexture,\n  ...props\n}) => {\n  const activeTextureIndex = Object.keys(textures).indexOf(activeTexture);\n  return /*#__PURE__*/React.createElement(\"mesh\", Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }), Object.keys(textures).map((key, index) => {\n    return /*#__PURE__*/React.createElement(Material, {\n      key: key,\n      isActive: activeTextureIndex === index,\n      texture: textures[key],\n      args: [0.2, 0.2, 0.05],\n      position: [-0.65 + index / 4, 0, 0.02],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }\n    });\n  }), /*#__PURE__*/React.createElement(\"boxBufferGeometry\", {\n    attach: \"geometry\",\n    args: args,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"meshStandardMaterial\", {\n    attach: \"material\",\n    color: color,\n    transparent: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport const Hud = ({\n  position\n}) => {\n  const {\n    camera\n  } = useThree();\n  const [hudState, setHudState] = useState(() => ({\n    position: camera.position,\n    rotation: [0, 0, 0],\n    opacity: 0\n  }));\n  const [hudVisible, setHudVisible] = useState(false);\n  const [activeTexture] = useStore(state => [state.texture]);\n  useFrame(() => {\n    const {\n      x,\n      y,\n      z\n    } = camera.position;\n    const {\n      x: rotX,\n      y: rotY,\n      z: rotZ\n    } = camera.rotation;\n    setHudState({\n      position: [x, y, z],\n      rotation: [rotX, rotY, rotZ],\n      opacity: hudVisible ? 1 : 0\n    });\n  });\n  useEffect(() => {\n    setHudVisible(true);\n    const hudVisibilityTimeout = setTimeout(() => {\n      setHudVisible(false);\n    }, 2000);\n    return () => {\n      clearTimeout(hudVisibilityTimeout);\n    };\n  }, [setHudVisible, activeTexture]);\n  return hudVisible && /*#__PURE__*/React.createElement(\"group\", {\n    position: hudState.position,\n    rotation: hudState.rotation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"group\", {\n    position: position,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MaterialContainer, {\n    args: [1.65, 0.3, 0.03],\n    color: \"#222\",\n    activeTexture: activeTexture,\n    hudVisible: hudVisible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  })));\n};","map":{"version":3,"sources":["/home/rodrigo/Dropbox/Projetos/rodrigoKulb/minecraft-react/src/components/Hud.js"],"names":["React","useState","useEffect","useFrame","useThree","useStore","textures","Material","args","color","texture","isActive","props","Array","map","_","index","MaterialContainer","activeTexture","activeTextureIndex","Object","keys","indexOf","key","Hud","position","camera","hudState","setHudState","rotation","opacity","hudVisible","setHudVisible","state","x","y","z","rotX","rotY","rotZ","hudVisibilityTimeout","setTimeout","clearTimeout"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useFrame, useThree } from 'react-three-fiber';\nimport { useStore } from '../hooks/useStore';\nimport * as textures from '../textures';\n\nconst Material = ({ args, color, texture, isActive, ...props }) => {\n  return (\n    <mesh {...props}>\n      <boxBufferGeometry attach=\"geometry\" args={args} />\n      {[...Array(6)].map((_, index) => {\n        return (\n          <meshStandardMaterial\n            attachArray=\"material\"\n            map={texture}\n            key={index}\n            transparent={true}\n            opacity={isActive ? 1 : 0.4}\n          />\n        );\n      })}\n    </mesh>\n  );\n};\n\nconst MaterialContainer = ({ args, color, activeTexture, ...props }) => {\n  const activeTextureIndex = Object.keys(textures).indexOf(activeTexture);\n  return (\n    <mesh {...props}>\n      {Object.keys(textures).map((key, index) => {\n        return (\n          <Material\n            key={key}\n            isActive={activeTextureIndex === index}\n            texture={textures[key]}\n            args={[0.2, 0.2, 0.05]}\n            position={[-0.65 + index / 4, 0, 0.02]}\n          />\n        );\n      })}\n      <boxBufferGeometry attach=\"geometry\" args={args} />\n\n      <meshStandardMaterial\n        attach=\"material\"\n        color={color}\n        transparent={true}\n      />\n    </mesh>\n  );\n};\n\nexport const Hud = ({ position }) => {\n  const { camera } = useThree();\n  const [hudState, setHudState] = useState(() => ({\n    position: camera.position,\n    rotation: [0, 0, 0],\n    opacity: 0,\n  }));\n  const [hudVisible, setHudVisible] = useState(false);\n  const [activeTexture] = useStore((state) => [state.texture]);\n  useFrame(() => {\n    const { x, y, z } = camera.position;\n    const { x: rotX, y: rotY, z: rotZ } = camera.rotation;\n    setHudState({\n      position: [x, y, z],\n      rotation: [rotX, rotY, rotZ],\n      opacity: hudVisible ? 1 : 0,\n    });\n  });\n\n  useEffect(() => {\n    setHudVisible(true);\n    const hudVisibilityTimeout = setTimeout(() => {\n      setHudVisible(false);\n    }, 2000);\n    return () => {\n      clearTimeout(hudVisibilityTimeout);\n    };\n  }, [setHudVisible, activeTexture]);\n  return (\n    hudVisible && (\n      <group position={hudState.position} rotation={hudState.rotation}>\n        <group position={position}>\n          <MaterialContainer\n            args={[1.65, 0.3, 0.03]}\n            color=\"#222\"\n            activeTexture={activeTexture}\n            hudVisible={hudVisible}\n          />\n        </group>\n      </group>\n    )\n  );\n};\n"]},"metadata":{},"sourceType":"module"}