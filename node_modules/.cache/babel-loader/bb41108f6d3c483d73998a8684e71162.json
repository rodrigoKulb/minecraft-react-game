{"ast":null,"code":"import React__default, { useEffect } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction useOnMount(callback) {\n  useEffect(callback, []);\n}\n\nfunction useSound(url, _ref) {\n  if (_ref === void 0) {\n    _ref = {};\n  }\n\n  var _ref2 = _ref,\n      _ref2$volume = _ref2.volume,\n      volume = _ref2$volume === void 0 ? 1 : _ref2$volume,\n      _ref2$playbackRate = _ref2.playbackRate,\n      playbackRate = _ref2$playbackRate === void 0 ? 1 : _ref2$playbackRate,\n      _ref2$soundEnabled = _ref2.soundEnabled,\n      soundEnabled = _ref2$soundEnabled === void 0 ? true : _ref2$soundEnabled,\n      _ref2$interrupt = _ref2.interrupt,\n      interrupt = _ref2$interrupt === void 0 ? false : _ref2$interrupt,\n      onload = _ref2.onload,\n      delegated = _objectWithoutPropertiesLoose(_ref2, [\"volume\", \"playbackRate\", \"soundEnabled\", \"interrupt\", \"onload\"]);\n\n  var HowlConstructor = React__default.useRef(null);\n  var isMounted = React__default.useRef(false);\n\n  var _React$useState = React__default.useState(false),\n      isPlaying = _React$useState[0],\n      setIsPlaying = _React$useState[1];\n\n  var _React$useState2 = React__default.useState(null),\n      duration = _React$useState2[0],\n      setDuration = _React$useState2[1];\n\n  var _React$useState3 = React__default.useState(null),\n      sound = _React$useState3[0],\n      setSound = _React$useState3[1];\n\n  var handleLoad = function handleLoad() {\n    if (typeof onload === 'function') {\n      // @ts-ignore\n      onload.call(this);\n    }\n\n    if (isMounted.current) {\n      // @ts-ignore\n      setDuration(this.duration() * 1000);\n    }\n  }; // We want to lazy-load Howler, since sounds can't play on load anyway.\n\n\n  useOnMount(function () {\n    import('howler').then(function (mod) {\n      if (!isMounted.current) {\n        HowlConstructor.current = mod.Howl;\n        isMounted.current = true;\n\n        var _sound = new HowlConstructor.current(_extends({\n          src: [url],\n          volume: volume,\n          rate: playbackRate,\n          onload: handleLoad\n        }, delegated));\n\n        setSound(_sound);\n      }\n    });\n    return function () {\n      isMounted.current = false;\n    };\n  }); // When the URL changes, we have to do a whole thing where we recreate\n  // the Howl instance. This is because Howler doesn't expose a way to\n  // tweak the sound\n\n  React__default.useEffect(function () {\n    if (HowlConstructor.current && sound) {\n      setSound(new HowlConstructor.current(_extends({\n        src: [url],\n        volume: volume,\n        onload: handleLoad\n      }, delegated)));\n    } // The linter wants to run this effect whenever ANYTHING changes,\n    // but very specifically I only want to recreate the Howl instance\n    // when the `url` changes. Other changes should have no effect.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [url]); // Whenever volume/playbackRate are changed, change those properties\n  // on the sound instance.\n\n  React__default.useEffect(function () {\n    if (sound) {\n      sound.volume(volume);\n      sound.rate(playbackRate);\n    } // A weird bug means that including the `sound` here can trigger an\n    // error on unmount, where the state loses track of the sprites??\n    // No idea, but anyway I don't need to re-run this if only the `sound`\n    // changes.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [volume, playbackRate]);\n  var play = React__default.useCallback(function (options) {\n    if (typeof options === 'undefined') {\n      options = {};\n    }\n\n    if (!sound || !soundEnabled && !options.forceSoundEnabled) {\n      return;\n    }\n\n    if (interrupt) {\n      sound.stop();\n    }\n\n    if (options.playbackRate) {\n      sound.rate(options.playbackRate);\n    }\n\n    sound.play(options.id);\n\n    if (isMounted.current) {\n      sound.once('end', function () {\n        // If sound is not looping\n        if (!sound.playing()) {\n          setIsPlaying(false);\n        }\n      });\n    }\n\n    if (isMounted.current) {\n      setIsPlaying(true);\n    }\n  }, [sound, soundEnabled, interrupt]);\n  var stop = React__default.useCallback(function (id) {\n    if (!sound) {\n      return;\n    }\n\n    sound.stop(id);\n\n    if (isMounted.current) {\n      setIsPlaying(false);\n    }\n  }, [sound]);\n  var pause = React__default.useCallback(function (id) {\n    if (!sound) {\n      return;\n    }\n\n    sound.pause(id);\n\n    if (isMounted.current) {\n      setIsPlaying(false);\n    }\n  }, [sound]);\n  var returnedValue = [play, {\n    sound: sound,\n    stop: stop,\n    pause: pause,\n    isPlaying: isPlaying,\n    duration: duration\n  }];\n  return returnedValue;\n}\n\nexport default useSound;","map":{"version":3,"sources":["../src/use-on-mount.ts","../src/index.ts"],"names":["useOnMount","callback","React","useSound","url","volume","playbackRate","soundEnabled","interrupt","onload","delegated","HowlConstructor","isMounted","isPlaying","setIsPlaying","duration","setDuration","sound","setSound","handleLoad","mod","src","rate","play","options","stop","pause","returnedValue"],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nexport default function useOnMount(callback: React.EffectCallback) {\n  React.useEffect(callback, []);\n}\n","import React from 'react';\n\nimport useOnMount from './use-on-mount';\n\nimport { HookOptions, PlayOptions, PlayFunction, ReturnedValue } from './types';\n\nexport default function useSound(\n  url: string,\n  {\n    volume = 1,\n    playbackRate = 1,\n    soundEnabled = true,\n    interrupt = false,\n    onload,\n    ...delegated\n  }: HookOptions = {}\n) {\n  const HowlConstructor = React.useRef<HowlStatic | null>(null);\n  const isMounted = React.useRef(false);\n\n  const [isPlaying, setIsPlaying] = React.useState(false);\n  const [duration, setDuration] = React.useState<number | null>(null);\n\n  const [sound, setSound] = React.useState<Howl | null>(null);\n\n  const handleLoad = function() {\n    if (typeof onload === 'function') {\n      // @ts-ignore\n      onload.call(this);\n    }\n\n    if (isMounted.current) {\n      // @ts-ignore\n      setDuration(this.duration() * 1000);\n    }\n  };\n\n  // We want to lazy-load Howler, since sounds can't play on load anyway.\n  useOnMount(() => {\n    import('howler').then(mod => {\n      if (!isMounted.current) {\n        HowlConstructor.current = mod.Howl;\n        isMounted.current = true;\n\n        const sound = new HowlConstructor.current({\n          src: [url],\n          volume,\n          rate: playbackRate,\n          onload: handleLoad,\n          ...delegated,\n        });\n\n        setSound(sound);\n      }\n    });\n\n    return () => {\n      isMounted.current = false;\n    };\n  });\n\n  // When the URL changes, we have to do a whole thing where we recreate\n  // the Howl instance. This is because Howler doesn't expose a way to\n  // tweak the sound\n  React.useEffect(() => {\n    if (HowlConstructor.current && sound) {\n      setSound(\n        new HowlConstructor.current({\n          src: [url],\n          volume,\n          onload: handleLoad,\n          ...delegated,\n        })\n      );\n    }\n    // The linter wants to run this effect whenever ANYTHING changes,\n    // but very specifically I only want to recreate the Howl instance\n    // when the `url` changes. Other changes should have no effect.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [url]);\n\n  // Whenever volume/playbackRate are changed, change those properties\n  // on the sound instance.\n  React.useEffect(() => {\n    if (sound) {\n      sound.volume(volume);\n      sound.rate(playbackRate);\n    }\n    // A weird bug means that including the `sound` here can trigger an\n    // error on unmount, where the state loses track of the sprites??\n    // No idea, but anyway I don't need to re-run this if only the `sound`\n    // changes.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [volume, playbackRate]);\n\n  const play: PlayFunction = React.useCallback(\n    (options?: PlayOptions) => {\n      if (typeof options === 'undefined') {\n        options = {};\n      }\n\n      if (!sound || (!soundEnabled && !options.forceSoundEnabled)) {\n        return;\n      }\n\n      if (interrupt) {\n        sound.stop();\n      }\n\n      if (options.playbackRate) {\n        sound.rate(options.playbackRate);\n      }\n\n      sound.play(options.id);\n\n      if (isMounted.current) {\n        sound.once('end', () => {\n          // If sound is not looping\n          if (!sound.playing()) {\n            setIsPlaying(false);\n          }\n        });\n      }\n\n      if (isMounted.current) {\n        setIsPlaying(true);\n      }\n    },\n    [sound, soundEnabled, interrupt]\n  );\n\n  const stop = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.stop(id);\n\n      if (isMounted.current) {\n        setIsPlaying(false);\n      }\n    },\n    [sound]\n  );\n\n  const pause = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.pause(id);\n\n      if (isMounted.current) {\n        setIsPlaying(false);\n      }\n    },\n    [sound]\n  );\n\n  const returnedValue: ReturnedValue = [\n    play,\n    {\n      sound,\n      stop,\n      pause,\n      isPlaying,\n      duration,\n    },\n  ];\n\n  return returnedValue;\n}\n"]},"metadata":{},"sourceType":"module"}