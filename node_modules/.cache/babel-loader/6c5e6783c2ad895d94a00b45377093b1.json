{"ast":null,"code":"import { useState, useRef, useEffect, useMemo } from 'react';\nimport { debounce } from 'debounce';\n\nfunction useMeasure({\n  debounce: debounce$1,\n  scroll,\n  polyfill\n} = {\n  debounce: 0,\n  scroll: false\n}) {\n  const ResizeObserver = polyfill || (typeof window === 'undefined' ? class ResizeObserver {} : window.ResizeObserver);\n\n  if (!ResizeObserver) {\n    throw new Error('This browser does not support ResizeObserver out of the box. See: https://github.com/react-spring/react-use-measure/#resize-observer-polyfills');\n  }\n\n  const [bounds, set] = useState({\n    left: 0,\n    top: 0,\n    width: 0,\n    height: 0,\n    bottom: 0,\n    right: 0,\n    x: 0,\n    y: 0\n  }); // keep all state in a ref\n\n  const state = useRef({\n    element: null,\n    scrollContainers: null,\n    resizeObserver: null,\n    lastBounds: bounds\n  }); // set actual debounce values early, so effects know if they should react accordingly\n\n  const scrollDebounce = debounce$1 ? typeof debounce$1 === 'number' ? debounce$1 : debounce$1.scroll : null;\n  const resizeDebounce = debounce$1 ? typeof debounce$1 === 'number' ? debounce$1 : debounce$1.resize : null; // make sure to update state only as long as the component is truly mounted\n\n  const mounted = useRef(false);\n  useEffect(() => {\n    mounted.current = true;\n    return () => void (mounted.current = false);\n  }); // memoize handlers, so event-listeners know when they should update\n\n  const [forceRefresh, resizeChange, scrollChange] = useMemo(() => {\n    const callback = () => {\n      if (!state.current.element) return;\n      const {\n        left,\n        top,\n        width,\n        height,\n        bottom,\n        right,\n        x,\n        y\n      } = state.current.element.getBoundingClientRect();\n      const size = {\n        left,\n        top,\n        width,\n        height,\n        bottom,\n        right,\n        x,\n        y\n      };\n      Object.freeze(size);\n      if (mounted.current && !areBoundsEqual(state.current.lastBounds, size)) set(state.current.lastBounds = size);\n    };\n\n    return [callback, resizeDebounce ? debounce(callback, resizeDebounce) : callback, scrollDebounce ? debounce(callback, scrollDebounce) : callback];\n  }, [set, scrollDebounce, resizeDebounce]); // cleanup current scroll-listeners / observers\n\n  function removeListeners() {\n    if (state.current.scrollContainers) {\n      state.current.scrollContainers.forEach(element => element.removeEventListener('scroll', scrollChange, true));\n      state.current.scrollContainers = null;\n    }\n\n    if (state.current.resizeObserver) {\n      state.current.resizeObserver.disconnect();\n      state.current.resizeObserver = null;\n    }\n  } // add scroll-listeners / observers\n\n\n  function addListeners() {\n    if (!state.current.element) return;\n    state.current.resizeObserver = new ResizeObserver(scrollChange);\n    state.current.resizeObserver.observe(state.current.element);\n\n    if (scroll && state.current.scrollContainers) {\n      state.current.scrollContainers.forEach(scrollContainer => scrollContainer.addEventListener('scroll', scrollChange, {\n        capture: true,\n        passive: true\n      }));\n    }\n  } // the ref we expose to the user\n\n\n  const ref = node => {\n    if (!node || node === state.current.element) return;\n    removeListeners();\n    state.current.element = node;\n    state.current.scrollContainers = findScrollContainers(node);\n    addListeners();\n  }; // add general event listeners\n\n\n  useOnWindowScroll(scrollChange, Boolean(scroll));\n  useOnWindowResize(resizeChange); // respond to changes that are relevant for the listeners\n\n  useEffect(() => {\n    removeListeners();\n    addListeners();\n  }, [scroll, scrollChange, resizeChange]); // remove all listeners when the components unmounts\n\n  useEffect(() => removeListeners, []);\n  return [ref, bounds, forceRefresh];\n} // Adds native resize listener to window\n\n\nfunction useOnWindowResize(onWindowResize) {\n  useEffect(() => {\n    const cb = onWindowResize;\n    window.addEventListener('resize', cb);\n    return () => void window.removeEventListener('resize', cb);\n  }, [onWindowResize]);\n}\n\nfunction useOnWindowScroll(onScroll, enabled) {\n  useEffect(() => {\n    if (enabled) {\n      const cb = onScroll;\n      window.addEventListener('scroll', cb, {\n        capture: true,\n        passive: true\n      });\n      return () => void window.removeEventListener('scroll', cb, true);\n    }\n  }, [onScroll, enabled]);\n} // Returns a list of scroll offsets\n\n\nfunction findScrollContainers(element) {\n  const result = [];\n  if (!element || element === document.body) return result;\n  const {\n    overflow,\n    overflowX,\n    overflowY\n  } = window.getComputedStyle(element);\n  if ([overflow, overflowX, overflowY].some(prop => prop === 'auto' || prop === 'scroll')) result.push(element);\n  return [...result, ...findScrollContainers(element.parentElement)];\n} // Checks if element boundaries are equal\n\n\nconst keys = ['x', 'y', 'top', 'bottom', 'left', 'right', 'width', 'height'];\n\nconst areBoundsEqual = (a, b) => keys.every(key => a[key] === b[key]);\n\nif (typeof module !== 'undefined' && Object.getOwnPropertyDescriptor && Object.getOwnPropertyDescriptor(module, 'exports').writable) {\n  module.exports = useMeasure;\n}\n\nexport default useMeasure;","map":{"version":3,"sources":["/home/rodrigo/Dropbox/Projetos/rodrigoKulb/minecraft-react-game/node_modules/react-use-measure/dist/web.js"],"names":["useState","useRef","useEffect","useMemo","debounce","useMeasure","debounce$1","scroll","polyfill","ResizeObserver","window","Error","bounds","set","left","top","width","height","bottom","right","x","y","state","element","scrollContainers","resizeObserver","lastBounds","scrollDebounce","resizeDebounce","resize","mounted","current","forceRefresh","resizeChange","scrollChange","callback","getBoundingClientRect","size","Object","freeze","areBoundsEqual","removeListeners","forEach","removeEventListener","disconnect","addListeners","observe","scrollContainer","addEventListener","capture","passive","ref","node","findScrollContainers","useOnWindowScroll","Boolean","useOnWindowResize","onWindowResize","cb","onScroll","enabled","result","document","body","overflow","overflowX","overflowY","getComputedStyle","some","prop","push","parentElement","keys","a","b","every","key","module","getOwnPropertyDescriptor","writable","exports"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,SAA3B,EAAsCC,OAAtC,QAAqD,OAArD;AACA,SAASC,QAAT,QAAyB,UAAzB;;AAEA,SAASC,UAAT,CAAoB;AAClBD,EAAAA,QAAQ,EAAEE,UADQ;AAElBC,EAAAA,MAFkB;AAGlBC,EAAAA;AAHkB,IAIhB;AACFJ,EAAAA,QAAQ,EAAE,CADR;AAEFG,EAAAA,MAAM,EAAE;AAFN,CAJJ,EAOG;AACD,QAAME,cAAc,GAAGD,QAAQ,KAAK,OAAOE,MAAP,KAAkB,WAAlB,GAAgC,MAAMD,cAAN,CAAqB,EAArD,GAA0DC,MAAM,CAACD,cAAtE,CAA/B;;AAEA,MAAI,CAACA,cAAL,EAAqB;AACnB,UAAM,IAAIE,KAAJ,CAAU,gJAAV,CAAN;AACD;;AAED,QAAM,CAACC,MAAD,EAASC,GAAT,IAAgBb,QAAQ,CAAC;AAC7Bc,IAAAA,IAAI,EAAE,CADuB;AAE7BC,IAAAA,GAAG,EAAE,CAFwB;AAG7BC,IAAAA,KAAK,EAAE,CAHsB;AAI7BC,IAAAA,MAAM,EAAE,CAJqB;AAK7BC,IAAAA,MAAM,EAAE,CALqB;AAM7BC,IAAAA,KAAK,EAAE,CANsB;AAO7BC,IAAAA,CAAC,EAAE,CAP0B;AAQ7BC,IAAAA,CAAC,EAAE;AAR0B,GAAD,CAA9B,CAPC,CAgBG;;AAEJ,QAAMC,KAAK,GAAGrB,MAAM,CAAC;AACnBsB,IAAAA,OAAO,EAAE,IADU;AAEnBC,IAAAA,gBAAgB,EAAE,IAFC;AAGnBC,IAAAA,cAAc,EAAE,IAHG;AAInBC,IAAAA,UAAU,EAAEd;AAJO,GAAD,CAApB,CAlBC,CAuBG;;AAEJ,QAAMe,cAAc,GAAGrB,UAAU,GAAG,OAAOA,UAAP,KAAsB,QAAtB,GAAiCA,UAAjC,GAA8CA,UAAU,CAACC,MAA5D,GAAqE,IAAtG;AACA,QAAMqB,cAAc,GAAGtB,UAAU,GAAG,OAAOA,UAAP,KAAsB,QAAtB,GAAiCA,UAAjC,GAA8CA,UAAU,CAACuB,MAA5D,GAAqE,IAAtG,CA1BC,CA0B2G;;AAE5G,QAAMC,OAAO,GAAG7B,MAAM,CAAC,KAAD,CAAtB;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd4B,IAAAA,OAAO,CAACC,OAAR,GAAkB,IAAlB;AACA,WAAO,MAAM,MAAMD,OAAO,CAACC,OAAR,GAAkB,KAAxB,CAAb;AACD,GAHQ,CAAT,CA7BC,CAgCG;;AAEJ,QAAM,CAACC,YAAD,EAAeC,YAAf,EAA6BC,YAA7B,IAA6C/B,OAAO,CAAC,MAAM;AAC/D,UAAMgC,QAAQ,GAAG,MAAM;AACrB,UAAI,CAACb,KAAK,CAACS,OAAN,CAAcR,OAAnB,EAA4B;AAC5B,YAAM;AACJT,QAAAA,IADI;AAEJC,QAAAA,GAFI;AAGJC,QAAAA,KAHI;AAIJC,QAAAA,MAJI;AAKJC,QAAAA,MALI;AAMJC,QAAAA,KANI;AAOJC,QAAAA,CAPI;AAQJC,QAAAA;AARI,UASFC,KAAK,CAACS,OAAN,CAAcR,OAAd,CAAsBa,qBAAtB,EATJ;AAUA,YAAMC,IAAI,GAAG;AACXvB,QAAAA,IADW;AAEXC,QAAAA,GAFW;AAGXC,QAAAA,KAHW;AAIXC,QAAAA,MAJW;AAKXC,QAAAA,MALW;AAMXC,QAAAA,KANW;AAOXC,QAAAA,CAPW;AAQXC,QAAAA;AARW,OAAb;AAUAiB,MAAAA,MAAM,CAACC,MAAP,CAAcF,IAAd;AACA,UAAIP,OAAO,CAACC,OAAR,IAAmB,CAACS,cAAc,CAAClB,KAAK,CAACS,OAAN,CAAcL,UAAf,EAA2BW,IAA3B,CAAtC,EAAwExB,GAAG,CAACS,KAAK,CAACS,OAAN,CAAcL,UAAd,GAA2BW,IAA5B,CAAH;AACzE,KAxBD;;AA0BA,WAAO,CAACF,QAAD,EAAWP,cAAc,GAAGxB,QAAQ,CAAC+B,QAAD,EAAWP,cAAX,CAAX,GAAwCO,QAAjE,EAA2ER,cAAc,GAAGvB,QAAQ,CAAC+B,QAAD,EAAWR,cAAX,CAAX,GAAwCQ,QAAjI,CAAP;AACD,GA5ByD,EA4BvD,CAACtB,GAAD,EAAMc,cAAN,EAAsBC,cAAtB,CA5BuD,CAA1D,CAlCC,CA8D0C;;AAE3C,WAASa,eAAT,GAA2B;AACzB,QAAInB,KAAK,CAACS,OAAN,CAAcP,gBAAlB,EAAoC;AAClCF,MAAAA,KAAK,CAACS,OAAN,CAAcP,gBAAd,CAA+BkB,OAA/B,CAAuCnB,OAAO,IAAIA,OAAO,CAACoB,mBAAR,CAA4B,QAA5B,EAAsCT,YAAtC,EAAoD,IAApD,CAAlD;AACAZ,MAAAA,KAAK,CAACS,OAAN,CAAcP,gBAAd,GAAiC,IAAjC;AACD;;AAED,QAAIF,KAAK,CAACS,OAAN,CAAcN,cAAlB,EAAkC;AAChCH,MAAAA,KAAK,CAACS,OAAN,CAAcN,cAAd,CAA6BmB,UAA7B;AACAtB,MAAAA,KAAK,CAACS,OAAN,CAAcN,cAAd,GAA+B,IAA/B;AACD;AACF,GA1EA,CA0EC;;;AAGF,WAASoB,YAAT,GAAwB;AACtB,QAAI,CAACvB,KAAK,CAACS,OAAN,CAAcR,OAAnB,EAA4B;AAC5BD,IAAAA,KAAK,CAACS,OAAN,CAAcN,cAAd,GAA+B,IAAIhB,cAAJ,CAAmByB,YAAnB,CAA/B;AACAZ,IAAAA,KAAK,CAACS,OAAN,CAAcN,cAAd,CAA6BqB,OAA7B,CAAqCxB,KAAK,CAACS,OAAN,CAAcR,OAAnD;;AAEA,QAAIhB,MAAM,IAAIe,KAAK,CAACS,OAAN,CAAcP,gBAA5B,EAA8C;AAC5CF,MAAAA,KAAK,CAACS,OAAN,CAAcP,gBAAd,CAA+BkB,OAA/B,CAAuCK,eAAe,IAAIA,eAAe,CAACC,gBAAhB,CAAiC,QAAjC,EAA2Cd,YAA3C,EAAyD;AACjHe,QAAAA,OAAO,EAAE,IADwG;AAEjHC,QAAAA,OAAO,EAAE;AAFwG,OAAzD,CAA1D;AAID;AACF,GAxFA,CAwFC;;;AAGF,QAAMC,GAAG,GAAGC,IAAI,IAAI;AAClB,QAAI,CAACA,IAAD,IAASA,IAAI,KAAK9B,KAAK,CAACS,OAAN,CAAcR,OAApC,EAA6C;AAC7CkB,IAAAA,eAAe;AACfnB,IAAAA,KAAK,CAACS,OAAN,CAAcR,OAAd,GAAwB6B,IAAxB;AACA9B,IAAAA,KAAK,CAACS,OAAN,CAAcP,gBAAd,GAAiC6B,oBAAoB,CAACD,IAAD,CAArD;AACAP,IAAAA,YAAY;AACb,GAND,CA3FC,CAiGE;;;AAGHS,EAAAA,iBAAiB,CAACpB,YAAD,EAAeqB,OAAO,CAAChD,MAAD,CAAtB,CAAjB;AACAiD,EAAAA,iBAAiB,CAACvB,YAAD,CAAjB,CArGC,CAqGgC;;AAEjC/B,EAAAA,SAAS,CAAC,MAAM;AACduC,IAAAA,eAAe;AACfI,IAAAA,YAAY;AACb,GAHQ,EAGN,CAACtC,MAAD,EAAS2B,YAAT,EAAuBD,YAAvB,CAHM,CAAT,CAvGC,CA0GyC;;AAE1C/B,EAAAA,SAAS,CAAC,MAAMuC,eAAP,EAAwB,EAAxB,CAAT;AACA,SAAO,CAACU,GAAD,EAAMvC,MAAN,EAAcoB,YAAd,CAAP;AACD,C,CAAC;;;AAGF,SAASwB,iBAAT,CAA2BC,cAA3B,EAA2C;AACzCvD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMwD,EAAE,GAAGD,cAAX;AACA/C,IAAAA,MAAM,CAACsC,gBAAP,CAAwB,QAAxB,EAAkCU,EAAlC;AACA,WAAO,MAAM,KAAKhD,MAAM,CAACiC,mBAAP,CAA2B,QAA3B,EAAqCe,EAArC,CAAlB;AACD,GAJQ,EAIN,CAACD,cAAD,CAJM,CAAT;AAKD;;AAED,SAASH,iBAAT,CAA2BK,QAA3B,EAAqCC,OAArC,EAA8C;AAC5C1D,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI0D,OAAJ,EAAa;AACX,YAAMF,EAAE,GAAGC,QAAX;AACAjD,MAAAA,MAAM,CAACsC,gBAAP,CAAwB,QAAxB,EAAkCU,EAAlC,EAAsC;AACpCT,QAAAA,OAAO,EAAE,IAD2B;AAEpCC,QAAAA,OAAO,EAAE;AAF2B,OAAtC;AAIA,aAAO,MAAM,KAAKxC,MAAM,CAACiC,mBAAP,CAA2B,QAA3B,EAAqCe,EAArC,EAAyC,IAAzC,CAAlB;AACD;AACF,GATQ,EASN,CAACC,QAAD,EAAWC,OAAX,CATM,CAAT;AAUD,C,CAAC;;;AAGF,SAASP,oBAAT,CAA8B9B,OAA9B,EAAuC;AACrC,QAAMsC,MAAM,GAAG,EAAf;AACA,MAAI,CAACtC,OAAD,IAAYA,OAAO,KAAKuC,QAAQ,CAACC,IAArC,EAA2C,OAAOF,MAAP;AAC3C,QAAM;AACJG,IAAAA,QADI;AAEJC,IAAAA,SAFI;AAGJC,IAAAA;AAHI,MAIFxD,MAAM,CAACyD,gBAAP,CAAwB5C,OAAxB,CAJJ;AAKA,MAAI,CAACyC,QAAD,EAAWC,SAAX,EAAsBC,SAAtB,EAAiCE,IAAjC,CAAsCC,IAAI,IAAIA,IAAI,KAAK,MAAT,IAAmBA,IAAI,KAAK,QAA1E,CAAJ,EAAyFR,MAAM,CAACS,IAAP,CAAY/C,OAAZ;AACzF,SAAO,CAAC,GAAGsC,MAAJ,EAAY,GAAGR,oBAAoB,CAAC9B,OAAO,CAACgD,aAAT,CAAnC,CAAP;AACD,C,CAAC;;;AAGF,MAAMC,IAAI,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,KAAX,EAAkB,QAAlB,EAA4B,MAA5B,EAAoC,OAApC,EAA6C,OAA7C,EAAsD,QAAtD,CAAb;;AAEA,MAAMhC,cAAc,GAAG,CAACiC,CAAD,EAAIC,CAAJ,KAAUF,IAAI,CAACG,KAAL,CAAWC,GAAG,IAAIH,CAAC,CAACG,GAAD,CAAD,KAAWF,CAAC,CAACE,GAAD,CAA9B,CAAjC;;AAEA,IAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiCvC,MAAM,CAACwC,wBAAxC,IAAoExC,MAAM,CAACwC,wBAAP,CAAgCD,MAAhC,EAAwC,SAAxC,EAAmDE,QAA3H,EAAqI;AACnIF,EAAAA,MAAM,CAACG,OAAP,GAAiB3E,UAAjB;AACD;;AAED,eAAeA,UAAf","sourcesContent":["import { useState, useRef, useEffect, useMemo } from 'react';\nimport { debounce } from 'debounce';\n\nfunction useMeasure({\n  debounce: debounce$1,\n  scroll,\n  polyfill\n} = {\n  debounce: 0,\n  scroll: false\n}) {\n  const ResizeObserver = polyfill || (typeof window === 'undefined' ? class ResizeObserver {} : window.ResizeObserver);\n\n  if (!ResizeObserver) {\n    throw new Error('This browser does not support ResizeObserver out of the box. See: https://github.com/react-spring/react-use-measure/#resize-observer-polyfills');\n  }\n\n  const [bounds, set] = useState({\n    left: 0,\n    top: 0,\n    width: 0,\n    height: 0,\n    bottom: 0,\n    right: 0,\n    x: 0,\n    y: 0\n  }); // keep all state in a ref\n\n  const state = useRef({\n    element: null,\n    scrollContainers: null,\n    resizeObserver: null,\n    lastBounds: bounds\n  }); // set actual debounce values early, so effects know if they should react accordingly\n\n  const scrollDebounce = debounce$1 ? typeof debounce$1 === 'number' ? debounce$1 : debounce$1.scroll : null;\n  const resizeDebounce = debounce$1 ? typeof debounce$1 === 'number' ? debounce$1 : debounce$1.resize : null; // make sure to update state only as long as the component is truly mounted\n\n  const mounted = useRef(false);\n  useEffect(() => {\n    mounted.current = true;\n    return () => void (mounted.current = false);\n  }); // memoize handlers, so event-listeners know when they should update\n\n  const [forceRefresh, resizeChange, scrollChange] = useMemo(() => {\n    const callback = () => {\n      if (!state.current.element) return;\n      const {\n        left,\n        top,\n        width,\n        height,\n        bottom,\n        right,\n        x,\n        y\n      } = state.current.element.getBoundingClientRect();\n      const size = {\n        left,\n        top,\n        width,\n        height,\n        bottom,\n        right,\n        x,\n        y\n      };\n      Object.freeze(size);\n      if (mounted.current && !areBoundsEqual(state.current.lastBounds, size)) set(state.current.lastBounds = size);\n    };\n\n    return [callback, resizeDebounce ? debounce(callback, resizeDebounce) : callback, scrollDebounce ? debounce(callback, scrollDebounce) : callback];\n  }, [set, scrollDebounce, resizeDebounce]); // cleanup current scroll-listeners / observers\n\n  function removeListeners() {\n    if (state.current.scrollContainers) {\n      state.current.scrollContainers.forEach(element => element.removeEventListener('scroll', scrollChange, true));\n      state.current.scrollContainers = null;\n    }\n\n    if (state.current.resizeObserver) {\n      state.current.resizeObserver.disconnect();\n      state.current.resizeObserver = null;\n    }\n  } // add scroll-listeners / observers\n\n\n  function addListeners() {\n    if (!state.current.element) return;\n    state.current.resizeObserver = new ResizeObserver(scrollChange);\n    state.current.resizeObserver.observe(state.current.element);\n\n    if (scroll && state.current.scrollContainers) {\n      state.current.scrollContainers.forEach(scrollContainer => scrollContainer.addEventListener('scroll', scrollChange, {\n        capture: true,\n        passive: true\n      }));\n    }\n  } // the ref we expose to the user\n\n\n  const ref = node => {\n    if (!node || node === state.current.element) return;\n    removeListeners();\n    state.current.element = node;\n    state.current.scrollContainers = findScrollContainers(node);\n    addListeners();\n  }; // add general event listeners\n\n\n  useOnWindowScroll(scrollChange, Boolean(scroll));\n  useOnWindowResize(resizeChange); // respond to changes that are relevant for the listeners\n\n  useEffect(() => {\n    removeListeners();\n    addListeners();\n  }, [scroll, scrollChange, resizeChange]); // remove all listeners when the components unmounts\n\n  useEffect(() => removeListeners, []);\n  return [ref, bounds, forceRefresh];\n} // Adds native resize listener to window\n\n\nfunction useOnWindowResize(onWindowResize) {\n  useEffect(() => {\n    const cb = onWindowResize;\n    window.addEventListener('resize', cb);\n    return () => void window.removeEventListener('resize', cb);\n  }, [onWindowResize]);\n}\n\nfunction useOnWindowScroll(onScroll, enabled) {\n  useEffect(() => {\n    if (enabled) {\n      const cb = onScroll;\n      window.addEventListener('scroll', cb, {\n        capture: true,\n        passive: true\n      });\n      return () => void window.removeEventListener('scroll', cb, true);\n    }\n  }, [onScroll, enabled]);\n} // Returns a list of scroll offsets\n\n\nfunction findScrollContainers(element) {\n  const result = [];\n  if (!element || element === document.body) return result;\n  const {\n    overflow,\n    overflowX,\n    overflowY\n  } = window.getComputedStyle(element);\n  if ([overflow, overflowX, overflowY].some(prop => prop === 'auto' || prop === 'scroll')) result.push(element);\n  return [...result, ...findScrollContainers(element.parentElement)];\n} // Checks if element boundaries are equal\n\n\nconst keys = ['x', 'y', 'top', 'bottom', 'left', 'right', 'width', 'height'];\n\nconst areBoundsEqual = (a, b) => keys.every(key => a[key] === b[key]);\n\nif (typeof module !== 'undefined' && Object.getOwnPropertyDescriptor && Object.getOwnPropertyDescriptor(module, 'exports').writable) {\n  module.exports = useMeasure;\n}\n\nexport default useMeasure;\n"]},"metadata":{},"sourceType":"module"}