{"ast":null,"code":"import { BufferAttribute, BufferGeometry, FileLoader, Loader } from \"../../../build/three.module.js\";\n\nvar DRACOLoader = function (manager) {\n  Loader.call(this, manager);\n  this.decoderPath = '';\n  this.decoderConfig = {};\n  this.decoderBinary = null;\n  this.decoderPending = null;\n  this.workerLimit = 4;\n  this.workerPool = [];\n  this.workerNextTaskID = 1;\n  this.workerSourceURL = '';\n  this.defaultAttributeIDs = {\n    position: 'POSITION',\n    normal: 'NORMAL',\n    color: 'COLOR',\n    uv: 'TEX_COORD'\n  };\n  this.defaultAttributeTypes = {\n    position: 'Float32Array',\n    normal: 'Float32Array',\n    color: 'Float32Array',\n    uv: 'Float32Array'\n  };\n};\n\nDRACOLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: DRACOLoader,\n  setDecoderPath: function (path) {\n    this.decoderPath = path;\n    return this;\n  },\n  setDecoderConfig: function (config) {\n    this.decoderConfig = config;\n    return this;\n  },\n  setWorkerLimit: function (workerLimit) {\n    this.workerLimit = workerLimit;\n    return this;\n  },\n\n  /** @deprecated */\n  setVerbosity: function () {\n    console.warn('THREE.DRACOLoader: The .setVerbosity() method has been removed.');\n  },\n\n  /** @deprecated */\n  setDrawMode: function () {\n    console.warn('THREE.DRACOLoader: The .setDrawMode() method has been removed.');\n  },\n\n  /** @deprecated */\n  setSkipDequantization: function () {\n    console.warn('THREE.DRACOLoader: The .setSkipDequantization() method has been removed.');\n  },\n  load: function (url, onLoad, onProgress, onError) {\n    var loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n\n    if (this.crossOrigin === 'use-credentials') {\n      loader.setWithCredentials(true);\n    }\n\n    loader.load(url, buffer => {\n      var taskConfig = {\n        attributeIDs: this.defaultAttributeIDs,\n        attributeTypes: this.defaultAttributeTypes,\n        useUniqueIDs: false\n      };\n      this.decodeGeometry(buffer, taskConfig).then(onLoad).catch(onError);\n    }, onProgress, onError);\n  },\n\n  /** @deprecated Kept for backward-compatibility with previous DRACOLoader versions. */\n  decodeDracoFile: function (buffer, callback, attributeIDs, attributeTypes) {\n    var taskConfig = {\n      attributeIDs: attributeIDs || this.defaultAttributeIDs,\n      attributeTypes: attributeTypes || this.defaultAttributeTypes,\n      useUniqueIDs: !!attributeIDs\n    };\n    this.decodeGeometry(buffer, taskConfig).then(callback);\n  },\n  decodeGeometry: function (buffer, taskConfig) {\n    // TODO: For backward-compatibility, support 'attributeTypes' objects containing\n    // references (rather than names) to typed array constructors. These must be\n    // serialized before sending them to the worker.\n    for (var attribute in taskConfig.attributeTypes) {\n      var type = taskConfig.attributeTypes[attribute];\n\n      if (type.BYTES_PER_ELEMENT !== undefined) {\n        taskConfig.attributeTypes[attribute] = type.name;\n      }\n    } //\n\n\n    var taskKey = JSON.stringify(taskConfig); // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n    // again from this thread.\n\n    if (DRACOLoader.taskCache.has(buffer)) {\n      var cachedTask = DRACOLoader.taskCache.get(buffer);\n\n      if (cachedTask.key === taskKey) {\n        return cachedTask.promise;\n      } else if (buffer.byteLength === 0) {\n        // Technically, it would be possible to wait for the previous task to complete,\n        // transfer the buffer back, and decode again with the second configuration. That\n        // is complex, and I don't know of any reason to decode a Draco buffer twice in\n        // different ways, so this is left unimplemented.\n        throw new Error('THREE.DRACOLoader: Unable to re-decode a buffer with different ' + 'settings. Buffer has already been transferred.');\n      }\n    } //\n\n\n    var worker;\n    var taskID = this.workerNextTaskID++;\n    var taskCost = buffer.byteLength; // Obtain a worker and assign a task, and construct a geometry instance\n    // when the task completes.\n\n    var geometryPending = this._getWorker(taskID, taskCost).then(_worker => {\n      worker = _worker;\n      return new Promise((resolve, reject) => {\n        worker._callbacks[taskID] = {\n          resolve,\n          reject\n        };\n        worker.postMessage({\n          type: 'decode',\n          id: taskID,\n          taskConfig,\n          buffer\n        }, [buffer]); // this.debug();\n      });\n    }).then(message => this._createGeometry(message.geometry)); // Remove task from the task list.\n    // Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\n\n    geometryPending.catch(() => true).then(() => {\n      if (worker && taskID) {\n        this._releaseTask(worker, taskID); // this.debug();\n\n      }\n    }); // Cache the task result.\n\n    DRACOLoader.taskCache.set(buffer, {\n      key: taskKey,\n      promise: geometryPending\n    });\n    return geometryPending;\n  },\n  _createGeometry: function (geometryData) {\n    var geometry = new BufferGeometry();\n\n    if (geometryData.index) {\n      geometry.setIndex(new BufferAttribute(geometryData.index.array, 1));\n    }\n\n    for (var i = 0; i < geometryData.attributes.length; i++) {\n      var attribute = geometryData.attributes[i];\n      var name = attribute.name;\n      var array = attribute.array;\n      var itemSize = attribute.itemSize;\n      geometry.setAttribute(name, new BufferAttribute(array, itemSize));\n    }\n\n    return geometry;\n  },\n  _loadLibrary: function (url, responseType) {\n    var loader = new FileLoader(this.manager);\n    loader.setPath(this.decoderPath);\n    loader.setResponseType(responseType);\n    return new Promise((resolve, reject) => {\n      loader.load(url, resolve, undefined, reject);\n    });\n  },\n  preload: function () {\n    this._initDecoder();\n\n    return this;\n  },\n  _initDecoder: function () {\n    if (this.decoderPending) return this.decoderPending;\n    var useJS = typeof WebAssembly !== 'object' || this.decoderConfig.type === 'js';\n    var librariesPending = [];\n\n    if (useJS) {\n      librariesPending.push(this._loadLibrary('draco_decoder.js', 'text'));\n    } else {\n      librariesPending.push(this._loadLibrary('draco_wasm_wrapper.js', 'text'));\n      librariesPending.push(this._loadLibrary('draco_decoder.wasm', 'arraybuffer'));\n    }\n\n    this.decoderPending = Promise.all(librariesPending).then(libraries => {\n      var jsContent = libraries[0];\n\n      if (!useJS) {\n        this.decoderConfig.wasmBinary = libraries[1];\n      }\n\n      var fn = DRACOLoader.DRACOWorker.toString();\n      var body = ['/* draco decoder */', jsContent, '', '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n      this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n    });\n    return this.decoderPending;\n  },\n  _getWorker: function (taskID, taskCost) {\n    return this._initDecoder().then(() => {\n      if (this.workerPool.length < this.workerLimit) {\n        var worker = new Worker(this.workerSourceURL);\n        worker._callbacks = {};\n        worker._taskCosts = {};\n        worker._taskLoad = 0;\n        worker.postMessage({\n          type: 'init',\n          decoderConfig: this.decoderConfig\n        });\n\n        worker.onmessage = function (e) {\n          var message = e.data;\n\n          switch (message.type) {\n            case 'decode':\n              worker._callbacks[message.id].resolve(message);\n\n              break;\n\n            case 'error':\n              worker._callbacks[message.id].reject(message);\n\n              break;\n\n            default:\n              console.error('THREE.DRACOLoader: Unexpected message, \"' + message.type + '\"');\n          }\n        };\n\n        this.workerPool.push(worker);\n      } else {\n        this.workerPool.sort(function (a, b) {\n          return a._taskLoad > b._taskLoad ? -1 : 1;\n        });\n      }\n\n      var worker = this.workerPool[this.workerPool.length - 1];\n      worker._taskCosts[taskID] = taskCost;\n      worker._taskLoad += taskCost;\n      return worker;\n    });\n  },\n  _releaseTask: function (worker, taskID) {\n    worker._taskLoad -= worker._taskCosts[taskID];\n    delete worker._callbacks[taskID];\n    delete worker._taskCosts[taskID];\n  },\n  debug: function () {\n    console.log('Task load: ', this.workerPool.map(worker => worker._taskLoad));\n  },\n  dispose: function () {\n    for (var i = 0; i < this.workerPool.length; ++i) {\n      this.workerPool[i].terminate();\n    }\n\n    this.workerPool.length = 0;\n    return this;\n  }\n});\n/* WEB WORKER */\n\nDRACOLoader.DRACOWorker = function () {\n  var decoderConfig;\n  var decoderPending;\n\n  onmessage = function (e) {\n    var message = e.data;\n\n    switch (message.type) {\n      case 'init':\n        decoderConfig = message.decoderConfig;\n        decoderPending = new Promise(function (resolve\n        /*, reject*/\n        ) {\n          decoderConfig.onModuleLoaded = function (draco) {\n            // Module is Promise-like. Wrap before resolving to avoid loop.\n            resolve({\n              draco: draco\n            });\n          };\n\n          DracoDecoderModule(decoderConfig); // eslint-disable-line no-undef\n        });\n        break;\n\n      case 'decode':\n        var buffer = message.buffer;\n        var taskConfig = message.taskConfig;\n        decoderPending.then(module => {\n          var draco = module.draco;\n          var decoder = new draco.Decoder();\n          var decoderBuffer = new draco.DecoderBuffer();\n          decoderBuffer.Init(new Int8Array(buffer), buffer.byteLength);\n\n          try {\n            var geometry = decodeGeometry(draco, decoder, decoderBuffer, taskConfig);\n            var buffers = geometry.attributes.map(attr => attr.array.buffer);\n            if (geometry.index) buffers.push(geometry.index.array.buffer);\n            self.postMessage({\n              type: 'decode',\n              id: message.id,\n              geometry\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: 'error',\n              id: message.id,\n              error: error.message\n            });\n          } finally {\n            draco.destroy(decoderBuffer);\n            draco.destroy(decoder);\n          }\n        });\n        break;\n    }\n  };\n\n  function decodeGeometry(draco, decoder, decoderBuffer, taskConfig) {\n    var attributeIDs = taskConfig.attributeIDs;\n    var attributeTypes = taskConfig.attributeTypes;\n    var dracoGeometry;\n    var decodingStatus;\n    var geometryType = decoder.GetEncodedGeometryType(decoderBuffer);\n\n    if (geometryType === draco.TRIANGULAR_MESH) {\n      dracoGeometry = new draco.Mesh();\n      decodingStatus = decoder.DecodeBufferToMesh(decoderBuffer, dracoGeometry);\n    } else if (geometryType === draco.POINT_CLOUD) {\n      dracoGeometry = new draco.PointCloud();\n      decodingStatus = decoder.DecodeBufferToPointCloud(decoderBuffer, dracoGeometry);\n    } else {\n      throw new Error('THREE.DRACOLoader: Unexpected geometry type.');\n    }\n\n    if (!decodingStatus.ok() || dracoGeometry.ptr === 0) {\n      throw new Error('THREE.DRACOLoader: Decoding failed: ' + decodingStatus.error_msg());\n    }\n\n    var geometry = {\n      index: null,\n      attributes: []\n    }; // Gather all vertex attributes.\n\n    for (var attributeName in attributeIDs) {\n      var attributeType = self[attributeTypes[attributeName]];\n      var attribute;\n      var attributeID; // A Draco file may be created with default vertex attributes, whose attribute IDs\n      // are mapped 1:1 from their semantic name (POSITION, NORMAL, ...). Alternatively,\n      // a Draco file may contain a custom set of attributes, identified by known unique\n      // IDs. glTF files always do the latter, and `.drc` files typically do the former.\n\n      if (taskConfig.useUniqueIDs) {\n        attributeID = attributeIDs[attributeName];\n        attribute = decoder.GetAttributeByUniqueId(dracoGeometry, attributeID);\n      } else {\n        attributeID = decoder.GetAttributeId(dracoGeometry, draco[attributeIDs[attributeName]]);\n        if (attributeID === -1) continue;\n        attribute = decoder.GetAttribute(dracoGeometry, attributeID);\n      }\n\n      geometry.attributes.push(decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute));\n    } // Add index.\n\n\n    if (geometryType === draco.TRIANGULAR_MESH) {\n      // Generate mesh faces.\n      var numFaces = dracoGeometry.num_faces();\n      var numIndices = numFaces * 3;\n      var index = new Uint32Array(numIndices);\n      var indexArray = new draco.DracoInt32Array();\n\n      for (var i = 0; i < numFaces; ++i) {\n        decoder.GetFaceFromMesh(dracoGeometry, i, indexArray);\n\n        for (var j = 0; j < 3; ++j) {\n          index[i * 3 + j] = indexArray.GetValue(j);\n        }\n      }\n\n      geometry.index = {\n        array: index,\n        itemSize: 1\n      };\n      draco.destroy(indexArray);\n    }\n\n    draco.destroy(dracoGeometry);\n    return geometry;\n  }\n\n  function decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute) {\n    var numComponents = attribute.num_components();\n    var numPoints = dracoGeometry.num_points();\n    var numValues = numPoints * numComponents;\n    var dracoArray;\n    var array;\n\n    switch (attributeType) {\n      case Float32Array:\n        dracoArray = new draco.DracoFloat32Array();\n        decoder.GetAttributeFloatForAllPoints(dracoGeometry, attribute, dracoArray);\n        array = new Float32Array(numValues);\n        break;\n\n      case Int8Array:\n        dracoArray = new draco.DracoInt8Array();\n        decoder.GetAttributeInt8ForAllPoints(dracoGeometry, attribute, dracoArray);\n        array = new Int8Array(numValues);\n        break;\n\n      case Int16Array:\n        dracoArray = new draco.DracoInt16Array();\n        decoder.GetAttributeInt16ForAllPoints(dracoGeometry, attribute, dracoArray);\n        array = new Int16Array(numValues);\n        break;\n\n      case Int32Array:\n        dracoArray = new draco.DracoInt32Array();\n        decoder.GetAttributeInt32ForAllPoints(dracoGeometry, attribute, dracoArray);\n        array = new Int32Array(numValues);\n        break;\n\n      case Uint8Array:\n        dracoArray = new draco.DracoUInt8Array();\n        decoder.GetAttributeUInt8ForAllPoints(dracoGeometry, attribute, dracoArray);\n        array = new Uint8Array(numValues);\n        break;\n\n      case Uint16Array:\n        dracoArray = new draco.DracoUInt16Array();\n        decoder.GetAttributeUInt16ForAllPoints(dracoGeometry, attribute, dracoArray);\n        array = new Uint16Array(numValues);\n        break;\n\n      case Uint32Array:\n        dracoArray = new draco.DracoUInt32Array();\n        decoder.GetAttributeUInt32ForAllPoints(dracoGeometry, attribute, dracoArray);\n        array = new Uint32Array(numValues);\n        break;\n\n      default:\n        throw new Error('THREE.DRACOLoader: Unexpected attribute type.');\n    }\n\n    for (var i = 0; i < numValues; i++) {\n      array[i] = dracoArray.GetValue(i);\n    }\n\n    draco.destroy(dracoArray);\n    return {\n      name: attributeName,\n      array: array,\n      itemSize: numComponents\n    };\n  }\n};\n\nDRACOLoader.taskCache = new WeakMap();\n/** Deprecated static methods */\n\n/** @deprecated */\n\nDRACOLoader.setDecoderPath = function () {\n  console.warn('THREE.DRACOLoader: The .setDecoderPath() method has been removed. Use instance methods.');\n};\n/** @deprecated */\n\n\nDRACOLoader.setDecoderConfig = function () {\n  console.warn('THREE.DRACOLoader: The .setDecoderConfig() method has been removed. Use instance methods.');\n};\n/** @deprecated */\n\n\nDRACOLoader.releaseDecoderModule = function () {\n  console.warn('THREE.DRACOLoader: The .releaseDecoderModule() method has been removed. Use instance methods.');\n};\n/** @deprecated */\n\n\nDRACOLoader.getDecoderModule = function () {\n  console.warn('THREE.DRACOLoader: The .getDecoderModule() method has been removed. Use instance methods.');\n};\n\nexport { DRACOLoader };","map":{"version":3,"sources":["/home/rodrigo/Dropbox/Projetos/rodrigoKulb/minecraft-react-game/node_modules/three/examples/jsm/loaders/DRACOLoader.js"],"names":["BufferAttribute","BufferGeometry","FileLoader","Loader","DRACOLoader","manager","call","decoderPath","decoderConfig","decoderBinary","decoderPending","workerLimit","workerPool","workerNextTaskID","workerSourceURL","defaultAttributeIDs","position","normal","color","uv","defaultAttributeTypes","prototype","Object","assign","create","constructor","setDecoderPath","path","setDecoderConfig","config","setWorkerLimit","setVerbosity","console","warn","setDrawMode","setSkipDequantization","load","url","onLoad","onProgress","onError","loader","setPath","setResponseType","setRequestHeader","requestHeader","crossOrigin","setWithCredentials","buffer","taskConfig","attributeIDs","attributeTypes","useUniqueIDs","decodeGeometry","then","catch","decodeDracoFile","callback","attribute","type","BYTES_PER_ELEMENT","undefined","name","taskKey","JSON","stringify","taskCache","has","cachedTask","get","key","promise","byteLength","Error","worker","taskID","taskCost","geometryPending","_getWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","id","message","_createGeometry","geometry","_releaseTask","set","geometryData","index","setIndex","array","i","attributes","length","itemSize","setAttribute","_loadLibrary","responseType","preload","_initDecoder","useJS","WebAssembly","librariesPending","push","all","libraries","jsContent","wasmBinary","fn","DRACOWorker","toString","body","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","Worker","_taskCosts","_taskLoad","onmessage","e","data","error","sort","a","b","debug","log","map","dispose","terminate","onModuleLoaded","draco","DracoDecoderModule","module","decoder","Decoder","decoderBuffer","DecoderBuffer","Init","Int8Array","buffers","attr","self","destroy","dracoGeometry","decodingStatus","geometryType","GetEncodedGeometryType","TRIANGULAR_MESH","Mesh","DecodeBufferToMesh","POINT_CLOUD","PointCloud","DecodeBufferToPointCloud","ok","ptr","error_msg","attributeName","attributeType","attributeID","GetAttributeByUniqueId","GetAttributeId","GetAttribute","decodeAttribute","numFaces","num_faces","numIndices","Uint32Array","indexArray","DracoInt32Array","GetFaceFromMesh","j","GetValue","numComponents","num_components","numPoints","num_points","numValues","dracoArray","Float32Array","DracoFloat32Array","GetAttributeFloatForAllPoints","DracoInt8Array","GetAttributeInt8ForAllPoints","Int16Array","DracoInt16Array","GetAttributeInt16ForAllPoints","Int32Array","GetAttributeInt32ForAllPoints","Uint8Array","DracoUInt8Array","GetAttributeUInt8ForAllPoints","Uint16Array","DracoUInt16Array","GetAttributeUInt16ForAllPoints","DracoUInt32Array","GetAttributeUInt32ForAllPoints","WeakMap","releaseDecoderModule","getDecoderModule"],"mappings":"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","sourcesContent":["import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tFileLoader,\n\tLoader\n} from \"../../../build/three.module.js\";\n\nvar DRACOLoader = function ( manager ) {\n\n\tLoader.call( this, manager );\n\n\tthis.decoderPath = '';\n\tthis.decoderConfig = {};\n\tthis.decoderBinary = null;\n\tthis.decoderPending = null;\n\n\tthis.workerLimit = 4;\n\tthis.workerPool = [];\n\tthis.workerNextTaskID = 1;\n\tthis.workerSourceURL = '';\n\n\tthis.defaultAttributeIDs = {\n\t\tposition: 'POSITION',\n\t\tnormal: 'NORMAL',\n\t\tcolor: 'COLOR',\n\t\tuv: 'TEX_COORD'\n\t};\n\tthis.defaultAttributeTypes = {\n\t\tposition: 'Float32Array',\n\t\tnormal: 'Float32Array',\n\t\tcolor: 'Float32Array',\n\t\tuv: 'Float32Array'\n\t};\n\n};\n\nDRACOLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: DRACOLoader,\n\n\tsetDecoderPath: function ( path ) {\n\n\t\tthis.decoderPath = path;\n\n\t\treturn this;\n\n\t},\n\n\tsetDecoderConfig: function ( config ) {\n\n\t\tthis.decoderConfig = config;\n\n\t\treturn this;\n\n\t},\n\n\tsetWorkerLimit: function ( workerLimit ) {\n\n\t\tthis.workerLimit = workerLimit;\n\n\t\treturn this;\n\n\t},\n\n\t/** @deprecated */\n\tsetVerbosity: function () {\n\n\t\tconsole.warn( 'THREE.DRACOLoader: The .setVerbosity() method has been removed.' );\n\n\t},\n\n\t/** @deprecated */\n\tsetDrawMode: function () {\n\n\t\tconsole.warn( 'THREE.DRACOLoader: The .setDrawMode() method has been removed.' );\n\n\t},\n\n\t/** @deprecated */\n\tsetSkipDequantization: function () {\n\n\t\tconsole.warn( 'THREE.DRACOLoader: The .setSkipDequantization() method has been removed.' );\n\n\t},\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar loader = new FileLoader( this.manager );\n\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\n\t\tif ( this.crossOrigin === 'use-credentials' ) {\n\n\t\t\tloader.setWithCredentials( true );\n\n\t\t}\n\n\t\tloader.load( url, ( buffer ) => {\n\n\t\t\tvar taskConfig = {\n\t\t\t\tattributeIDs: this.defaultAttributeIDs,\n\t\t\t\tattributeTypes: this.defaultAttributeTypes,\n\t\t\t\tuseUniqueIDs: false\n\t\t\t};\n\n\t\t\tthis.decodeGeometry( buffer, taskConfig )\n\t\t\t\t.then( onLoad )\n\t\t\t\t.catch( onError );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\t/** @deprecated Kept for backward-compatibility with previous DRACOLoader versions. */\n\tdecodeDracoFile: function ( buffer, callback, attributeIDs, attributeTypes ) {\n\n\t\tvar taskConfig = {\n\t\t\tattributeIDs: attributeIDs || this.defaultAttributeIDs,\n\t\t\tattributeTypes: attributeTypes || this.defaultAttributeTypes,\n\t\t\tuseUniqueIDs: !! attributeIDs\n\t\t};\n\n\t\tthis.decodeGeometry( buffer, taskConfig ).then( callback );\n\n\t},\n\n\tdecodeGeometry: function ( buffer, taskConfig ) {\n\n\t\t// TODO: For backward-compatibility, support 'attributeTypes' objects containing\n\t\t// references (rather than names) to typed array constructors. These must be\n\t\t// serialized before sending them to the worker.\n\t\tfor ( var attribute in taskConfig.attributeTypes ) {\n\n\t\t\tvar type = taskConfig.attributeTypes[ attribute ];\n\n\t\t\tif ( type.BYTES_PER_ELEMENT !== undefined ) {\n\n\t\t\t\ttaskConfig.attributeTypes[ attribute ] = type.name;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar taskKey = JSON.stringify( taskConfig );\n\n\t\t// Check for an existing task using this buffer. A transferred buffer cannot be transferred\n\t\t// again from this thread.\n\t\tif ( DRACOLoader.taskCache.has( buffer ) ) {\n\n\t\t\tvar cachedTask = DRACOLoader.taskCache.get( buffer );\n\n\t\t\tif ( cachedTask.key === taskKey ) {\n\n\t\t\t\treturn cachedTask.promise;\n\n\t\t\t} else if ( buffer.byteLength === 0 ) {\n\n\t\t\t\t// Technically, it would be possible to wait for the previous task to complete,\n\t\t\t\t// transfer the buffer back, and decode again with the second configuration. That\n\t\t\t\t// is complex, and I don't know of any reason to decode a Draco buffer twice in\n\t\t\t\t// different ways, so this is left unimplemented.\n\t\t\t\tthrow new Error(\n\n\t\t\t\t\t'THREE.DRACOLoader: Unable to re-decode a buffer with different ' +\n\t\t\t\t\t'settings. Buffer has already been transferred.'\n\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar worker;\n\t\tvar taskID = this.workerNextTaskID ++;\n\t\tvar taskCost = buffer.byteLength;\n\n\t\t// Obtain a worker and assign a task, and construct a geometry instance\n\t\t// when the task completes.\n\t\tvar geometryPending = this._getWorker( taskID, taskCost )\n\t\t\t.then( ( _worker ) => {\n\n\t\t\t\tworker = _worker;\n\n\t\t\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\t\t\tworker._callbacks[ taskID ] = { resolve, reject };\n\n\t\t\t\t\tworker.postMessage( { type: 'decode', id: taskID, taskConfig, buffer }, [ buffer ] );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t} );\n\n\t\t\t} )\n\t\t\t.then( ( message ) => this._createGeometry( message.geometry ) );\n\n\t\t// Remove task from the task list.\n\t\t// Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\t\tgeometryPending\n\t\t\t.catch( () => true )\n\t\t\t.then( () => {\n\n\t\t\t\tif ( worker && taskID ) {\n\n\t\t\t\t\tthis._releaseTask( worker, taskID );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t// Cache the task result.\n\t\tDRACOLoader.taskCache.set( buffer, {\n\n\t\t\tkey: taskKey,\n\t\t\tpromise: geometryPending\n\n\t\t} );\n\n\t\treturn geometryPending;\n\n\t},\n\n\t_createGeometry: function ( geometryData ) {\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tif ( geometryData.index ) {\n\n\t\t\tgeometry.setIndex( new BufferAttribute( geometryData.index.array, 1 ) );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < geometryData.attributes.length; i ++ ) {\n\n\t\t\tvar attribute = geometryData.attributes[ i ];\n\t\t\tvar name = attribute.name;\n\t\t\tvar array = attribute.array;\n\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\tgeometry.setAttribute( name, new BufferAttribute( array, itemSize ) );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t},\n\n\t_loadLibrary: function ( url, responseType ) {\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.decoderPath );\n\t\tloader.setResponseType( responseType );\n\n\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\tloader.load( url, resolve, undefined, reject );\n\n\t\t} );\n\n\t},\n\n\tpreload: function () {\n\n\t\tthis._initDecoder();\n\n\t\treturn this;\n\n\t},\n\n\t_initDecoder: function () {\n\n\t\tif ( this.decoderPending ) return this.decoderPending;\n\n\t\tvar useJS = typeof WebAssembly !== 'object' || this.decoderConfig.type === 'js';\n\t\tvar librariesPending = [];\n\n\t\tif ( useJS ) {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.js', 'text' ) );\n\n\t\t} else {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_wasm_wrapper.js', 'text' ) );\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.wasm', 'arraybuffer' ) );\n\n\t\t}\n\n\t\tthis.decoderPending = Promise.all( librariesPending )\n\t\t\t.then( ( libraries ) => {\n\n\t\t\t\tvar jsContent = libraries[ 0 ];\n\n\t\t\t\tif ( ! useJS ) {\n\n\t\t\t\t\tthis.decoderConfig.wasmBinary = libraries[ 1 ];\n\n\t\t\t\t}\n\n\t\t\t\tvar fn = DRACOLoader.DRACOWorker.toString();\n\n\t\t\t\tvar body = [\n\t\t\t\t\t'/* draco decoder */',\n\t\t\t\t\tjsContent,\n\t\t\t\t\t'',\n\t\t\t\t\t'/* worker */',\n\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\n\t\t\t} );\n\n\t\treturn this.decoderPending;\n\n\t},\n\n\t_getWorker: function ( taskID, taskCost ) {\n\n\t\treturn this._initDecoder().then( () => {\n\n\t\t\tif ( this.workerPool.length < this.workerLimit ) {\n\n\t\t\t\tvar worker = new Worker( this.workerSourceURL );\n\n\t\t\t\tworker._callbacks = {};\n\t\t\t\tworker._taskCosts = {};\n\t\t\t\tworker._taskLoad = 0;\n\n\t\t\t\tworker.postMessage( { type: 'init', decoderConfig: this.decoderConfig } );\n\n\t\t\t\tworker.onmessage = function ( e ) {\n\n\t\t\t\t\tvar message = e.data;\n\n\t\t\t\t\tswitch ( message.type ) {\n\n\t\t\t\t\t\tcase 'decode':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].resolve( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'error':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].reject( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.DRACOLoader: Unexpected message, \"' + message.type + '\"' );\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\tthis.workerPool.push( worker );\n\n\t\t\t} else {\n\n\t\t\t\tthis.workerPool.sort( function ( a, b ) {\n\n\t\t\t\t\treturn a._taskLoad > b._taskLoad ? - 1 : 1;\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tvar worker = this.workerPool[ this.workerPool.length - 1 ];\n\t\t\tworker._taskCosts[ taskID ] = taskCost;\n\t\t\tworker._taskLoad += taskCost;\n\t\t\treturn worker;\n\n\t\t} );\n\n\t},\n\n\t_releaseTask: function ( worker, taskID ) {\n\n\t\tworker._taskLoad -= worker._taskCosts[ taskID ];\n\t\tdelete worker._callbacks[ taskID ];\n\t\tdelete worker._taskCosts[ taskID ];\n\n\t},\n\n\tdebug: function () {\n\n\t\tconsole.log( 'Task load: ', this.workerPool.map( ( worker ) => worker._taskLoad ) );\n\n\t},\n\n\tdispose: function () {\n\n\t\tfor ( var i = 0; i < this.workerPool.length; ++ i ) {\n\n\t\t\tthis.workerPool[ i ].terminate();\n\n\t\t}\n\n\t\tthis.workerPool.length = 0;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/* WEB WORKER */\n\nDRACOLoader.DRACOWorker = function () {\n\n\tvar decoderConfig;\n\tvar decoderPending;\n\n\tonmessage = function ( e ) {\n\n\t\tvar message = e.data;\n\n\t\tswitch ( message.type ) {\n\n\t\t\tcase 'init':\n\t\t\t\tdecoderConfig = message.decoderConfig;\n\t\t\t\tdecoderPending = new Promise( function ( resolve/*, reject*/ ) {\n\n\t\t\t\t\tdecoderConfig.onModuleLoaded = function ( draco ) {\n\n\t\t\t\t\t\t// Module is Promise-like. Wrap before resolving to avoid loop.\n\t\t\t\t\t\tresolve( { draco: draco } );\n\n\t\t\t\t\t};\n\n\t\t\t\t\tDracoDecoderModule( decoderConfig ); // eslint-disable-line no-undef\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t\tcase 'decode':\n\t\t\t\tvar buffer = message.buffer;\n\t\t\t\tvar taskConfig = message.taskConfig;\n\t\t\t\tdecoderPending.then( ( module ) => {\n\n\t\t\t\t\tvar draco = module.draco;\n\t\t\t\t\tvar decoder = new draco.Decoder();\n\t\t\t\t\tvar decoderBuffer = new draco.DecoderBuffer();\n\t\t\t\t\tdecoderBuffer.Init( new Int8Array( buffer ), buffer.byteLength );\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tvar geometry = decodeGeometry( draco, decoder, decoderBuffer, taskConfig );\n\n\t\t\t\t\t\tvar buffers = geometry.attributes.map( ( attr ) => attr.array.buffer );\n\n\t\t\t\t\t\tif ( geometry.index ) buffers.push( geometry.index.array.buffer );\n\n\t\t\t\t\t\tself.postMessage( { type: 'decode', id: message.id, geometry }, buffers );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tconsole.error( error );\n\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\n\n\t\t\t\t\t} finally {\n\n\t\t\t\t\t\tdraco.destroy( decoderBuffer );\n\t\t\t\t\t\tdraco.destroy( decoder );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t};\n\n\tfunction decodeGeometry( draco, decoder, decoderBuffer, taskConfig ) {\n\n\t\tvar attributeIDs = taskConfig.attributeIDs;\n\t\tvar attributeTypes = taskConfig.attributeTypes;\n\n\t\tvar dracoGeometry;\n\t\tvar decodingStatus;\n\n\t\tvar geometryType = decoder.GetEncodedGeometryType( decoderBuffer );\n\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\tdracoGeometry = new draco.Mesh();\n\t\t\tdecodingStatus = decoder.DecodeBufferToMesh( decoderBuffer, dracoGeometry );\n\n\t\t} else if ( geometryType === draco.POINT_CLOUD ) {\n\n\t\t\tdracoGeometry = new draco.PointCloud();\n\t\t\tdecodingStatus = decoder.DecodeBufferToPointCloud( decoderBuffer, dracoGeometry );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Unexpected geometry type.' );\n\n\t\t}\n\n\t\tif ( ! decodingStatus.ok() || dracoGeometry.ptr === 0 ) {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Decoding failed: ' + decodingStatus.error_msg() );\n\n\t\t}\n\n\t\tvar geometry = { index: null, attributes: [] };\n\n\t\t// Gather all vertex attributes.\n\t\tfor ( var attributeName in attributeIDs ) {\n\n\t\t\tvar attributeType = self[ attributeTypes[ attributeName ] ];\n\n\t\t\tvar attribute;\n\t\t\tvar attributeID;\n\n\t\t\t// A Draco file may be created with default vertex attributes, whose attribute IDs\n\t\t\t// are mapped 1:1 from their semantic name (POSITION, NORMAL, ...). Alternatively,\n\t\t\t// a Draco file may contain a custom set of attributes, identified by known unique\n\t\t\t// IDs. glTF files always do the latter, and `.drc` files typically do the former.\n\t\t\tif ( taskConfig.useUniqueIDs ) {\n\n\t\t\t\tattributeID = attributeIDs[ attributeName ];\n\t\t\t\tattribute = decoder.GetAttributeByUniqueId( dracoGeometry, attributeID );\n\n\t\t\t} else {\n\n\t\t\t\tattributeID = decoder.GetAttributeId( dracoGeometry, draco[ attributeIDs[ attributeName ] ] );\n\n\t\t\t\tif ( attributeID === - 1 ) continue;\n\n\t\t\t\tattribute = decoder.GetAttribute( dracoGeometry, attributeID );\n\n\t\t\t}\n\n\t\t\tgeometry.attributes.push( decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) );\n\n\t\t}\n\n\t\t// Add index.\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\t// Generate mesh faces.\n\t\t\tvar numFaces = dracoGeometry.num_faces();\n\t\t\tvar numIndices = numFaces * 3;\n\t\t\tvar index = new Uint32Array( numIndices );\n\t\t\tvar indexArray = new draco.DracoInt32Array();\n\n\t\t\tfor ( var i = 0; i < numFaces; ++ i ) {\n\n\t\t\t\tdecoder.GetFaceFromMesh( dracoGeometry, i, indexArray );\n\n\t\t\t\tfor ( var j = 0; j < 3; ++ j ) {\n\n\t\t\t\t\tindex[ i * 3 + j ] = indexArray.GetValue( j );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry.index = { array: index, itemSize: 1 };\n\n\t\t\tdraco.destroy( indexArray );\n\n\t\t}\n\n\t\tdraco.destroy( dracoGeometry );\n\n\t\treturn geometry;\n\n\t}\n\n\tfunction decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) {\n\n\t\tvar numComponents = attribute.num_components();\n\t\tvar numPoints = dracoGeometry.num_points();\n\t\tvar numValues = numPoints * numComponents;\n\t\tvar dracoArray;\n\n\t\tvar array;\n\n\t\tswitch ( attributeType ) {\n\n\t\t\tcase Float32Array:\n\t\t\t\tdracoArray = new draco.DracoFloat32Array();\n\t\t\t\tdecoder.GetAttributeFloatForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Float32Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Int8Array:\n\t\t\t\tdracoArray = new draco.DracoInt8Array();\n\t\t\t\tdecoder.GetAttributeInt8ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Int8Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Int16Array:\n\t\t\t\tdracoArray = new draco.DracoInt16Array();\n\t\t\t\tdecoder.GetAttributeInt16ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Int16Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Int32Array:\n\t\t\t\tdracoArray = new draco.DracoInt32Array();\n\t\t\t\tdecoder.GetAttributeInt32ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Int32Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Uint8Array:\n\t\t\t\tdracoArray = new draco.DracoUInt8Array();\n\t\t\t\tdecoder.GetAttributeUInt8ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Uint8Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Uint16Array:\n\t\t\t\tdracoArray = new draco.DracoUInt16Array();\n\t\t\t\tdecoder.GetAttributeUInt16ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Uint16Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Uint32Array:\n\t\t\t\tdracoArray = new draco.DracoUInt32Array();\n\t\t\t\tdecoder.GetAttributeUInt32ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Uint32Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'THREE.DRACOLoader: Unexpected attribute type.' );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < numValues; i ++ ) {\n\n\t\t\tarray[ i ] = dracoArray.GetValue( i );\n\n\t\t}\n\n\t\tdraco.destroy( dracoArray );\n\n\t\treturn {\n\t\t\tname: attributeName,\n\t\t\tarray: array,\n\t\t\titemSize: numComponents\n\t\t};\n\n\t}\n\n};\n\nDRACOLoader.taskCache = new WeakMap();\n\n/** Deprecated static methods */\n\n/** @deprecated */\nDRACOLoader.setDecoderPath = function () {\n\n\tconsole.warn( 'THREE.DRACOLoader: The .setDecoderPath() method has been removed. Use instance methods.' );\n\n};\n\n/** @deprecated */\nDRACOLoader.setDecoderConfig = function () {\n\n\tconsole.warn( 'THREE.DRACOLoader: The .setDecoderConfig() method has been removed. Use instance methods.' );\n\n};\n\n/** @deprecated */\nDRACOLoader.releaseDecoderModule = function () {\n\n\tconsole.warn( 'THREE.DRACOLoader: The .releaseDecoderModule() method has been removed. Use instance methods.' );\n\n};\n\n/** @deprecated */\nDRACOLoader.getDecoderModule = function () {\n\n\tconsole.warn( 'THREE.DRACOLoader: The .getDecoderModule() method has been removed. Use instance methods.' );\n\n};\n\nexport { DRACOLoader };\n"]},"metadata":{},"sourceType":"module"}