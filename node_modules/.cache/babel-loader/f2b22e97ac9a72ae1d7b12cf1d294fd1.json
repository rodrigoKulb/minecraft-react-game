{"ast":null,"code":"var _jsxFileName = \"/home/rodrigo/Dropbox/Projetos/rodrigoKulb/minecraft-react-game/src/components/Cube.js\";\nimport React, { memo } from 'react';\nimport { useBox } from 'use-cannon';\nimport { useState } from 'react';\nimport * as textures from '../textures';\nimport useSound from 'use-sound';\nimport boopSfx from '../audio/pedra.wav';\n\nconst Cube = ({\n  position,\n  texture,\n  addCube,\n  removeCube\n}) => {\n  const [hover, setHover] = useState(null);\n  const [ref] = useBox(() => ({\n    type: 'Static',\n    //type: \"Kinematic\",\n    position\n  }));\n  const [play] = useSound(boopSfx);\n  const color = texture === 'glass' ? 'skyblue' : 'white';\n  return /*#__PURE__*/React.createElement(\"mesh\", {\n    castShadow: true,\n    ref: ref,\n    onPointerMove: e => {\n      e.stopPropagation();\n      setHover(Math.floor(e.faceIndex / 2));\n    },\n    onPointerOut: () => {\n      setHover(null);\n    },\n    onClick: e => {\n      e.stopPropagation();\n      const clickedFace = Math.floor(e.faceIndex / 2);\n      const {\n        x,\n        y,\n        z\n      } = ref.current.position;\n      play();\n\n      if (clickedFace === 0) {\n        e.altKey ? removeCube(x, y, z) : addCube(x + 1, y, z);\n        return;\n      }\n\n      if (clickedFace === 1) {\n        e.altKey ? removeCube(x, y, z) : addCube(x - 1, y, z);\n        return;\n      }\n\n      if (clickedFace === 2) {\n        e.altKey ? removeCube(x, y, z) : addCube(x, y + 1, z);\n        return;\n      }\n\n      if (clickedFace === 3) {\n        e.altKey ? removeCube(x, y, z) : addCube(x, y - 1, z);\n        return;\n      }\n\n      if (clickedFace === 4) {\n        e.altKey ? removeCube(x, y, z) : addCube(x, y, z + 1);\n        return;\n      }\n\n      if (clickedFace === 5) {\n        e.altKey ? removeCube(x, y, z) : addCube(x, y, z - 1);\n        return;\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"boxBufferGeometry\", {\n    attach: \"geometry\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(\"meshStandardMaterial\", {\n    attach: \"material\",\n    map: textures[texture],\n    color: hover ? 'gray' : 'green',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 10\n    }\n  }));\n}; // function equalProps(prevProps, nextProps) {\n//   const equalPosition =\n//     prevProps.position.x === nextProps.position.x &&\n//     prevProps.position.y === nextProps.position.y &&\n//     prevProps.position.z === nextProps.position.z;\n//   return equalPosition && prevProps.texture === nextProps.texture;\n// }\n//export default memo(Cube, equalProps);\n\n\nexport default memo(Cube);","map":{"version":3,"sources":["/home/rodrigo/Dropbox/Projetos/rodrigoKulb/minecraft-react-game/src/components/Cube.js"],"names":["React","memo","useBox","useState","textures","useSound","boopSfx","Cube","position","texture","addCube","removeCube","hover","setHover","ref","type","play","color","e","stopPropagation","Math","floor","faceIndex","clickedFace","x","y","z","current","altKey"],"mappings":"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","sourcesContent":["import React, { memo } from 'react';\nimport { useBox } from 'use-cannon';\nimport { useState } from 'react';\nimport * as textures from '../textures';\nimport useSound from 'use-sound';\n\nimport boopSfx from '../audio/pedra.wav';\n\nconst Cube = ({ position, texture, addCube, removeCube }) => {\n  const [hover, setHover] = useState(null);\n\n  const [ref] = useBox(() => ({\n    type: 'Static',\n    //type: \"Kinematic\",\n    position,\n  }));\n\n\n\n  const [play] = useSound(boopSfx);\n\n  const color = texture === 'glass' ? 'skyblue' : 'white';\n  return (\n    <mesh\n      castShadow\n      ref={ref}\n      onPointerMove={(e) => {\n        e.stopPropagation();\n        setHover(Math.floor(e.faceIndex / 2));\n      }}\n      onPointerOut={() => {\n        setHover(null);\n      }}\n      onClick={(e) => {\n        e.stopPropagation();\n        const clickedFace = Math.floor(e.faceIndex / 2);\n        const { x, y, z } = ref.current.position;\n        play();\n        if (clickedFace === 0) {\n          e.altKey ? removeCube(x, y, z) : addCube(x + 1, y, z);\n          return;\n        }\n        if (clickedFace === 1) {\n          e.altKey ? removeCube(x, y, z) : addCube(x - 1, y, z);\n          return;\n        }\n        if (clickedFace === 2) {\n          e.altKey ? removeCube(x, y, z) : addCube(x, y + 1, z);\n          return;\n        }\n        if (clickedFace === 3) {\n          e.altKey ? removeCube(x, y, z) : addCube(x, y - 1, z);\n          return;\n        }\n        if (clickedFace === 4) {\n          e.altKey ? removeCube(x, y, z) : addCube(x, y, z + 1);\n          return;\n        }\n        if (clickedFace === 5) {\n          e.altKey ? removeCube(x, y, z) : addCube(x, y, z - 1);\n          return;\n        }\n      }}\n    >\n         <boxBufferGeometry attach=\"geometry\" />\n         <meshStandardMaterial \n         attach=\"material\"  \n         map={textures[texture]} \n         color={hover ? 'gray' : 'green'}\n         />\n         {/* <meshStandardMaterial\n          \n          envMap={textures['dirt']}\n          //color={hover === index ? 'gray' : 'green'}\n          opacity={texture === 'glass' ? 0.7 : 1}\n          //color={'green'}\n          transparent={true}\n        /> */}\n       \n      {/* {[...Array(6)].map((_, index) => (\n        <meshStandardMaterial\n          //attachArray=\"material\"\n          map={textures['dirt']}\n          key={index}\n          color={hover === index ? 'gray' : 'green'}\n          opacity={texture === 'glass' ? 0.7 : 1}\n          //color={'green'}\n          transparent={true}\n        />\n      ))} */}\n      \n      \n    </mesh>\n  );\n};\n\n// function equalProps(prevProps, nextProps) {\n//   const equalPosition =\n//     prevProps.position.x === nextProps.position.x &&\n//     prevProps.position.y === nextProps.position.y &&\n//     prevProps.position.z === nextProps.position.z;\n\n//   return equalPosition && prevProps.texture === nextProps.texture;\n// }\n\n//export default memo(Cube, equalProps);\nexport default memo(Cube);\n"]},"metadata":{},"sourceType":"module"}