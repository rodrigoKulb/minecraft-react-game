{"ast":null,"code":"import { Box3, Float32BufferAttribute, InstancedBufferGeometry, InstancedInterleavedBuffer, InterleavedBufferAttribute, Sphere, Vector3, WireframeGeometry } from \"../../../build/three.module.js\";\n\nvar LineSegmentsGeometry = function () {\n  InstancedBufferGeometry.call(this);\n  this.type = 'LineSegmentsGeometry';\n  var positions = [-1, 2, 0, 1, 2, 0, -1, 1, 0, 1, 1, 0, -1, 0, 0, 1, 0, 0, -1, -1, 0, 1, -1, 0];\n  var uvs = [-1, 2, 1, 2, -1, 1, 1, 1, -1, -1, 1, -1, -1, -2, 1, -2];\n  var index = [0, 2, 1, 2, 3, 1, 2, 4, 3, 4, 5, 3, 4, 6, 5, 6, 7, 5];\n  this.setIndex(index);\n  this.setAttribute('position', new Float32BufferAttribute(positions, 3));\n  this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n};\n\nLineSegmentsGeometry.prototype = Object.assign(Object.create(InstancedBufferGeometry.prototype), {\n  constructor: LineSegmentsGeometry,\n  isLineSegmentsGeometry: true,\n  applyMatrix4: function (matrix) {\n    var start = this.attributes.instanceStart;\n    var end = this.attributes.instanceEnd;\n\n    if (start !== undefined) {\n      start.applyMatrix4(matrix);\n      end.applyMatrix4(matrix);\n      start.needsUpdate = true;\n    }\n\n    if (this.boundingBox !== null) {\n      this.computeBoundingBox();\n    }\n\n    if (this.boundingSphere !== null) {\n      this.computeBoundingSphere();\n    }\n\n    return this;\n  },\n  setPositions: function (array) {\n    var lineSegments;\n\n    if (array instanceof Float32Array) {\n      lineSegments = array;\n    } else if (Array.isArray(array)) {\n      lineSegments = new Float32Array(array);\n    }\n\n    var instanceBuffer = new InstancedInterleavedBuffer(lineSegments, 6, 1); // xyz, xyz\n\n    this.setAttribute('instanceStart', new InterleavedBufferAttribute(instanceBuffer, 3, 0)); // xyz\n\n    this.setAttribute('instanceEnd', new InterleavedBufferAttribute(instanceBuffer, 3, 3)); // xyz\n    //\n\n    this.computeBoundingBox();\n    this.computeBoundingSphere();\n    return this;\n  },\n  setColors: function (array) {\n    var colors;\n\n    if (array instanceof Float32Array) {\n      colors = array;\n    } else if (Array.isArray(array)) {\n      colors = new Float32Array(array);\n    }\n\n    var instanceColorBuffer = new InstancedInterleavedBuffer(colors, 6, 1); // rgb, rgb\n\n    this.setAttribute('instanceColorStart', new InterleavedBufferAttribute(instanceColorBuffer, 3, 0)); // rgb\n\n    this.setAttribute('instanceColorEnd', new InterleavedBufferAttribute(instanceColorBuffer, 3, 3)); // rgb\n\n    return this;\n  },\n  fromWireframeGeometry: function (geometry) {\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  },\n  fromEdgesGeometry: function (geometry) {\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  },\n  fromMesh: function (mesh) {\n    this.fromWireframeGeometry(new WireframeGeometry(mesh.geometry)); // set colors, maybe\n\n    return this;\n  },\n  fromLineSegments: function (lineSegments) {\n    var geometry = lineSegments.geometry;\n\n    if (geometry.isGeometry) {\n      this.setPositions(geometry.vertices);\n    } else if (geometry.isBufferGeometry) {\n      this.setPositions(geometry.attributes.position.array); // assumes non-indexed\n    } // set colors, maybe\n\n\n    return this;\n  },\n  computeBoundingBox: function () {\n    var box = new Box3();\n    return function computeBoundingBox() {\n      if (this.boundingBox === null) {\n        this.boundingBox = new Box3();\n      }\n\n      var start = this.attributes.instanceStart;\n      var end = this.attributes.instanceEnd;\n\n      if (start !== undefined && end !== undefined) {\n        this.boundingBox.setFromBufferAttribute(start);\n        box.setFromBufferAttribute(end);\n        this.boundingBox.union(box);\n      }\n    };\n  }(),\n  computeBoundingSphere: function () {\n    var vector = new Vector3();\n    return function computeBoundingSphere() {\n      if (this.boundingSphere === null) {\n        this.boundingSphere = new Sphere();\n      }\n\n      if (this.boundingBox === null) {\n        this.computeBoundingBox();\n      }\n\n      var start = this.attributes.instanceStart;\n      var end = this.attributes.instanceEnd;\n\n      if (start !== undefined && end !== undefined) {\n        var center = this.boundingSphere.center;\n        this.boundingBox.getCenter(center);\n        var maxRadiusSq = 0;\n\n        for (var i = 0, il = start.count; i < il; i++) {\n          vector.fromBufferAttribute(start, i);\n          maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(vector));\n          vector.fromBufferAttribute(end, i);\n          maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(vector));\n        }\n\n        this.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n\n        if (isNaN(this.boundingSphere.radius)) {\n          console.error('THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.', this);\n        }\n      }\n    };\n  }(),\n  toJSON: function () {// todo\n  },\n  applyMatrix: function (matrix) {\n    console.warn('THREE.LineSegmentsGeometry: applyMatrix() has been renamed to applyMatrix4().');\n    return this.applyMatrix4(matrix);\n  }\n});\nexport { LineSegmentsGeometry };","map":{"version":3,"sources":["/home/rodrigo/Dropbox/Projetos/rodrigoKulb/minecraft-react-game/node_modules/three/examples/jsm/lines/LineSegmentsGeometry.js"],"names":["Box3","Float32BufferAttribute","InstancedBufferGeometry","InstancedInterleavedBuffer","InterleavedBufferAttribute","Sphere","Vector3","WireframeGeometry","LineSegmentsGeometry","call","type","positions","uvs","index","setIndex","setAttribute","prototype","Object","assign","create","constructor","isLineSegmentsGeometry","applyMatrix4","matrix","start","attributes","instanceStart","end","instanceEnd","undefined","needsUpdate","boundingBox","computeBoundingBox","boundingSphere","computeBoundingSphere","setPositions","array","lineSegments","Float32Array","Array","isArray","instanceBuffer","setColors","colors","instanceColorBuffer","fromWireframeGeometry","geometry","position","fromEdgesGeometry","fromMesh","mesh","fromLineSegments","isGeometry","vertices","isBufferGeometry","box","setFromBufferAttribute","union","vector","center","getCenter","maxRadiusSq","i","il","count","fromBufferAttribute","Math","max","distanceToSquared","radius","sqrt","isNaN","console","error","toJSON","applyMatrix","warn"],"mappings":"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","sourcesContent":["import {\n\tBox3,\n\tFloat32BufferAttribute,\n\tInstancedBufferGeometry,\n\tInstancedInterleavedBuffer,\n\tInterleavedBufferAttribute,\n\tSphere,\n\tVector3,\n\tWireframeGeometry\n} from \"../../../build/three.module.js\";\n\nvar LineSegmentsGeometry = function () {\n\n\tInstancedBufferGeometry.call( this );\n\n\tthis.type = 'LineSegmentsGeometry';\n\n\tvar positions = [ - 1, 2, 0, 1, 2, 0, - 1, 1, 0, 1, 1, 0, - 1, 0, 0, 1, 0, 0, - 1, - 1, 0, 1, - 1, 0 ];\n\tvar uvs = [ - 1, 2, 1, 2, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 2, 1, - 2 ];\n\tvar index = [ 0, 2, 1, 2, 3, 1, 2, 4, 3, 4, 5, 3, 4, 6, 5, 6, 7, 5 ];\n\n\tthis.setIndex( index );\n\tthis.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n};\n\nLineSegmentsGeometry.prototype = Object.assign( Object.create( InstancedBufferGeometry.prototype ), {\n\n\tconstructor: LineSegmentsGeometry,\n\n\tisLineSegmentsGeometry: true,\n\n\tapplyMatrix4: function ( matrix ) {\n\n\t\tvar start = this.attributes.instanceStart;\n\t\tvar end = this.attributes.instanceEnd;\n\n\t\tif ( start !== undefined ) {\n\n\t\t\tstart.applyMatrix4( matrix );\n\n\t\t\tend.applyMatrix4( matrix );\n\n\t\t\tstart.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetPositions: function ( array ) {\n\n\t\tvar lineSegments;\n\n\t\tif ( array instanceof Float32Array ) {\n\n\t\t\tlineSegments = array;\n\n\t\t} else if ( Array.isArray( array ) ) {\n\n\t\t\tlineSegments = new Float32Array( array );\n\n\t\t}\n\n\t\tvar instanceBuffer = new InstancedInterleavedBuffer( lineSegments, 6, 1 ); // xyz, xyz\n\n\t\tthis.setAttribute( 'instanceStart', new InterleavedBufferAttribute( instanceBuffer, 3, 0 ) ); // xyz\n\t\tthis.setAttribute( 'instanceEnd', new InterleavedBufferAttribute( instanceBuffer, 3, 3 ) ); // xyz\n\n\t\t//\n\n\t\tthis.computeBoundingBox();\n\t\tthis.computeBoundingSphere();\n\n\t\treturn this;\n\n\t},\n\n\tsetColors: function ( array ) {\n\n\t\tvar colors;\n\n\t\tif ( array instanceof Float32Array ) {\n\n\t\t\tcolors = array;\n\n\t\t} else if ( Array.isArray( array ) ) {\n\n\t\t\tcolors = new Float32Array( array );\n\n\t\t}\n\n\t\tvar instanceColorBuffer = new InstancedInterleavedBuffer( colors, 6, 1 ); // rgb, rgb\n\n\t\tthis.setAttribute( 'instanceColorStart', new InterleavedBufferAttribute( instanceColorBuffer, 3, 0 ) ); // rgb\n\t\tthis.setAttribute( 'instanceColorEnd', new InterleavedBufferAttribute( instanceColorBuffer, 3, 3 ) ); // rgb\n\n\t\treturn this;\n\n\t},\n\n\tfromWireframeGeometry: function ( geometry ) {\n\n\t\tthis.setPositions( geometry.attributes.position.array );\n\n\t\treturn this;\n\n\t},\n\n\tfromEdgesGeometry: function ( geometry ) {\n\n\t\tthis.setPositions( geometry.attributes.position.array );\n\n\t\treturn this;\n\n\t},\n\n\tfromMesh: function ( mesh ) {\n\n\t\tthis.fromWireframeGeometry( new WireframeGeometry( mesh.geometry ) );\n\n\t\t// set colors, maybe\n\n\t\treturn this;\n\n\t},\n\n\tfromLineSegments: function ( lineSegments ) {\n\n\t\tvar geometry = lineSegments.geometry;\n\n\t\tif ( geometry.isGeometry ) {\n\n\t\t\tthis.setPositions( geometry.vertices );\n\n\t\t} else if ( geometry.isBufferGeometry ) {\n\n\t\t\tthis.setPositions( geometry.attributes.position.array ); // assumes non-indexed\n\n\t\t}\n\n\t\t// set colors, maybe\n\n\t\treturn this;\n\n\t},\n\n\tcomputeBoundingBox: function () {\n\n\t\tvar box = new Box3();\n\n\t\treturn function computeBoundingBox() {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new Box3();\n\n\t\t\t}\n\n\t\t\tvar start = this.attributes.instanceStart;\n\t\t\tvar end = this.attributes.instanceEnd;\n\n\t\t\tif ( start !== undefined && end !== undefined ) {\n\n\t\t\t\tthis.boundingBox.setFromBufferAttribute( start );\n\n\t\t\t\tbox.setFromBufferAttribute( end );\n\n\t\t\t\tthis.boundingBox.union( box );\n\n\t\t\t}\n\n\t\t};\n\n\t}(),\n\n\tcomputeBoundingSphere: function () {\n\n\t\tvar vector = new Vector3();\n\n\t\treturn function computeBoundingSphere() {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tvar start = this.attributes.instanceStart;\n\t\t\tvar end = this.attributes.instanceEnd;\n\n\t\t\tif ( start !== undefined && end !== undefined ) {\n\n\t\t\t\tvar center = this.boundingSphere.center;\n\n\t\t\t\tthis.boundingBox.getCenter( center );\n\n\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\tfor ( var i = 0, il = start.count; i < il; i ++ ) {\n\n\t\t\t\t\tvector.fromBufferAttribute( start, i );\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\n\n\t\t\t\t\tvector.fromBufferAttribute( end, i );\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.', this );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}(),\n\n\ttoJSON: function () {\n\n\t\t// todo\n\n\t},\n\n\tapplyMatrix: function ( matrix ) {\n\n\t\tconsole.warn( 'THREE.LineSegmentsGeometry: applyMatrix() has been renamed to applyMatrix4().' );\n\n\t\treturn this.applyMatrix4( matrix );\n\n\t}\n\n} );\n\nexport { LineSegmentsGeometry };\n"]},"metadata":{},"sourceType":"module"}