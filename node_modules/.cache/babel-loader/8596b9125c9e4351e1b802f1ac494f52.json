{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { useStore } from './useStore';\nimport useSound from 'use-sound';\nimport andar from '../audio/andar.wav';\nconst [play] = useSound(andar);\nlet playWalk = false;\n\nfunction actionByKey(key) {\n  const keys = {\n    KeyW: 'moveForward',\n    KeyS: 'moveBackward',\n    KeyA: 'moveLeft',\n    KeyD: 'moveRight',\n    Space: 'jump'\n  };\n  return keys[key];\n}\n\nfunction textureByKey(key) {\n  const keys = {\n    Digit1: 'dirt',\n    Digit2: 'grass',\n    Digit3: 'glass',\n    Digit4: 'wood',\n    Digit5: 'log',\n    Digit6: 'dirtgrass'\n  };\n  return keys[key];\n}\n\nexport const useKeyboardControls = () => {\n  const [movement, setMovement] = useState({\n    moveForward: false,\n    moveBackward: false,\n    moveLeft: false,\n    moveRight: false,\n    jump: false\n  });\n  const [setTexture] = useStore(state => [state.setTexture]);\n  useEffect(() => {\n    const handleKeyDown = e => {\n      // Movement key\n      if (actionByKey(e.code)) {\n        setMovement(state => ({ ...state,\n          [actionByKey(e.code)]: true\n        }));\n\n        if (!playWalk) {\n          playWalk = 1;\n          play();\n        }\n\n        console.log(playWalk);\n      } // Change texture key\n\n\n      if (textureByKey(e.code)) {\n        setTexture(textureByKey(e.code));\n      }\n    };\n\n    const handleKeyUp = e => {\n      if (actionByKey(e.code)) {\n        setMovement(state => ({ ...state,\n          [actionByKey(e.code)]: false\n        }));\n      }\n\n      if (playWalk) {\n        stop();\n        playWalk = false;\n      }\n\n      console.log(playWalk);\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    document.addEventListener('keyup', handleKeyUp);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n      document.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [setTexture]);\n  return movement;\n};","map":{"version":3,"sources":["/home/rodrigo/Dropbox/Projetos/rodrigoKulb/minecraft-react/src/hooks/useKeyboardControls.js"],"names":["useState","useEffect","useStore","useSound","andar","play","playWalk","actionByKey","key","keys","KeyW","KeyS","KeyA","KeyD","Space","textureByKey","Digit1","Digit2","Digit3","Digit4","Digit5","Digit6","useKeyboardControls","movement","setMovement","moveForward","moveBackward","moveLeft","moveRight","jump","setTexture","state","handleKeyDown","e","code","console","log","handleKeyUp","stop","document","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport { useStore } from './useStore';\nimport useSound from 'use-sound';\n\nimport andar from '../audio/andar.wav';\nconst [play] = useSound(andar);\n\nlet playWalk = false;\n\nfunction actionByKey(key) {\n  const keys = {\n    KeyW: 'moveForward',\n    KeyS: 'moveBackward',\n    KeyA: 'moveLeft',\n    KeyD: 'moveRight',\n    Space: 'jump',\n  };\n  return keys[key];\n}\n\nfunction textureByKey(key) {\n  const keys = {\n    Digit1: 'dirt',\n    Digit2: 'grass',\n    Digit3: 'glass',\n    Digit4: 'wood',\n    Digit5: 'log',\n    Digit6: 'dirtgrass',\n  };\n  return keys[key];\n}\nexport const useKeyboardControls = () => {\n  const [movement, setMovement] = useState({\n    moveForward: false,\n    moveBackward: false,\n    moveLeft: false,\n    moveRight: false,\n    jump: false,\n  });\n  const [setTexture] = useStore((state) => [state.setTexture]);\n\n  useEffect(() => {\n    \n    const handleKeyDown = (e) => {\n      // Movement key\n      if (actionByKey(e.code)) {\n        setMovement((state) => ({\n          ...state,\n          [actionByKey(e.code)]: true,\n        }));\n        \n        if(!(playWalk))\n        {\n          playWalk = 1;\n          play();\n        }\n        console.log(playWalk);\n      }\n      // Change texture key\n      if (textureByKey(e.code)) {\n        setTexture(textureByKey(e.code));\n      }\n    };\n    const handleKeyUp = (e) => {\n      if (actionByKey(e.code)) {\n        setMovement((state) => ({\n          ...state,\n          [actionByKey(e.code)]: false,\n        }));\n      }\n      if(playWalk)\n      {\n        stop();\n        playWalk = false;\n      }\n      console.log(playWalk);\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    document.addEventListener('keyup', handleKeyUp);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n      document.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [setTexture]);\n\n  return movement;\n};\n"]},"metadata":{},"sourceType":"module"}