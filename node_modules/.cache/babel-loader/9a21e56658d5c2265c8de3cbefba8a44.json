{"ast":null,"code":"var _jsxFileName = \"/home/rodrigo/Dropbox/Projetos/rodrigoKulb/minecraft-react/src/components/Ground.js\";\nimport React from 'react';\nimport { usePlane } from 'use-cannon';\nimport { TextureLoader, RepeatWrapping } from 'three';\nimport grass from '../images/grass.jpg';\nimport { useStore } from '../hooks/useStore';\nimport useSound from 'use-sound';\nexport const Ground = props => {\n  const [ref] = usePlane(() => ({\n    rotation: [-Math.PI / 2, 0, 0],\n    ...props\n  }));\n  const texture = new TextureLoader().load(grass);\n  const [addCube, activeTexture] = useStore(state => [state.addCube, state.texture]);\n  texture.wrapS = RepeatWrapping;\n  texture.wrapT = RepeatWrapping;\n  texture.repeat.set(100, 100);\n  return /*#__PURE__*/React.createElement(\"mesh\", {\n    ref: ref,\n    receiveShadow: true,\n    onClick: e => {\n      e.stopPropagation();\n      const [x, y, z] = Object.values(e.point).map(coord => Math.ceil(coord));\n      play();\n      addCube(x, y, z, activeTexture);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"planeBufferGeometry\", {\n    attach: \"geometry\",\n    args: [100, 100],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"meshStandardMaterial\", {\n    map: texture,\n    attach: \"material\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }));\n};","map":{"version":3,"sources":["/home/rodrigo/Dropbox/Projetos/rodrigoKulb/minecraft-react/src/components/Ground.js"],"names":["React","usePlane","TextureLoader","RepeatWrapping","grass","useStore","useSound","Ground","props","ref","rotation","Math","PI","texture","load","addCube","activeTexture","state","wrapS","wrapT","repeat","set","e","stopPropagation","x","y","z","Object","values","point","map","coord","ceil","play"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,aAAT,EAAwBC,cAAxB,QAA8C,OAA9C;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA,OAAO,MAAMC,MAAM,GAAIC,KAAD,IAAW;AAC/B,QAAM,CAACC,GAAD,IAAQR,QAAQ,CAAC,OAAO;AAAES,IAAAA,QAAQ,EAAE,CAAC,CAACC,IAAI,CAACC,EAAN,GAAW,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAZ;AAAkC,OAAGJ;AAArC,GAAP,CAAD,CAAtB;AACA,QAAMK,OAAO,GAAG,IAAIX,aAAJ,GAAoBY,IAApB,CAAyBV,KAAzB,CAAhB;AACA,QAAM,CAACW,OAAD,EAAUC,aAAV,IAA2BX,QAAQ,CAAEY,KAAD,IAAW,CACnDA,KAAK,CAACF,OAD6C,EAEnDE,KAAK,CAACJ,OAF6C,CAAZ,CAAzC;AAIAA,EAAAA,OAAO,CAACK,KAAR,GAAgBf,cAAhB;AACAU,EAAAA,OAAO,CAACM,KAAR,GAAgBhB,cAAhB;AACAU,EAAAA,OAAO,CAACO,MAAR,CAAeC,GAAf,CAAmB,GAAnB,EAAwB,GAAxB;AACA,sBACE;AACE,IAAA,GAAG,EAAEZ,GADP;AAEE,IAAA,aAAa,MAFf;AAGE,IAAA,OAAO,EAAGa,CAAD,IAAO;AACdA,MAAAA,CAAC,CAACC,eAAF;AACA,YAAM,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,IAAYC,MAAM,CAACC,MAAP,CAAcN,CAAC,CAACO,KAAhB,EAAuBC,GAAvB,CAA4BC,KAAD,IAC3CpB,IAAI,CAACqB,IAAL,CAAUD,KAAV,CADgB,CAAlB;AAGAE,MAAAA,IAAI;AACJlB,MAAAA,OAAO,CAACS,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUV,aAAV,CAAP;AACD,KAVH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAYE;AAAqB,IAAA,MAAM,EAAC,UAA5B;AAAuC,IAAA,IAAI,EAAE,CAAC,GAAD,EAAM,GAAN,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,eAaE;AAAsB,IAAA,GAAG,EAAEH,OAA3B;AAAoC,IAAA,MAAM,EAAC,UAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,CADF;AAiBD,CA3BM","sourcesContent":["import React from 'react';\nimport { usePlane } from 'use-cannon';\nimport { TextureLoader, RepeatWrapping } from 'three';\nimport grass from '../images/grass.jpg';\nimport { useStore } from '../hooks/useStore';\nimport useSound from 'use-sound';\n\nexport const Ground = (props) => {\n  const [ref] = usePlane(() => ({ rotation: [-Math.PI / 2, 0, 0], ...props }));\n  const texture = new TextureLoader().load(grass);\n  const [addCube, activeTexture] = useStore((state) => [\n    state.addCube,\n    state.texture,\n  ]);\n  texture.wrapS = RepeatWrapping;\n  texture.wrapT = RepeatWrapping;\n  texture.repeat.set(100, 100);\n  return (\n    <mesh\n      ref={ref}\n      receiveShadow\n      onClick={(e) => {\n        e.stopPropagation();\n        const [x, y, z] = Object.values(e.point).map((coord) =>\n          Math.ceil(coord),\n        );\n        play();\n        addCube(x, y, z, activeTexture);\n      }}\n    >\n      <planeBufferGeometry attach=\"geometry\" args={[100, 100]} />\n      <meshStandardMaterial map={texture} attach=\"material\" />\n    </mesh>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}