{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { useStore } from './useStore';\n\nfunction actionByKey(key) {\n  const keys = {\n    KeyW: 'moveForward',\n    KeyS: 'moveBackward',\n    KeyA: 'moveLeft',\n    KeyD: 'moveRight',\n    Space: 'jump'\n  };\n  return keys[key];\n}\n\nfunction textureByKey(key) {\n  const keys = {\n    Digit1: 'dirt',\n    Digit2: 'grass',\n    Digit3: 'glass',\n    Digit4: 'wood',\n    Digit5: 'log',\n    Digit6: 'dirtgrass'\n  };\n  return keys[key];\n}\n\nexport const useKeyboardControls = () => {\n  const [movement, setMovement] = useState({\n    moveForward: false,\n    moveBackward: false,\n    moveLeft: false,\n    moveRight: false,\n    jump: false\n  });\n  const [setTexture] = useStore(state => [state.setTexture]);\n  const [audio] = useState(new Audio('audio/andar.wav'));\n  const [playing, setPlaying] = useState(false);\n  useEffect(() => {\n    const handleKeyDown = e => {\n      console.log('true');\n      playing ? audio.play() : audio.pause(); // Movement key\n\n      if (actionByKey(e.code)) {\n        setMovement(state => ({ ...state,\n          [actionByKey(e.code)]: true\n        }));\n      } // Change texture key\n\n\n      if (textureByKey(e.code)) {\n        setTexture(textureByKey(e.code));\n      }\n    };\n\n    const handleKeyUp = e => {\n      if (actionByKey(e.code)) {\n        setMovement(state => ({ ...state,\n          [actionByKey(e.code)]: false\n        }));\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    document.addEventListener('keyup', handleKeyUp);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n      document.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [setTexture]);\n  return movement;\n};","map":{"version":3,"sources":["/home/rodrigo/Dropbox/Projetos/rodrigoKulb/minecraft-react/src/hooks/useKeyboardControls.js"],"names":["useState","useEffect","useStore","actionByKey","key","keys","KeyW","KeyS","KeyA","KeyD","Space","textureByKey","Digit1","Digit2","Digit3","Digit4","Digit5","Digit6","useKeyboardControls","movement","setMovement","moveForward","moveBackward","moveLeft","moveRight","jump","setTexture","state","audio","Audio","playing","setPlaying","handleKeyDown","e","console","log","play","pause","code","handleKeyUp","document","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport { useStore } from './useStore';\n\n\n\n\nfunction actionByKey(key) {\n  const keys = {\n    KeyW: 'moveForward',\n    KeyS: 'moveBackward',\n    KeyA: 'moveLeft',\n    KeyD: 'moveRight',\n    Space: 'jump',\n  };\n  return keys[key];\n}\n\n\n\n\nfunction textureByKey(key) {\n  const keys = {\n    Digit1: 'dirt',\n    Digit2: 'grass',\n    Digit3: 'glass',\n    Digit4: 'wood',\n    Digit5: 'log',\n    Digit6: 'dirtgrass',\n  };\n  return keys[key];\n}\nexport const useKeyboardControls = () => {\n  const [movement, setMovement] = useState({\n    moveForward: false,\n    moveBackward: false,\n    moveLeft: false,\n    moveRight: false,\n    jump: false,\n  });\n  const [setTexture] = useStore((state) => [state.setTexture]);\n\n \n const [audio] = useState(new Audio('audio/andar.wav'));\n const [playing, setPlaying] = useState(false);\n\n  useEffect(() => {\n \n    const handleKeyDown = (e) => {\n      console.log('true');\n      playing ? audio.play() : audio.pause();\n      // Movement key\n      if (actionByKey(e.code)) {\n        setMovement((state) => ({\n          ...state,\n          [actionByKey(e.code)]: true,\n        }));\n      }\n      // Change texture key\n      if (textureByKey(e.code)) {\n        setTexture(textureByKey(e.code));\n      }\n    };\n    const handleKeyUp = (e) => {\n      \n      if (actionByKey(e.code)) {\n        setMovement((state) => ({\n          ...state,\n          [actionByKey(e.code)]: false,\n        }));\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    document.addEventListener('keyup', handleKeyUp);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n      document.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [setTexture]);\n\n  return movement;\n};\n\n\n"]},"metadata":{},"sourceType":"module"}