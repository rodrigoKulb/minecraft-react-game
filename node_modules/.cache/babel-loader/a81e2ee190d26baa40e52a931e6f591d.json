{"ast":null,"code":"import { useEffect, useRef, useState } from 'react';\nexport var useOnce = function (effect) {\n  return useEffect(effect, []);\n};\n/** Return a function that re-renders this component, if still mounted */\n\nexport var useForceUpdate = function () {\n  var update = useState(0)[1];\n  var unmounted = useRef(false);\n  useOnce(function () {\n    return function () {\n      unmounted.current = true;\n    };\n  });\n  return function () {\n    if (!unmounted.current) {\n      update({});\n    }\n  };\n};\n/** Use a value from the previous render */\n\nexport function usePrev(value) {\n  var prevRef = useRef(undefined);\n  useEffect(function () {\n    prevRef.current = value;\n  });\n  return prevRef.current;\n}","map":{"version":3,"sources":["../../src/hooks.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,EAAoB,MAApB,EAA4B,QAA5B,QAA4C,OAA5C;AAKA,OAAO,IAAM,OAAO,GAAY,UAAA,MAAA,EAAM;AAAI,SAAA,SAAS,CAAC,MAAD,EAAT,EAAS,CAAT;AAAqB,CAAxD;AAEP;;AACA,OAAO,IAAM,cAAc,GAAG,YAAA;AAC5B,MAAM,MAAM,GAAG,QAAQ,CAAM,CAAN,CAAR,CAAiB,CAAjB,CAAf;AACA,MAAM,SAAS,GAAG,MAAM,CAAC,KAAD,CAAxB;AACA,EAAA,OAAO,CAAC,YAAA;AAAM,WAAA,YAAA;AACZ,MAAA,SAAS,CAAC,OAAV,GAAoB,IAApB;AADY,KAAA;AAEb,GAFM,CAAP;AAGA,SAAO,YAAA;AACL,QAAI,CAAC,SAAS,CAAC,OAAf,EAAwB;AACtB,MAAA,MAAM,CAAC,EAAD,CAAN;AACD;AACF,GAJD;AAKD,CAXM;AAaP;;AACA,OAAM,SAAU,OAAV,CAAqB,KAArB,EAA6B;AACjC,MAAM,OAAO,GAAG,MAAM,CAAM,SAAN,CAAtB;AACA,EAAA,SAAS,CAAC,YAAA;AACR,IAAA,OAAO,CAAC,OAAR,GAAkB,KAAlB;AACD,GAFQ,CAAT;AAGA,SAAO,OAAO,CAAC,OAAf;AACD","sourcesContent":["import { useEffect, useRef, useState } from 'react'\n\n// Explicit type annotation fixes TS2742 error.\ntype UseOnce = (effect: React.EffectCallback) => void\n\nexport const useOnce: UseOnce = effect => useEffect(effect, [])\n\n/** Return a function that re-renders this component, if still mounted */\nexport const useForceUpdate = () => {\n  const update = useState<any>(0)[1]\n  const unmounted = useRef(false)\n  useOnce(() => () => {\n    unmounted.current = true\n  })\n  return () => {\n    if (!unmounted.current) {\n      update({})\n    }\n  }\n}\n\n/** Use a value from the previous render */\nexport function usePrev<T>(value: T): T | undefined {\n  const prevRef = useRef<any>(undefined)\n  useEffect(() => {\n    prevRef.current = value\n  })\n  return prevRef.current\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}