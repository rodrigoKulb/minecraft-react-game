{"ast":null,"code":"import { InstancedInterleavedBuffer, InterleavedBufferAttribute, Line3, MathUtils, Matrix4, Mesh, Vector3, Vector4 } from \"../../../build/three.module.js\";\nimport { LineSegmentsGeometry } from \"../lines/LineSegmentsGeometry.js\";\nimport { LineMaterial } from \"../lines/LineMaterial.js\";\n\nvar LineSegments2 = function (geometry, material) {\n  Mesh.call(this);\n  this.type = 'LineSegments2';\n  this.geometry = geometry !== undefined ? geometry : new LineSegmentsGeometry();\n  this.material = material !== undefined ? material : new LineMaterial({\n    color: Math.random() * 0xffffff\n  });\n};\n\nLineSegments2.prototype = Object.assign(Object.create(Mesh.prototype), {\n  constructor: LineSegments2,\n  isLineSegments2: true,\n  computeLineDistances: function () {\n    // for backwards-compatability, but could be a method of LineSegmentsGeometry...\n    var start = new Vector3();\n    var end = new Vector3();\n    return function computeLineDistances() {\n      var geometry = this.geometry;\n      var instanceStart = geometry.attributes.instanceStart;\n      var instanceEnd = geometry.attributes.instanceEnd;\n      var lineDistances = new Float32Array(2 * instanceStart.data.count);\n\n      for (var i = 0, j = 0, l = instanceStart.data.count; i < l; i++, j += 2) {\n        start.fromBufferAttribute(instanceStart, i);\n        end.fromBufferAttribute(instanceEnd, i);\n        lineDistances[j] = j === 0 ? 0 : lineDistances[j - 1];\n        lineDistances[j + 1] = lineDistances[j] + start.distanceTo(end);\n      }\n\n      var instanceDistanceBuffer = new InstancedInterleavedBuffer(lineDistances, 2, 1); // d0, d1\n\n      geometry.setAttribute('instanceDistanceStart', new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0)); // d0\n\n      geometry.setAttribute('instanceDistanceEnd', new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1)); // d1\n\n      return this;\n    };\n  }(),\n  raycast: function () {\n    var start = new Vector4();\n    var end = new Vector4();\n    var ssOrigin = new Vector4();\n    var ssOrigin3 = new Vector3();\n    var mvMatrix = new Matrix4();\n    var line = new Line3();\n    var closestPoint = new Vector3();\n    return function raycast(raycaster, intersects) {\n      if (raycaster.camera === null) {\n        console.error('LineSegments2: \"Raycaster.camera\" needs to be set in order to raycast against LineSegments2.');\n      }\n\n      var ray = raycaster.ray;\n      var camera = raycaster.camera;\n      var projectionMatrix = camera.projectionMatrix;\n      var geometry = this.geometry;\n      var material = this.material;\n      var resolution = material.resolution;\n      var lineWidth = material.linewidth;\n      var instanceStart = geometry.attributes.instanceStart;\n      var instanceEnd = geometry.attributes.instanceEnd; // pick a point 1 unit out along the ray to avoid the ray origin\n      // sitting at the camera origin which will cause \"w\" to be 0 when\n      // applying the projection matrix.\n\n      ray.at(1, ssOrigin); // ndc space [ - 1.0, 1.0 ]\n\n      ssOrigin.w = 1;\n      ssOrigin.applyMatrix4(camera.matrixWorldInverse);\n      ssOrigin.applyMatrix4(projectionMatrix);\n      ssOrigin.multiplyScalar(1 / ssOrigin.w); // screen space\n\n      ssOrigin.x *= resolution.x / 2;\n      ssOrigin.y *= resolution.y / 2;\n      ssOrigin.z = 0;\n      ssOrigin3.copy(ssOrigin);\n      var matrixWorld = this.matrixWorld;\n      mvMatrix.multiplyMatrices(camera.matrixWorldInverse, matrixWorld);\n\n      for (var i = 0, l = instanceStart.count; i < l; i++) {\n        start.fromBufferAttribute(instanceStart, i);\n        end.fromBufferAttribute(instanceEnd, i);\n        start.w = 1;\n        end.w = 1; // camera space\n\n        start.applyMatrix4(mvMatrix);\n        end.applyMatrix4(mvMatrix); // clip space\n\n        start.applyMatrix4(projectionMatrix);\n        end.applyMatrix4(projectionMatrix); // ndc space [ - 1.0, 1.0 ]\n\n        start.multiplyScalar(1 / start.w);\n        end.multiplyScalar(1 / end.w); // skip the segment if it's outside the camera near and far planes\n\n        var isBehindCameraNear = start.z < -1 && end.z < -1;\n        var isPastCameraFar = start.z > 1 && end.z > 1;\n\n        if (isBehindCameraNear || isPastCameraFar) {\n          continue;\n        } // screen space\n\n\n        start.x *= resolution.x / 2;\n        start.y *= resolution.y / 2;\n        end.x *= resolution.x / 2;\n        end.y *= resolution.y / 2; // create 2d segment\n\n        line.start.copy(start);\n        line.start.z = 0;\n        line.end.copy(end);\n        line.end.z = 0; // get closest point on ray to segment\n\n        var param = line.closestPointToPointParameter(ssOrigin3, true);\n        line.at(param, closestPoint); // check if the intersection point is within clip space\n\n        var zPos = MathUtils.lerp(start.z, end.z, param);\n        var isInClipSpace = zPos >= -1 && zPos <= 1;\n        var isInside = ssOrigin3.distanceTo(closestPoint) < lineWidth * 0.5;\n\n        if (isInClipSpace && isInside) {\n          line.start.fromBufferAttribute(instanceStart, i);\n          line.end.fromBufferAttribute(instanceEnd, i);\n          line.start.applyMatrix4(matrixWorld);\n          line.end.applyMatrix4(matrixWorld);\n          var pointOnLine = new Vector3();\n          var point = new Vector3();\n          ray.distanceSqToSegment(line.start, line.end, point, pointOnLine);\n          intersects.push({\n            point: point,\n            pointOnLine: pointOnLine,\n            distance: ray.origin.distanceTo(point),\n            object: this,\n            face: null,\n            faceIndex: i,\n            uv: null,\n            uv2: null\n          });\n        }\n      }\n    };\n  }()\n});\nexport { LineSegments2 };","map":{"version":3,"sources":["/home/rodrigo/Dropbox/Projetos/rodrigoKulb/minecraft-react-game/node_modules/three/examples/jsm/lines/LineSegments2.js"],"names":["InstancedInterleavedBuffer","InterleavedBufferAttribute","Line3","MathUtils","Matrix4","Mesh","Vector3","Vector4","LineSegmentsGeometry","LineMaterial","LineSegments2","geometry","material","call","type","undefined","color","Math","random","prototype","Object","assign","create","constructor","isLineSegments2","computeLineDistances","start","end","instanceStart","attributes","instanceEnd","lineDistances","Float32Array","data","count","i","j","l","fromBufferAttribute","distanceTo","instanceDistanceBuffer","setAttribute","raycast","ssOrigin","ssOrigin3","mvMatrix","line","closestPoint","raycaster","intersects","camera","console","error","ray","projectionMatrix","resolution","lineWidth","linewidth","at","w","applyMatrix4","matrixWorldInverse","multiplyScalar","x","y","z","copy","matrixWorld","multiplyMatrices","isBehindCameraNear","isPastCameraFar","param","closestPointToPointParameter","zPos","lerp","isInClipSpace","isInside","pointOnLine","point","distanceSqToSegment","push","distance","origin","object","face","faceIndex","uv","uv2"],"mappings":"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","sourcesContent":["import {\n\tInstancedInterleavedBuffer,\n\tInterleavedBufferAttribute,\n\tLine3,\n\tMathUtils,\n\tMatrix4,\n\tMesh,\n\tVector3,\n\tVector4\n} from \"../../../build/three.module.js\";\nimport { LineSegmentsGeometry } from \"../lines/LineSegmentsGeometry.js\";\nimport { LineMaterial } from \"../lines/LineMaterial.js\";\n\nvar LineSegments2 = function ( geometry, material ) {\n\n\tMesh.call( this );\n\n\tthis.type = 'LineSegments2';\n\n\tthis.geometry = geometry !== undefined ? geometry : new LineSegmentsGeometry();\n\tthis.material = material !== undefined ? material : new LineMaterial( { color: Math.random() * 0xffffff } );\n\n};\n\nLineSegments2.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n\tconstructor: LineSegments2,\n\n\tisLineSegments2: true,\n\n\tcomputeLineDistances: ( function () { // for backwards-compatability, but could be a method of LineSegmentsGeometry...\n\n\t\tvar start = new Vector3();\n\t\tvar end = new Vector3();\n\n\t\treturn function computeLineDistances() {\n\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tvar instanceStart = geometry.attributes.instanceStart;\n\t\t\tvar instanceEnd = geometry.attributes.instanceEnd;\n\t\t\tvar lineDistances = new Float32Array( 2 * instanceStart.data.count );\n\n\t\t\tfor ( var i = 0, j = 0, l = instanceStart.data.count; i < l; i ++, j += 2 ) {\n\n\t\t\t\tstart.fromBufferAttribute( instanceStart, i );\n\t\t\t\tend.fromBufferAttribute( instanceEnd, i );\n\n\t\t\t\tlineDistances[ j ] = ( j === 0 ) ? 0 : lineDistances[ j - 1 ];\n\t\t\t\tlineDistances[ j + 1 ] = lineDistances[ j ] + start.distanceTo( end );\n\n\t\t\t}\n\n\t\t\tvar instanceDistanceBuffer = new InstancedInterleavedBuffer( lineDistances, 2, 1 ); // d0, d1\n\n\t\t\tgeometry.setAttribute( 'instanceDistanceStart', new InterleavedBufferAttribute( instanceDistanceBuffer, 1, 0 ) ); // d0\n\t\t\tgeometry.setAttribute( 'instanceDistanceEnd', new InterleavedBufferAttribute( instanceDistanceBuffer, 1, 1 ) ); // d1\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}() ),\n\n\traycast: ( function () {\n\n\t\tvar start = new Vector4();\n\t\tvar end = new Vector4();\n\n\t\tvar ssOrigin = new Vector4();\n\t\tvar ssOrigin3 = new Vector3();\n\t\tvar mvMatrix = new Matrix4();\n\t\tvar line = new Line3();\n\t\tvar closestPoint = new Vector3();\n\n\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\tif ( raycaster.camera === null ) {\n\n\t\t\t\tconsole.error( 'LineSegments2: \"Raycaster.camera\" needs to be set in order to raycast against LineSegments2.' );\n\n\t\t\t}\n\n\t\t\tvar ray = raycaster.ray;\n\t\t\tvar camera = raycaster.camera;\n\t\t\tvar projectionMatrix = camera.projectionMatrix;\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar material = this.material;\n\t\t\tvar resolution = material.resolution;\n\t\t\tvar lineWidth = material.linewidth;\n\n\t\t\tvar instanceStart = geometry.attributes.instanceStart;\n\t\t\tvar instanceEnd = geometry.attributes.instanceEnd;\n\n\t\t\t// pick a point 1 unit out along the ray to avoid the ray origin\n\t\t\t// sitting at the camera origin which will cause \"w\" to be 0 when\n\t\t\t// applying the projection matrix.\n\t\t\tray.at( 1, ssOrigin );\n\n\t\t\t// ndc space [ - 1.0, 1.0 ]\n\t\t\tssOrigin.w = 1;\n\t\t\tssOrigin.applyMatrix4( camera.matrixWorldInverse );\n\t\t\tssOrigin.applyMatrix4( projectionMatrix );\n\t\t\tssOrigin.multiplyScalar( 1 / ssOrigin.w );\n\n\t\t\t// screen space\n\t\t\tssOrigin.x *= resolution.x / 2;\n\t\t\tssOrigin.y *= resolution.y / 2;\n\t\t\tssOrigin.z = 0;\n\n\t\t\tssOrigin3.copy( ssOrigin );\n\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tmvMatrix.multiplyMatrices( camera.matrixWorldInverse, matrixWorld );\n\n\t\t\tfor ( var i = 0, l = instanceStart.count; i < l; i ++ ) {\n\n\t\t\t\tstart.fromBufferAttribute( instanceStart, i );\n\t\t\t\tend.fromBufferAttribute( instanceEnd, i );\n\n\t\t\t\tstart.w = 1;\n\t\t\t\tend.w = 1;\n\n\t\t\t\t// camera space\n\t\t\t\tstart.applyMatrix4( mvMatrix );\n\t\t\t\tend.applyMatrix4( mvMatrix );\n\n\t\t\t\t// clip space\n\t\t\t\tstart.applyMatrix4( projectionMatrix );\n\t\t\t\tend.applyMatrix4( projectionMatrix );\n\n\t\t\t\t// ndc space [ - 1.0, 1.0 ]\n\t\t\t\tstart.multiplyScalar( 1 / start.w );\n\t\t\t\tend.multiplyScalar( 1 / end.w );\n\n\t\t\t\t// skip the segment if it's outside the camera near and far planes\n\t\t\t\tvar isBehindCameraNear = start.z < - 1 && end.z < - 1;\n\t\t\t\tvar isPastCameraFar = start.z > 1 && end.z > 1;\n\t\t\t\tif ( isBehindCameraNear || isPastCameraFar ) {\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t// screen space\n\t\t\t\tstart.x *= resolution.x / 2;\n\t\t\t\tstart.y *= resolution.y / 2;\n\n\t\t\t\tend.x *= resolution.x / 2;\n\t\t\t\tend.y *= resolution.y / 2;\n\n\t\t\t\t// create 2d segment\n\t\t\t\tline.start.copy( start );\n\t\t\t\tline.start.z = 0;\n\n\t\t\t\tline.end.copy( end );\n\t\t\t\tline.end.z = 0;\n\n\t\t\t\t// get closest point on ray to segment\n\t\t\t\tvar param = line.closestPointToPointParameter( ssOrigin3, true );\n\t\t\t\tline.at( param, closestPoint );\n\n\t\t\t\t// check if the intersection point is within clip space\n\t\t\t\tvar zPos = MathUtils.lerp( start.z, end.z, param );\n\t\t\t\tvar isInClipSpace = zPos >= - 1 && zPos <= 1;\n\n\t\t\t\tvar isInside = ssOrigin3.distanceTo( closestPoint ) < lineWidth * 0.5;\n\n\t\t\t\tif ( isInClipSpace && isInside ) {\n\n\t\t\t\t\tline.start.fromBufferAttribute( instanceStart, i );\n\t\t\t\t\tline.end.fromBufferAttribute( instanceEnd, i );\n\n\t\t\t\t\tline.start.applyMatrix4( matrixWorld );\n\t\t\t\t\tline.end.applyMatrix4( matrixWorld );\n\n\t\t\t\t\tvar pointOnLine = new Vector3();\n\t\t\t\t\tvar point = new Vector3();\n\n\t\t\t\t\tray.distanceSqToSegment( line.start, line.end, point, pointOnLine );\n\n\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\tpoint: point,\n\t\t\t\t\t\tpointOnLine: pointOnLine,\n\t\t\t\t\t\tdistance: ray.origin.distanceTo( point ),\n\n\t\t\t\t\t\tobject: this,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tfaceIndex: i,\n\t\t\t\t\t\tuv: null,\n\t\t\t\t\t\tuv2: null,\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}() )\n\n} );\n\nexport { LineSegments2 };\n"]},"metadata":{},"sourceType":"module"}