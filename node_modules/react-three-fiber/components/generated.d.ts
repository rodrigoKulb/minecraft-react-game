/// <reference types="react" />
export declare const WebGLMultisampleRenderTarget: import("react").FC<import("..").Overwrite<Partial<import("three").WebGLMultisampleRenderTarget>, import("..").ReactThreeFiber.NodeProps<import("three").WebGLMultisampleRenderTarget, typeof import("three").WebGLMultisampleRenderTarget>>>;
export declare const WebGLRenderTarget: import("react").FC<import("..").Overwrite<Partial<import("three").WebGLRenderTarget>, import("..").ReactThreeFiber.NodeProps<import("three").WebGLRenderTarget, typeof import("three").WebGLRenderTarget>>>;
export declare const WebGLRenderer: import("react").FC<import("..").Overwrite<Partial<import("three").WebGLRenderer>, import("..").ReactThreeFiber.NodeProps<import("three").WebGLRenderer, typeof import("three").WebGLRenderer>>>;
export declare const FogExp2: import("react").FC<import("..").Overwrite<Partial<import("three").FogExp2>, import("..").ReactThreeFiber.NodeProps<import("three").FogExp2, typeof import("three").FogExp2>>>;
export declare const Fog: import("react").FC<import("..").Overwrite<Partial<import("three").Fog>, import("..").ReactThreeFiber.NodeProps<import("three").Fog, typeof import("three").Fog>>>;
export declare const Scene: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").Scene, typeof import("three").Scene>>;
export declare const Sprite: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").Sprite, typeof import("three").Sprite>>;
export declare const LOD: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").LOD, typeof import("three").LOD>>;
export declare const SkinnedMesh: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").SkinnedMesh, typeof import("three").SkinnedMesh>>;
export declare const Skeleton: import("react").FC<import("..").Overwrite<Partial<import("three").Skeleton>, import("..").ReactThreeFiber.NodeProps<import("three").Skeleton, typeof import("three").Skeleton>>>;
export declare const Bone: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").Bone, typeof import("three").Bone>>;
export declare const Mesh: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").Mesh, typeof import("three").Mesh>>;
export declare const LineSegments: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").LineSegments, typeof import("three").LineSegments>>;
export declare const LineLoop: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").LineLoop, typeof import("three").LineLoop>>;
export declare const Line: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").Line, typeof import("three").Line>>;
export declare const Points: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").Points, typeof import("three").Points>>;
export declare const Group: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").Group, typeof import("three").Group>>;
export declare const VideoTexture: import("react").FC<import("..").Overwrite<Partial<import("three").VideoTexture>, import("..").ReactThreeFiber.NodeProps<import("three").VideoTexture, typeof import("three").VideoTexture>>>;
export declare const DataTexture: import("react").FC<import("..").Overwrite<Partial<import("three").DataTexture>, import("..").ReactThreeFiber.NodeProps<import("three").DataTexture, typeof import("three").DataTexture>>>;
export declare const DataTexture3D: import("react").FC<import("..").Overwrite<Partial<import("three").DataTexture3D>, import("..").ReactThreeFiber.NodeProps<import("three").DataTexture3D, typeof import("three").DataTexture3D>>>;
export declare const CompressedTexture: import("react").FC<import("..").Overwrite<Partial<import("three").CompressedTexture>, import("..").ReactThreeFiber.NodeProps<import("three").CompressedTexture, typeof import("three").CompressedTexture>>>;
export declare const CubeTexture: import("react").FC<import("..").Overwrite<Partial<import("three").CubeTexture>, import("..").ReactThreeFiber.NodeProps<import("three").CubeTexture, typeof import("three").CubeTexture>>>;
export declare const CanvasTexture: import("react").FC<import("..").Overwrite<Partial<import("three").CanvasTexture>, import("..").ReactThreeFiber.NodeProps<import("three").CanvasTexture, typeof import("three").CanvasTexture>>>;
export declare const DepthTexture: import("react").FC<import("..").Overwrite<Partial<import("three").DepthTexture>, import("..").ReactThreeFiber.NodeProps<import("three").DepthTexture, typeof import("three").DepthTexture>>>;
export declare const Texture: import("react").FC<import("..").Overwrite<Partial<import("three").Texture>, import("..").ReactThreeFiber.NodeProps<import("three").Texture, typeof import("three").Texture>>>;
export declare const WireframeGeometry: import("react").FC<Pick<import("..").Overwrite<Partial<import("three").WireframeGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").WireframeGeometry, typeof import("three").WireframeGeometry>>, "children" | "key" | "ref" | "args" | "name" | "attach" | "attachArray" | "attachObject" | "onUpdate" | "scale" | "dispose" | "type" | "id" | "uuid" | "userData" | "applyMatrix4" | "rotateX" | "rotateY" | "rotateZ" | "lookAt" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "center" | "boundingBox" | "boundingSphere" | "translate" | "computeVertexNormals" | "computeBoundingBox" | "computeBoundingSphere" | "merge" | "setFromPoints" | "groups" | "addGroup" | "index" | "attributes" | "morphAttributes" | "morphTargetsRelative" | "drawRange" | "isBufferGeometry" | "getIndex" | "setIndex" | "setAttribute" | "getAttribute" | "deleteAttribute" | "clearGroups" | "setDrawRange" | "setFromObject" | "updateFromObject" | "fromGeometry" | "fromDirectGeometry" | "normalizeNormals" | "toNonIndexed" | "drawcalls" | "offsets" | "addIndex" | "addDrawCall" | "clearDrawCalls" | "addAttribute" | "removeAttribute">>;
export declare const ParametricBufferGeometry: import("react").FC<Pick<import("..").Overwrite<Partial<import("three").ParametricBufferGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").ParametricBufferGeometry, typeof import("three").ParametricBufferGeometry>>, "children" | "key" | "ref" | "args" | "name" | "attach" | "attachArray" | "attachObject" | "onUpdate" | "scale" | "dispose" | "type" | "id" | "uuid" | "userData" | "applyMatrix4" | "rotateX" | "rotateY" | "rotateZ" | "lookAt" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "center" | "boundingBox" | "boundingSphere" | "translate" | "computeVertexNormals" | "computeBoundingBox" | "computeBoundingSphere" | "merge" | "setFromPoints" | "groups" | "addGroup" | "index" | "attributes" | "morphAttributes" | "morphTargetsRelative" | "drawRange" | "isBufferGeometry" | "getIndex" | "setIndex" | "setAttribute" | "getAttribute" | "deleteAttribute" | "clearGroups" | "setDrawRange" | "setFromObject" | "updateFromObject" | "fromGeometry" | "fromDirectGeometry" | "normalizeNormals" | "toNonIndexed" | "drawcalls" | "offsets" | "addIndex" | "addDrawCall" | "clearDrawCalls" | "addAttribute" | "removeAttribute" | "parameters">>;
export declare const ParametricGeometry: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").ParametricGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").ParametricGeometry, typeof import("three").ParametricGeometry>>, {
    vertices?: import("..").ReactThreeFiber.Vector3[] | undefined;
}>>;
export declare const TetrahedronBufferGeometry: import("react").FC<Pick<import("..").Overwrite<Partial<import("three").TetrahedronBufferGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").TetrahedronBufferGeometry, typeof import("three").TetrahedronBufferGeometry>>, "children" | "key" | "ref" | "args" | "name" | "attach" | "attachArray" | "attachObject" | "onUpdate" | "scale" | "dispose" | "type" | "id" | "uuid" | "userData" | "applyMatrix4" | "rotateX" | "rotateY" | "rotateZ" | "lookAt" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "center" | "boundingBox" | "boundingSphere" | "translate" | "computeVertexNormals" | "computeBoundingBox" | "computeBoundingSphere" | "merge" | "setFromPoints" | "groups" | "addGroup" | "index" | "attributes" | "morphAttributes" | "morphTargetsRelative" | "drawRange" | "isBufferGeometry" | "getIndex" | "setIndex" | "setAttribute" | "getAttribute" | "deleteAttribute" | "clearGroups" | "setDrawRange" | "setFromObject" | "updateFromObject" | "fromGeometry" | "fromDirectGeometry" | "normalizeNormals" | "toNonIndexed" | "drawcalls" | "offsets" | "addIndex" | "addDrawCall" | "clearDrawCalls" | "addAttribute" | "removeAttribute" | "parameters">>;
export declare const TetrahedronGeometry: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").TetrahedronGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").TetrahedronGeometry, typeof import("three").TetrahedronGeometry>>, {
    vertices?: import("..").ReactThreeFiber.Vector3[] | undefined;
}>>;
export declare const OctahedronBufferGeometry: import("react").FC<Pick<import("..").Overwrite<Partial<import("three").OctahedronBufferGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").OctahedronBufferGeometry, typeof import("three").OctahedronBufferGeometry>>, "children" | "key" | "ref" | "args" | "name" | "attach" | "attachArray" | "attachObject" | "onUpdate" | "scale" | "dispose" | "type" | "id" | "uuid" | "userData" | "applyMatrix4" | "rotateX" | "rotateY" | "rotateZ" | "lookAt" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "center" | "boundingBox" | "boundingSphere" | "translate" | "computeVertexNormals" | "computeBoundingBox" | "computeBoundingSphere" | "merge" | "setFromPoints" | "groups" | "addGroup" | "index" | "attributes" | "morphAttributes" | "morphTargetsRelative" | "drawRange" | "isBufferGeometry" | "getIndex" | "setIndex" | "setAttribute" | "getAttribute" | "deleteAttribute" | "clearGroups" | "setDrawRange" | "setFromObject" | "updateFromObject" | "fromGeometry" | "fromDirectGeometry" | "normalizeNormals" | "toNonIndexed" | "drawcalls" | "offsets" | "addIndex" | "addDrawCall" | "clearDrawCalls" | "addAttribute" | "removeAttribute" | "parameters">>;
export declare const OctahedronGeometry: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").OctahedronGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").OctahedronGeometry, typeof import("three").OctahedronGeometry>>, {
    vertices?: import("..").ReactThreeFiber.Vector3[] | undefined;
}>>;
export declare const IcosahedronBufferGeometry: import("react").FC<Pick<import("..").Overwrite<Partial<import("three").IcosahedronBufferGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").IcosahedronBufferGeometry, typeof import("three").IcosahedronBufferGeometry>>, "children" | "key" | "ref" | "args" | "name" | "attach" | "attachArray" | "attachObject" | "onUpdate" | "scale" | "dispose" | "type" | "id" | "uuid" | "userData" | "applyMatrix4" | "rotateX" | "rotateY" | "rotateZ" | "lookAt" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "center" | "boundingBox" | "boundingSphere" | "translate" | "computeVertexNormals" | "computeBoundingBox" | "computeBoundingSphere" | "merge" | "setFromPoints" | "groups" | "addGroup" | "index" | "attributes" | "morphAttributes" | "morphTargetsRelative" | "drawRange" | "isBufferGeometry" | "getIndex" | "setIndex" | "setAttribute" | "getAttribute" | "deleteAttribute" | "clearGroups" | "setDrawRange" | "setFromObject" | "updateFromObject" | "fromGeometry" | "fromDirectGeometry" | "normalizeNormals" | "toNonIndexed" | "drawcalls" | "offsets" | "addIndex" | "addDrawCall" | "clearDrawCalls" | "addAttribute" | "removeAttribute" | "parameters">>;
export declare const IcosahedronGeometry: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").IcosahedronGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").IcosahedronGeometry, typeof import("three").IcosahedronGeometry>>, {
    vertices?: import("..").ReactThreeFiber.Vector3[] | undefined;
}>>;
export declare const DodecahedronBufferGeometry: import("react").FC<Pick<import("..").Overwrite<Partial<import("three").DodecahedronBufferGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").DodecahedronBufferGeometry, typeof import("three").DodecahedronBufferGeometry>>, "children" | "key" | "ref" | "args" | "name" | "attach" | "attachArray" | "attachObject" | "onUpdate" | "scale" | "dispose" | "type" | "id" | "uuid" | "userData" | "applyMatrix4" | "rotateX" | "rotateY" | "rotateZ" | "lookAt" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "center" | "boundingBox" | "boundingSphere" | "translate" | "computeVertexNormals" | "computeBoundingBox" | "computeBoundingSphere" | "merge" | "setFromPoints" | "groups" | "addGroup" | "index" | "attributes" | "morphAttributes" | "morphTargetsRelative" | "drawRange" | "isBufferGeometry" | "getIndex" | "setIndex" | "setAttribute" | "getAttribute" | "deleteAttribute" | "clearGroups" | "setDrawRange" | "setFromObject" | "updateFromObject" | "fromGeometry" | "fromDirectGeometry" | "normalizeNormals" | "toNonIndexed" | "drawcalls" | "offsets" | "addIndex" | "addDrawCall" | "clearDrawCalls" | "addAttribute" | "removeAttribute" | "parameters">>;
export declare const DodecahedronGeometry: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").DodecahedronGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").DodecahedronGeometry, typeof import("three").DodecahedronGeometry>>, {
    vertices?: import("..").ReactThreeFiber.Vector3[] | undefined;
}>>;
export declare const PolyhedronBufferGeometry: import("react").FC<Pick<import("..").Overwrite<Partial<import("three").PolyhedronBufferGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").PolyhedronBufferGeometry, typeof import("three").PolyhedronBufferGeometry>>, "children" | "key" | "ref" | "args" | "name" | "attach" | "attachArray" | "attachObject" | "onUpdate" | "scale" | "dispose" | "type" | "id" | "uuid" | "userData" | "applyMatrix4" | "rotateX" | "rotateY" | "rotateZ" | "lookAt" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "center" | "boundingBox" | "boundingSphere" | "translate" | "computeVertexNormals" | "computeBoundingBox" | "computeBoundingSphere" | "merge" | "setFromPoints" | "groups" | "addGroup" | "index" | "attributes" | "morphAttributes" | "morphTargetsRelative" | "drawRange" | "isBufferGeometry" | "getIndex" | "setIndex" | "setAttribute" | "getAttribute" | "deleteAttribute" | "clearGroups" | "setDrawRange" | "setFromObject" | "updateFromObject" | "fromGeometry" | "fromDirectGeometry" | "normalizeNormals" | "toNonIndexed" | "drawcalls" | "offsets" | "addIndex" | "addDrawCall" | "clearDrawCalls" | "addAttribute" | "removeAttribute" | "parameters">>;
export declare const PolyhedronGeometry: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").PolyhedronGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").PolyhedronGeometry, typeof import("three").PolyhedronGeometry>>, {
    vertices?: import("..").ReactThreeFiber.Vector3[] | undefined;
}>>;
export declare const TubeBufferGeometry: import("react").FC<Pick<import("..").Overwrite<Partial<import("three").TubeBufferGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").TubeBufferGeometry, typeof import("three").TubeBufferGeometry>>, "children" | "key" | "ref" | "args" | "name" | "attach" | "attachArray" | "attachObject" | "onUpdate" | "scale" | "dispose" | "type" | "id" | "uuid" | "userData" | "applyMatrix4" | "rotateX" | "rotateY" | "rotateZ" | "lookAt" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "center" | "boundingBox" | "boundingSphere" | "translate" | "computeVertexNormals" | "computeBoundingBox" | "computeBoundingSphere" | "merge" | "setFromPoints" | "groups" | "addGroup" | "index" | "attributes" | "morphAttributes" | "morphTargetsRelative" | "drawRange" | "isBufferGeometry" | "getIndex" | "setIndex" | "setAttribute" | "getAttribute" | "deleteAttribute" | "clearGroups" | "setDrawRange" | "setFromObject" | "updateFromObject" | "fromGeometry" | "fromDirectGeometry" | "normalizeNormals" | "toNonIndexed" | "drawcalls" | "offsets" | "addIndex" | "addDrawCall" | "clearDrawCalls" | "addAttribute" | "removeAttribute" | "parameters" | "tangents" | "normals" | "binormals">>;
export declare const TubeGeometry: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").TubeGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").TubeGeometry, typeof import("three").TubeGeometry>>, {
    vertices?: import("..").ReactThreeFiber.Vector3[] | undefined;
}>>;
export declare const TorusKnotBufferGeometry: import("react").FC<Pick<import("..").Overwrite<Partial<import("three").TorusKnotBufferGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").TorusKnotBufferGeometry, typeof import("three").TorusKnotBufferGeometry>>, "children" | "key" | "ref" | "args" | "name" | "attach" | "attachArray" | "attachObject" | "onUpdate" | "scale" | "dispose" | "type" | "id" | "uuid" | "userData" | "applyMatrix4" | "rotateX" | "rotateY" | "rotateZ" | "lookAt" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "center" | "boundingBox" | "boundingSphere" | "translate" | "computeVertexNormals" | "computeBoundingBox" | "computeBoundingSphere" | "merge" | "setFromPoints" | "groups" | "addGroup" | "index" | "attributes" | "morphAttributes" | "morphTargetsRelative" | "drawRange" | "isBufferGeometry" | "getIndex" | "setIndex" | "setAttribute" | "getAttribute" | "deleteAttribute" | "clearGroups" | "setDrawRange" | "setFromObject" | "updateFromObject" | "fromGeometry" | "fromDirectGeometry" | "normalizeNormals" | "toNonIndexed" | "drawcalls" | "offsets" | "addIndex" | "addDrawCall" | "clearDrawCalls" | "addAttribute" | "removeAttribute" | "parameters">>;
export declare const TorusKnotGeometry: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").TorusKnotGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").TorusKnotGeometry, typeof import("three").TorusKnotGeometry>>, {
    vertices?: import("..").ReactThreeFiber.Vector3[] | undefined;
}>>;
export declare const TorusBufferGeometry: import("react").FC<Pick<import("..").Overwrite<Partial<import("three").TorusBufferGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").TorusBufferGeometry, typeof import("three").TorusBufferGeometry>>, "children" | "key" | "ref" | "args" | "name" | "attach" | "attachArray" | "attachObject" | "onUpdate" | "scale" | "dispose" | "type" | "id" | "uuid" | "userData" | "applyMatrix4" | "rotateX" | "rotateY" | "rotateZ" | "lookAt" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "center" | "boundingBox" | "boundingSphere" | "translate" | "computeVertexNormals" | "computeBoundingBox" | "computeBoundingSphere" | "merge" | "setFromPoints" | "groups" | "addGroup" | "index" | "attributes" | "morphAttributes" | "morphTargetsRelative" | "drawRange" | "isBufferGeometry" | "getIndex" | "setIndex" | "setAttribute" | "getAttribute" | "deleteAttribute" | "clearGroups" | "setDrawRange" | "setFromObject" | "updateFromObject" | "fromGeometry" | "fromDirectGeometry" | "normalizeNormals" | "toNonIndexed" | "drawcalls" | "offsets" | "addIndex" | "addDrawCall" | "clearDrawCalls" | "addAttribute" | "removeAttribute" | "parameters">>;
export declare const TorusGeometry: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").TorusGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").TorusGeometry, typeof import("three").TorusGeometry>>, {
    vertices?: import("..").ReactThreeFiber.Vector3[] | undefined;
}>>;
export declare const TextBufferGeometry: import("react").FC<Pick<import("..").Overwrite<Partial<import("three").TextBufferGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").TextBufferGeometry, typeof import("three").TextBufferGeometry>>, "children" | "key" | "ref" | "args" | "name" | "attach" | "attachArray" | "attachObject" | "onUpdate" | "scale" | "dispose" | "type" | "id" | "uuid" | "userData" | "applyMatrix4" | "rotateX" | "rotateY" | "rotateZ" | "lookAt" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "center" | "boundingBox" | "boundingSphere" | "translate" | "computeVertexNormals" | "computeBoundingBox" | "computeBoundingSphere" | "merge" | "setFromPoints" | "groups" | "addGroup" | "index" | "attributes" | "morphAttributes" | "morphTargetsRelative" | "drawRange" | "isBufferGeometry" | "getIndex" | "setIndex" | "setAttribute" | "getAttribute" | "deleteAttribute" | "clearGroups" | "setDrawRange" | "setFromObject" | "updateFromObject" | "fromGeometry" | "fromDirectGeometry" | "normalizeNormals" | "toNonIndexed" | "drawcalls" | "offsets" | "addIndex" | "addDrawCall" | "clearDrawCalls" | "addAttribute" | "removeAttribute" | "parameters" | "addShapeList" | "addShape">>;
export declare const TextGeometry: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").TextGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").TextGeometry, typeof import("three").TextGeometry>>, {
    vertices?: import("..").ReactThreeFiber.Vector3[] | undefined;
}>>;
export declare const SphereBufferGeometry: import("react").FC<Pick<import("..").Overwrite<Partial<import("three").SphereBufferGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").SphereBufferGeometry, typeof import("three").SphereBufferGeometry>>, "children" | "key" | "ref" | "args" | "name" | "attach" | "attachArray" | "attachObject" | "onUpdate" | "scale" | "dispose" | "type" | "id" | "uuid" | "userData" | "applyMatrix4" | "rotateX" | "rotateY" | "rotateZ" | "lookAt" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "center" | "boundingBox" | "boundingSphere" | "translate" | "computeVertexNormals" | "computeBoundingBox" | "computeBoundingSphere" | "merge" | "setFromPoints" | "groups" | "addGroup" | "index" | "attributes" | "morphAttributes" | "morphTargetsRelative" | "drawRange" | "isBufferGeometry" | "getIndex" | "setIndex" | "setAttribute" | "getAttribute" | "deleteAttribute" | "clearGroups" | "setDrawRange" | "setFromObject" | "updateFromObject" | "fromGeometry" | "fromDirectGeometry" | "normalizeNormals" | "toNonIndexed" | "drawcalls" | "offsets" | "addIndex" | "addDrawCall" | "clearDrawCalls" | "addAttribute" | "removeAttribute" | "parameters">>;
export declare const SphereGeometry: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").SphereGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").SphereGeometry, typeof import("three").SphereGeometry>>, {
    vertices?: import("..").ReactThreeFiber.Vector3[] | undefined;
}>>;
export declare const RingBufferGeometry: import("react").FC<Pick<import("..").Overwrite<Partial<import("three").RingBufferGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").RingBufferGeometry, typeof import("three").RingBufferGeometry>>, "children" | "key" | "ref" | "args" | "name" | "attach" | "attachArray" | "attachObject" | "onUpdate" | "scale" | "dispose" | "type" | "id" | "uuid" | "userData" | "applyMatrix4" | "rotateX" | "rotateY" | "rotateZ" | "lookAt" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "center" | "boundingBox" | "boundingSphere" | "translate" | "computeVertexNormals" | "computeBoundingBox" | "computeBoundingSphere" | "merge" | "setFromPoints" | "groups" | "addGroup" | "index" | "attributes" | "morphAttributes" | "morphTargetsRelative" | "drawRange" | "isBufferGeometry" | "getIndex" | "setIndex" | "setAttribute" | "getAttribute" | "deleteAttribute" | "clearGroups" | "setDrawRange" | "setFromObject" | "updateFromObject" | "fromGeometry" | "fromDirectGeometry" | "normalizeNormals" | "toNonIndexed" | "drawcalls" | "offsets" | "addIndex" | "addDrawCall" | "clearDrawCalls" | "addAttribute" | "removeAttribute" | "parameters">>;
export declare const RingGeometry: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").RingGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").RingGeometry, typeof import("three").RingGeometry>>, {
    vertices?: import("..").ReactThreeFiber.Vector3[] | undefined;
}>>;
export declare const PlaneBufferGeometry: import("react").FC<Pick<import("..").Overwrite<Partial<import("three").PlaneBufferGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").PlaneBufferGeometry, typeof import("three").PlaneBufferGeometry>>, "children" | "key" | "ref" | "args" | "name" | "attach" | "attachArray" | "attachObject" | "onUpdate" | "scale" | "dispose" | "type" | "id" | "uuid" | "userData" | "applyMatrix4" | "rotateX" | "rotateY" | "rotateZ" | "lookAt" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "center" | "boundingBox" | "boundingSphere" | "translate" | "computeVertexNormals" | "computeBoundingBox" | "computeBoundingSphere" | "merge" | "setFromPoints" | "groups" | "addGroup" | "index" | "attributes" | "morphAttributes" | "morphTargetsRelative" | "drawRange" | "isBufferGeometry" | "getIndex" | "setIndex" | "setAttribute" | "getAttribute" | "deleteAttribute" | "clearGroups" | "setDrawRange" | "setFromObject" | "updateFromObject" | "fromGeometry" | "fromDirectGeometry" | "normalizeNormals" | "toNonIndexed" | "drawcalls" | "offsets" | "addIndex" | "addDrawCall" | "clearDrawCalls" | "addAttribute" | "removeAttribute" | "parameters">>;
export declare const PlaneGeometry: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").PlaneGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").PlaneGeometry, typeof import("three").PlaneGeometry>>, {
    vertices?: import("..").ReactThreeFiber.Vector3[] | undefined;
}>>;
export declare const LatheBufferGeometry: import("react").FC<Pick<import("..").Overwrite<Partial<import("three").LatheBufferGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").LatheBufferGeometry, typeof import("three").LatheBufferGeometry>>, "children" | "key" | "ref" | "args" | "name" | "attach" | "attachArray" | "attachObject" | "onUpdate" | "scale" | "dispose" | "type" | "id" | "uuid" | "userData" | "applyMatrix4" | "rotateX" | "rotateY" | "rotateZ" | "lookAt" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "center" | "boundingBox" | "boundingSphere" | "translate" | "computeVertexNormals" | "computeBoundingBox" | "computeBoundingSphere" | "merge" | "setFromPoints" | "groups" | "addGroup" | "index" | "attributes" | "morphAttributes" | "morphTargetsRelative" | "drawRange" | "isBufferGeometry" | "getIndex" | "setIndex" | "setAttribute" | "getAttribute" | "deleteAttribute" | "clearGroups" | "setDrawRange" | "setFromObject" | "updateFromObject" | "fromGeometry" | "fromDirectGeometry" | "normalizeNormals" | "toNonIndexed" | "drawcalls" | "offsets" | "addIndex" | "addDrawCall" | "clearDrawCalls" | "addAttribute" | "removeAttribute" | "parameters">>;
export declare const LatheGeometry: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").LatheGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").LatheGeometry, typeof import("three").LatheGeometry>>, {
    vertices?: import("..").ReactThreeFiber.Vector3[] | undefined;
}>>;
export declare const ShapeBufferGeometry: import("react").FC<Pick<import("..").Overwrite<Partial<import("three").ShapeBufferGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").ShapeBufferGeometry, typeof import("three").ShapeBufferGeometry>>, "children" | "key" | "ref" | "args" | "name" | "attach" | "attachArray" | "attachObject" | "onUpdate" | "scale" | "dispose" | "type" | "id" | "uuid" | "userData" | "applyMatrix4" | "rotateX" | "rotateY" | "rotateZ" | "lookAt" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "center" | "boundingBox" | "boundingSphere" | "translate" | "computeVertexNormals" | "computeBoundingBox" | "computeBoundingSphere" | "merge" | "setFromPoints" | "groups" | "addGroup" | "index" | "attributes" | "morphAttributes" | "morphTargetsRelative" | "drawRange" | "isBufferGeometry" | "getIndex" | "setIndex" | "setAttribute" | "getAttribute" | "deleteAttribute" | "clearGroups" | "setDrawRange" | "setFromObject" | "updateFromObject" | "fromGeometry" | "fromDirectGeometry" | "normalizeNormals" | "toNonIndexed" | "drawcalls" | "offsets" | "addIndex" | "addDrawCall" | "clearDrawCalls" | "addAttribute" | "removeAttribute">>;
export declare const ShapeGeometry: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").ShapeGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").ShapeGeometry, typeof import("three").ShapeGeometry>>, {
    vertices?: import("..").ReactThreeFiber.Vector3[] | undefined;
}>>;
export declare const ExtrudeBufferGeometry: import("react").FC<Pick<import("..").Overwrite<Partial<import("three").ExtrudeBufferGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").ExtrudeBufferGeometry, typeof import("three").ExtrudeBufferGeometry>>, "children" | "key" | "ref" | "args" | "name" | "attach" | "attachArray" | "attachObject" | "onUpdate" | "scale" | "dispose" | "type" | "id" | "uuid" | "userData" | "applyMatrix4" | "rotateX" | "rotateY" | "rotateZ" | "lookAt" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "center" | "boundingBox" | "boundingSphere" | "translate" | "computeVertexNormals" | "computeBoundingBox" | "computeBoundingSphere" | "merge" | "setFromPoints" | "groups" | "addGroup" | "index" | "attributes" | "morphAttributes" | "morphTargetsRelative" | "drawRange" | "isBufferGeometry" | "getIndex" | "setIndex" | "setAttribute" | "getAttribute" | "deleteAttribute" | "clearGroups" | "setDrawRange" | "setFromObject" | "updateFromObject" | "fromGeometry" | "fromDirectGeometry" | "normalizeNormals" | "toNonIndexed" | "drawcalls" | "offsets" | "addIndex" | "addDrawCall" | "clearDrawCalls" | "addAttribute" | "removeAttribute" | "addShapeList" | "addShape">>;
export declare const ExtrudeGeometry: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").ExtrudeGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").ExtrudeGeometry, typeof import("three").ExtrudeGeometry>>, {
    vertices?: import("..").ReactThreeFiber.Vector3[] | undefined;
}>>;
export declare const EdgesGeometry: import("react").FC<Pick<import("..").Overwrite<Partial<import("three").EdgesGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").EdgesGeometry, typeof import("three").EdgesGeometry>>, "children" | "key" | "ref" | "args" | "name" | "attach" | "attachArray" | "attachObject" | "onUpdate" | "scale" | "dispose" | "type" | "id" | "uuid" | "userData" | "applyMatrix4" | "rotateX" | "rotateY" | "rotateZ" | "lookAt" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "center" | "boundingBox" | "boundingSphere" | "translate" | "computeVertexNormals" | "computeBoundingBox" | "computeBoundingSphere" | "merge" | "setFromPoints" | "groups" | "addGroup" | "index" | "attributes" | "morphAttributes" | "morphTargetsRelative" | "drawRange" | "isBufferGeometry" | "getIndex" | "setIndex" | "setAttribute" | "getAttribute" | "deleteAttribute" | "clearGroups" | "setDrawRange" | "setFromObject" | "updateFromObject" | "fromGeometry" | "fromDirectGeometry" | "normalizeNormals" | "toNonIndexed" | "drawcalls" | "offsets" | "addIndex" | "addDrawCall" | "clearDrawCalls" | "addAttribute" | "removeAttribute">>;
export declare const ConeBufferGeometry: import("react").FC<Pick<import("..").Overwrite<Partial<import("three").ConeBufferGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").ConeBufferGeometry, typeof import("three").ConeBufferGeometry>>, "children" | "key" | "ref" | "args" | "name" | "attach" | "attachArray" | "attachObject" | "onUpdate" | "scale" | "dispose" | "type" | "id" | "uuid" | "userData" | "applyMatrix4" | "rotateX" | "rotateY" | "rotateZ" | "lookAt" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "center" | "boundingBox" | "boundingSphere" | "translate" | "computeVertexNormals" | "computeBoundingBox" | "computeBoundingSphere" | "merge" | "setFromPoints" | "groups" | "addGroup" | "index" | "attributes" | "morphAttributes" | "morphTargetsRelative" | "drawRange" | "isBufferGeometry" | "getIndex" | "setIndex" | "setAttribute" | "getAttribute" | "deleteAttribute" | "clearGroups" | "setDrawRange" | "setFromObject" | "updateFromObject" | "fromGeometry" | "fromDirectGeometry" | "normalizeNormals" | "toNonIndexed" | "drawcalls" | "offsets" | "addIndex" | "addDrawCall" | "clearDrawCalls" | "addAttribute" | "removeAttribute" | "parameters">>;
export declare const ConeGeometry: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").ConeGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").ConeGeometry, typeof import("three").ConeGeometry>>, {
    vertices?: import("..").ReactThreeFiber.Vector3[] | undefined;
}>>;
export declare const CylinderBufferGeometry: import("react").FC<Pick<import("..").Overwrite<Partial<import("three").CylinderBufferGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").CylinderBufferGeometry, typeof import("three").CylinderBufferGeometry>>, "children" | "key" | "ref" | "args" | "name" | "attach" | "attachArray" | "attachObject" | "onUpdate" | "scale" | "dispose" | "type" | "id" | "uuid" | "userData" | "applyMatrix4" | "rotateX" | "rotateY" | "rotateZ" | "lookAt" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "center" | "boundingBox" | "boundingSphere" | "translate" | "computeVertexNormals" | "computeBoundingBox" | "computeBoundingSphere" | "merge" | "setFromPoints" | "groups" | "addGroup" | "index" | "attributes" | "morphAttributes" | "morphTargetsRelative" | "drawRange" | "isBufferGeometry" | "getIndex" | "setIndex" | "setAttribute" | "getAttribute" | "deleteAttribute" | "clearGroups" | "setDrawRange" | "setFromObject" | "updateFromObject" | "fromGeometry" | "fromDirectGeometry" | "normalizeNormals" | "toNonIndexed" | "drawcalls" | "offsets" | "addIndex" | "addDrawCall" | "clearDrawCalls" | "addAttribute" | "removeAttribute" | "parameters">>;
export declare const CylinderGeometry: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").CylinderGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").CylinderGeometry, typeof import("three").CylinderGeometry>>, {
    vertices?: import("..").ReactThreeFiber.Vector3[] | undefined;
}>>;
export declare const CircleBufferGeometry: import("react").FC<Pick<import("..").Overwrite<Partial<import("three").CircleBufferGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").CircleBufferGeometry, typeof import("three").CircleBufferGeometry>>, "children" | "key" | "ref" | "args" | "name" | "attach" | "attachArray" | "attachObject" | "onUpdate" | "scale" | "dispose" | "type" | "id" | "uuid" | "userData" | "applyMatrix4" | "rotateX" | "rotateY" | "rotateZ" | "lookAt" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "center" | "boundingBox" | "boundingSphere" | "translate" | "computeVertexNormals" | "computeBoundingBox" | "computeBoundingSphere" | "merge" | "setFromPoints" | "groups" | "addGroup" | "index" | "attributes" | "morphAttributes" | "morphTargetsRelative" | "drawRange" | "isBufferGeometry" | "getIndex" | "setIndex" | "setAttribute" | "getAttribute" | "deleteAttribute" | "clearGroups" | "setDrawRange" | "setFromObject" | "updateFromObject" | "fromGeometry" | "fromDirectGeometry" | "normalizeNormals" | "toNonIndexed" | "drawcalls" | "offsets" | "addIndex" | "addDrawCall" | "clearDrawCalls" | "addAttribute" | "removeAttribute" | "parameters">>;
export declare const CircleGeometry: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").CircleGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").CircleGeometry, typeof import("three").CircleGeometry>>, {
    vertices?: import("..").ReactThreeFiber.Vector3[] | undefined;
}>>;
export declare const BoxBufferGeometry: import("react").FC<Pick<import("..").Overwrite<Partial<import("three").BoxBufferGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").BoxBufferGeometry, typeof import("three").BoxBufferGeometry>>, "children" | "key" | "ref" | "args" | "name" | "attach" | "attachArray" | "attachObject" | "onUpdate" | "scale" | "dispose" | "type" | "id" | "uuid" | "userData" | "applyMatrix4" | "rotateX" | "rotateY" | "rotateZ" | "lookAt" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "center" | "boundingBox" | "boundingSphere" | "translate" | "computeVertexNormals" | "computeBoundingBox" | "computeBoundingSphere" | "merge" | "setFromPoints" | "groups" | "addGroup" | "index" | "attributes" | "morphAttributes" | "morphTargetsRelative" | "drawRange" | "isBufferGeometry" | "getIndex" | "setIndex" | "setAttribute" | "getAttribute" | "deleteAttribute" | "clearGroups" | "setDrawRange" | "setFromObject" | "updateFromObject" | "fromGeometry" | "fromDirectGeometry" | "normalizeNormals" | "toNonIndexed" | "drawcalls" | "offsets" | "addIndex" | "addDrawCall" | "clearDrawCalls" | "addAttribute" | "removeAttribute" | "parameters">>;
export declare const BoxGeometry: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").BoxGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").BoxGeometry, typeof import("three").BoxGeometry>>, {
    vertices?: import("..").ReactThreeFiber.Vector3[] | undefined;
}>>;
export declare const ShadowMaterial: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").ShadowMaterial>, import("..").ReactThreeFiber.NodeProps<import("three").ShadowMaterial, [import("three").ShadowMaterialParameters]>>, {
    color?: string | number | import("three").Color | undefined;
}>>;
export declare const SpriteMaterial: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").SpriteMaterial>, import("..").ReactThreeFiber.NodeProps<import("three").SpriteMaterial, [import("three").SpriteMaterialParameters]>>, {
    color?: string | number | import("three").Color | undefined;
}>>;
export declare const RawShaderMaterial: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").RawShaderMaterial>, import("..").ReactThreeFiber.NodeProps<import("three").RawShaderMaterial, [import("three").ShaderMaterialParameters]>>, {
    color?: string | number | import("three").Color | undefined;
}>>;
export declare const ShaderMaterial: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").ShaderMaterial>, import("..").ReactThreeFiber.NodeProps<import("three").ShaderMaterial, [import("three").ShaderMaterialParameters]>>, {
    color?: string | number | import("three").Color | undefined;
}>>;
export declare const MultiMaterial: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").MultiMaterial>, import("..").ReactThreeFiber.NodeProps<import("three").MultiMaterial, [import("three").Material[]]>>, {
    color?: string | number | import("three").Color | undefined;
}>>;
export declare const PointsMaterial: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").PointsMaterial>, import("..").ReactThreeFiber.NodeProps<import("three").PointsMaterial, [import("three").PointsMaterialParameters]>>, {
    color?: string | number | import("three").Color | undefined;
}>>;
export declare const MeshPhysicalMaterial: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").MeshPhysicalMaterial>, import("..").ReactThreeFiber.NodeProps<import("three").MeshPhysicalMaterial, [import("three").MeshPhysicalMaterialParameters]>>, {
    color?: string | number | import("three").Color | undefined;
}>>;
export declare const MeshStandardMaterial: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").MeshStandardMaterial>, import("..").ReactThreeFiber.NodeProps<import("three").MeshStandardMaterial, [import("three").MeshStandardMaterialParameters]>>, {
    color?: string | number | import("three").Color | undefined;
}>>;
export declare const MeshPhongMaterial: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").MeshPhongMaterial>, import("..").ReactThreeFiber.NodeProps<import("three").MeshPhongMaterial, [import("three").MeshPhongMaterialParameters]>>, {
    color?: string | number | import("three").Color | undefined;
}>>;
export declare const MeshToonMaterial: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").MeshToonMaterial>, import("..").ReactThreeFiber.NodeProps<import("three").MeshToonMaterial, [import("three").MeshToonMaterialParameters]>>, {
    color?: string | number | import("three").Color | undefined;
}>>;
export declare const MeshNormalMaterial: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").MeshNormalMaterial>, import("..").ReactThreeFiber.NodeProps<import("three").MeshNormalMaterial, [import("three").MeshNormalMaterialParameters]>>, {
    color?: string | number | import("three").Color | undefined;
}>>;
export declare const MeshLambertMaterial: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").MeshLambertMaterial>, import("..").ReactThreeFiber.NodeProps<import("three").MeshLambertMaterial, [import("three").MeshLambertMaterialParameters]>>, {
    color?: string | number | import("three").Color | undefined;
}>>;
export declare const MeshDepthMaterial: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").MeshDepthMaterial>, import("..").ReactThreeFiber.NodeProps<import("three").MeshDepthMaterial, [import("three").MeshDepthMaterialParameters]>>, {
    color?: string | number | import("three").Color | undefined;
}>>;
export declare const MeshDistanceMaterial: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").MeshDistanceMaterial>, import("..").ReactThreeFiber.NodeProps<import("three").MeshDistanceMaterial, [import("three").MeshDistanceMaterialParameters]>>, {
    color?: string | number | import("three").Color | undefined;
}>>;
export declare const MeshBasicMaterial: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").MeshBasicMaterial>, import("..").ReactThreeFiber.NodeProps<import("three").MeshBasicMaterial, [import("three").MeshBasicMaterialParameters]>>, {
    color?: string | number | import("three").Color | undefined;
}>>;
export declare const MeshMatcapMaterial: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").MeshMatcapMaterial>, import("..").ReactThreeFiber.NodeProps<import("three").MeshMatcapMaterial, [import("three").MeshMatcapMaterialParameters]>>, {
    color?: string | number | import("three").Color | undefined;
}>>;
export declare const LineDashedMaterial: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").LineDashedMaterial>, import("..").ReactThreeFiber.NodeProps<import("three").LineDashedMaterial, [import("three").LineDashedMaterialParameters]>>, {
    color?: string | number | import("three").Color | undefined;
}>>;
export declare const LineBasicMaterial: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").LineBasicMaterial>, import("..").ReactThreeFiber.NodeProps<import("three").LineBasicMaterial, [import("three").LineBasicMaterialParameters]>>, {
    color?: string | number | import("three").Color | undefined;
}>>;
export declare const Material: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").Material>, import("..").ReactThreeFiber.NodeProps<import("three").Material, []>>, {
    color?: string | number | import("three").Color | undefined;
}>>;
export declare const AnimationLoader: import("react").FC<import("..").Overwrite<Partial<import("three").AnimationLoader>, import("..").ReactThreeFiber.NodeProps<import("three").AnimationLoader, typeof import("three").AnimationLoader>>>;
export declare const CompressedTextureLoader: import("react").FC<import("..").Overwrite<Partial<import("three").CompressedTextureLoader>, import("..").ReactThreeFiber.NodeProps<import("three").CompressedTextureLoader, typeof import("three").CompressedTextureLoader>>>;
export declare const DataTextureLoader: import("react").FC<import("..").Overwrite<Partial<import("three").DataTextureLoader>, import("..").ReactThreeFiber.NodeProps<import("three").DataTextureLoader, typeof import("three").DataTextureLoader>>>;
export declare const CubeTextureLoader: import("react").FC<import("..").Overwrite<Partial<import("three").CubeTextureLoader>, import("..").ReactThreeFiber.NodeProps<import("three").CubeTextureLoader, typeof import("three").CubeTextureLoader>>>;
export declare const TextureLoader: import("react").FC<import("..").Overwrite<Partial<import("three").TextureLoader>, import("..").ReactThreeFiber.NodeProps<import("three").TextureLoader, typeof import("three").TextureLoader>>>;
export declare const ObjectLoader: import("react").FC<import("..").Overwrite<Partial<import("three").ObjectLoader>, import("..").ReactThreeFiber.NodeProps<import("three").ObjectLoader, typeof import("three").ObjectLoader>>>;
export declare const MaterialLoader: import("react").FC<import("..").Overwrite<Partial<import("three").MaterialLoader>, import("..").ReactThreeFiber.NodeProps<import("three").MaterialLoader, typeof import("three").MaterialLoader>>>;
export declare const BufferGeometryLoader: import("react").FC<import("..").Overwrite<Partial<import("three").BufferGeometryLoader>, import("..").ReactThreeFiber.NodeProps<import("three").BufferGeometryLoader, typeof import("three").BufferGeometryLoader>>>;
export declare const LoadingManager: import("react").FC<import("..").Overwrite<Partial<import("three").LoadingManager>, import("..").ReactThreeFiber.NodeProps<import("three").LoadingManager, typeof import("three").LoadingManager>>>;
export declare const ImageLoader: import("react").FC<import("..").Overwrite<Partial<import("three").ImageLoader>, import("..").ReactThreeFiber.NodeProps<import("three").ImageLoader, typeof import("three").ImageLoader>>>;
export declare const ImageBitmapLoader: import("react").FC<import("..").Overwrite<Partial<import("three").ImageBitmapLoader>, import("..").ReactThreeFiber.NodeProps<import("three").ImageBitmapLoader, typeof import("three").ImageBitmapLoader>>>;
export declare const FontLoader: import("react").FC<import("..").Overwrite<Partial<import("three").FontLoader>, import("..").ReactThreeFiber.NodeProps<import("three").FontLoader, typeof import("three").FontLoader>>>;
export declare const FileLoader: import("react").FC<import("..").Overwrite<Partial<import("three").FileLoader>, import("..").ReactThreeFiber.NodeProps<import("three").FileLoader, typeof import("three").FileLoader>>>;
export declare const Loader: import("react").FC<import("..").Overwrite<Partial<import("three").Loader>, import("..").ReactThreeFiber.NodeProps<import("three").Loader, typeof import("three").Loader>>>;
export declare const LoaderUtils: import("react").FC<import("..").Overwrite<Partial<import("three").LoaderUtils>, import("..").ReactThreeFiber.NodeProps<import("three").LoaderUtils, typeof import("three").LoaderUtils>>>;
export declare const AudioLoader: import("react").FC<import("..").Overwrite<Partial<import("three").AudioLoader>, import("..").ReactThreeFiber.NodeProps<import("three").AudioLoader, typeof import("three").AudioLoader>>>;
export declare const SpotLightShadow: import("react").FC<import("..").Overwrite<Partial<import("three").SpotLightShadow>, import("..").ReactThreeFiber.NodeProps<import("three").SpotLightShadow, typeof import("three").SpotLightShadow>>>;
export declare const SpotLight: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").SpotLight, typeof import("three").SpotLight>>;
export declare const PointLightShadow: import("react").FC<import("..").Overwrite<Partial<import("three").PointLightShadow>, import("..").ReactThreeFiber.NodeProps<import("three").PointLightShadow, typeof import("three").PointLightShadow>>>;
export declare const PointLight: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").PointLight, typeof import("three").PointLight>>;
export declare const RectAreaLight: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").RectAreaLight, typeof import("three").RectAreaLight>>;
export declare const HemisphereLight: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").HemisphereLight, typeof import("three").HemisphereLight>>;
export declare const DirectionalLightShadow: import("react").FC<import("..").Overwrite<Partial<import("three").DirectionalLightShadow>, import("..").ReactThreeFiber.NodeProps<import("three").DirectionalLightShadow, typeof import("three").DirectionalLightShadow>>>;
export declare const DirectionalLight: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").DirectionalLight, typeof import("three").DirectionalLight>>;
export declare const AmbientLight: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").AmbientLight, typeof import("three").AmbientLight>>;
export declare const LightShadow: import("react").FC<import("..").Overwrite<Partial<import("three").LightShadow>, import("..").ReactThreeFiber.NodeProps<import("three").LightShadow, typeof import("three").LightShadow>>>;
export declare const Light: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").Light, typeof import("three").Light>>;
export declare const AmbientLightProbe: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").AmbientLightProbe, typeof import("three").AmbientLightProbe>>;
export declare const HemisphereLightProbe: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").HemisphereLightProbe, typeof import("three").HemisphereLightProbe>>;
export declare const LightProbe: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").LightProbe, typeof import("three").LightProbe>>;
export declare const StereoCamera: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").StereoCamera, typeof import("three").StereoCamera>>;
export declare const PerspectiveCamera: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").PerspectiveCamera, typeof import("three").PerspectiveCamera>>;
export declare const OrthographicCamera: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").OrthographicCamera, typeof import("three").OrthographicCamera>>;
export declare const CubeCamera: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").CubeCamera, typeof import("three").CubeCamera>>;
export declare const ArrayCamera: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").ArrayCamera, typeof import("three").ArrayCamera>>;
export declare const Camera: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").Camera, typeof import("three").Camera>>;
export declare const AudioListener: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").AudioListener, typeof import("three").AudioListener>>;
export declare const PositionalAudio: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").PositionalAudio, typeof import("three").PositionalAudio>>;
export declare const AudioAnalyser: import("react").FC<import("..").Overwrite<Partial<import("three").AudioAnalyser>, import("..").ReactThreeFiber.NodeProps<import("three").AudioAnalyser, typeof import("three").AudioAnalyser>>>;
export declare const Audio: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").Audio, typeof import("three").Audio>>;
export declare const VectorKeyframeTrack: import("react").FC<import("..").Overwrite<Partial<import("three").VectorKeyframeTrack>, import("..").ReactThreeFiber.NodeProps<import("three").VectorKeyframeTrack, typeof import("three").VectorKeyframeTrack>>>;
export declare const StringKeyframeTrack: import("react").FC<import("..").Overwrite<Partial<import("three").StringKeyframeTrack>, import("..").ReactThreeFiber.NodeProps<import("three").StringKeyframeTrack, typeof import("three").StringKeyframeTrack>>>;
export declare const QuaternionKeyframeTrack: import("react").FC<import("..").Overwrite<Partial<import("three").QuaternionKeyframeTrack>, import("..").ReactThreeFiber.NodeProps<import("three").QuaternionKeyframeTrack, typeof import("three").QuaternionKeyframeTrack>>>;
export declare const NumberKeyframeTrack: import("react").FC<import("..").Overwrite<Partial<import("three").NumberKeyframeTrack>, import("..").ReactThreeFiber.NodeProps<import("three").NumberKeyframeTrack, typeof import("three").NumberKeyframeTrack>>>;
export declare const ColorKeyframeTrack: import("react").FC<import("..").Overwrite<Partial<import("three").ColorKeyframeTrack>, import("..").ReactThreeFiber.NodeProps<import("three").ColorKeyframeTrack, typeof import("three").ColorKeyframeTrack>>>;
export declare const BooleanKeyframeTrack: import("react").FC<import("..").Overwrite<Partial<import("three").BooleanKeyframeTrack>, import("..").ReactThreeFiber.NodeProps<import("three").BooleanKeyframeTrack, typeof import("three").BooleanKeyframeTrack>>>;
export declare const PropertyMixer: import("react").FC<import("..").Overwrite<Partial<import("three").PropertyMixer>, import("..").ReactThreeFiber.NodeProps<import("three").PropertyMixer, typeof import("three").PropertyMixer>>>;
export declare const PropertyBinding: import("react").FC<import("..").Overwrite<Partial<import("three").PropertyBinding>, import("..").ReactThreeFiber.NodeProps<import("three").PropertyBinding, typeof import("three").PropertyBinding>>>;
export declare const KeyframeTrack: import("react").FC<import("..").Overwrite<Partial<import("three").KeyframeTrack>, import("..").ReactThreeFiber.NodeProps<import("three").KeyframeTrack, typeof import("three").KeyframeTrack>>>;
export declare const AnimationObjectGroup: import("react").FC<import("..").Overwrite<Partial<import("three").AnimationObjectGroup>, import("..").ReactThreeFiber.NodeProps<import("three").AnimationObjectGroup, typeof import("three").AnimationObjectGroup>>>;
export declare const AnimationMixer: import("react").FC<import("..").Overwrite<Partial<import("three").AnimationMixer>, import("..").ReactThreeFiber.NodeProps<import("three").AnimationMixer, typeof import("three").AnimationMixer>>>;
export declare const AnimationClip: import("react").FC<import("..").Overwrite<Partial<import("three").AnimationClip>, import("..").ReactThreeFiber.NodeProps<import("three").AnimationClip, typeof import("three").AnimationClip>>>;
export declare const AnimationAction: import("react").FC<import("..").Overwrite<Partial<import("three").AnimationAction>, import("..").ReactThreeFiber.NodeProps<import("three").AnimationAction, typeof import("three").AnimationAction>>>;
export declare const Uniform: import("react").FC<import("..").Overwrite<Partial<import("three").Uniform>, import("..").ReactThreeFiber.NodeProps<import("three").Uniform, typeof import("three").Uniform>>>;
export declare const InstancedBufferGeometry: import("react").FC<Pick<import("..").Overwrite<Partial<import("three").InstancedBufferGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").InstancedBufferGeometry, typeof import("three").InstancedBufferGeometry>>, "children" | "key" | "ref" | "args" | "name" | "attach" | "attachArray" | "attachObject" | "onUpdate" | "scale" | "dispose" | "type" | "id" | "uuid" | "userData" | "applyMatrix4" | "rotateX" | "rotateY" | "rotateZ" | "lookAt" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "center" | "boundingBox" | "boundingSphere" | "translate" | "computeVertexNormals" | "computeBoundingBox" | "computeBoundingSphere" | "merge" | "setFromPoints" | "groups" | "maxInstancedCount" | "addGroup" | "index" | "attributes" | "morphAttributes" | "morphTargetsRelative" | "drawRange" | "isBufferGeometry" | "getIndex" | "setIndex" | "setAttribute" | "getAttribute" | "deleteAttribute" | "clearGroups" | "setDrawRange" | "setFromObject" | "updateFromObject" | "fromGeometry" | "fromDirectGeometry" | "normalizeNormals" | "toNonIndexed" | "drawcalls" | "offsets" | "addIndex" | "addDrawCall" | "clearDrawCalls" | "addAttribute" | "removeAttribute">>;
export declare const BufferGeometry: import("react").FC<Pick<import("..").Overwrite<Partial<import("three").BufferGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").BufferGeometry, typeof import("three").BufferGeometry>>, "children" | "key" | "ref" | "args" | "name" | "attach" | "attachArray" | "attachObject" | "onUpdate" | "scale" | "dispose" | "type" | "id" | "uuid" | "userData" | "applyMatrix4" | "rotateX" | "rotateY" | "rotateZ" | "lookAt" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "center" | "boundingBox" | "boundingSphere" | "translate" | "computeVertexNormals" | "computeBoundingBox" | "computeBoundingSphere" | "merge" | "setFromPoints" | "groups" | "addGroup" | "index" | "attributes" | "morphAttributes" | "morphTargetsRelative" | "drawRange" | "isBufferGeometry" | "getIndex" | "setIndex" | "setAttribute" | "getAttribute" | "deleteAttribute" | "clearGroups" | "setDrawRange" | "setFromObject" | "updateFromObject" | "fromGeometry" | "fromDirectGeometry" | "normalizeNormals" | "toNonIndexed" | "drawcalls" | "offsets" | "addIndex" | "addDrawCall" | "clearDrawCalls" | "addAttribute" | "removeAttribute">>;
export declare const Geometry: import("react").FC<import("..").Overwrite<import("..").Overwrite<Partial<import("three").Geometry>, import("..").ReactThreeFiber.NodeProps<import("three").Geometry, typeof import("three").Geometry>>, {
    vertices?: import("..").ReactThreeFiber.Vector3[] | undefined;
}>>;
export declare const InterleavedBufferAttribute: import("react").FC<import("..").Overwrite<Partial<import("three").InterleavedBufferAttribute>, import("..").ReactThreeFiber.NodeProps<import("three").InterleavedBufferAttribute, typeof import("three").InterleavedBufferAttribute>>>;
export declare const InstancedInterleavedBuffer: import("react").FC<import("..").Overwrite<Partial<import("three").InstancedInterleavedBuffer>, import("..").ReactThreeFiber.NodeProps<import("three").InstancedInterleavedBuffer, typeof import("three").InstancedInterleavedBuffer>>>;
export declare const InterleavedBuffer: import("react").FC<import("..").Overwrite<Partial<import("three").InterleavedBuffer>, import("..").ReactThreeFiber.NodeProps<import("three").InterleavedBuffer, typeof import("three").InterleavedBuffer>>>;
export declare const InstancedBufferAttribute: import("react").FC<import("..").Overwrite<Partial<import("three").InstancedBufferAttribute>, import("..").ReactThreeFiber.NodeProps<import("three").InstancedBufferAttribute, typeof import("three").InstancedBufferAttribute>>>;
export declare const BufferAttribute: import("react").FC<import("..").Overwrite<Partial<import("three").BufferAttribute>, import("..").ReactThreeFiber.NodeProps<import("three").BufferAttribute, typeof import("three").BufferAttribute>>>;
export declare const Int8Attribute: import("react").FC<import("..").Overwrite<Partial<import("three").Int8Attribute>, import("..").ReactThreeFiber.NodeProps<import("three").Int8Attribute, typeof import("three").Int8Attribute>>>;
export declare const Uint8Attribute: import("react").FC<import("..").Overwrite<Partial<import("three").Uint8Attribute>, import("..").ReactThreeFiber.NodeProps<import("three").Uint8Attribute, typeof import("three").Uint8Attribute>>>;
export declare const Uint8ClampedAttribute: import("react").FC<import("..").Overwrite<Partial<import("three").Uint8ClampedAttribute>, import("..").ReactThreeFiber.NodeProps<import("three").Uint8ClampedAttribute, typeof import("three").Uint8ClampedAttribute>>>;
export declare const Int16Attribute: import("react").FC<import("..").Overwrite<Partial<import("three").Int16Attribute>, import("..").ReactThreeFiber.NodeProps<import("three").Int16Attribute, typeof import("three").Int16Attribute>>>;
export declare const Uint16Attribute: import("react").FC<import("..").Overwrite<Partial<import("three").Uint16Attribute>, import("..").ReactThreeFiber.NodeProps<import("three").Uint16Attribute, typeof import("three").Uint16Attribute>>>;
export declare const Int32Attribute: import("react").FC<import("..").Overwrite<Partial<import("three").Int32Attribute>, import("..").ReactThreeFiber.NodeProps<import("three").Int32Attribute, typeof import("three").Int32Attribute>>>;
export declare const Uint32Attribute: import("react").FC<import("..").Overwrite<Partial<import("three").Uint32Attribute>, import("..").ReactThreeFiber.NodeProps<import("three").Uint32Attribute, typeof import("three").Uint32Attribute>>>;
export declare const Float32Attribute: import("react").FC<import("..").Overwrite<Partial<import("three").Float32Attribute>, import("..").ReactThreeFiber.NodeProps<import("three").Float32Attribute, typeof import("three").Float32Attribute>>>;
export declare const Float64Attribute: import("react").FC<import("..").Overwrite<Partial<import("three").Float64Attribute>, import("..").ReactThreeFiber.NodeProps<import("three").Float64Attribute, typeof import("three").Float64Attribute>>>;
export declare const Int8BufferAttribute: import("react").FC<import("..").Overwrite<Partial<import("three").Int8BufferAttribute>, import("..").ReactThreeFiber.NodeProps<import("three").Int8BufferAttribute, typeof import("three").Int8BufferAttribute>>>;
export declare const Uint8BufferAttribute: import("react").FC<import("..").Overwrite<Partial<import("three").Uint8BufferAttribute>, import("..").ReactThreeFiber.NodeProps<import("three").Uint8BufferAttribute, typeof import("three").Uint8BufferAttribute>>>;
export declare const Uint8ClampedBufferAttribute: import("react").FC<import("..").Overwrite<Partial<import("three").Uint8ClampedBufferAttribute>, import("..").ReactThreeFiber.NodeProps<import("three").Uint8ClampedBufferAttribute, typeof import("three").Uint8ClampedBufferAttribute>>>;
export declare const Int16BufferAttribute: import("react").FC<import("..").Overwrite<Partial<import("three").Int16BufferAttribute>, import("..").ReactThreeFiber.NodeProps<import("three").Int16BufferAttribute, typeof import("three").Int16BufferAttribute>>>;
export declare const Uint16BufferAttribute: import("react").FC<import("..").Overwrite<Partial<import("three").Uint16BufferAttribute>, import("..").ReactThreeFiber.NodeProps<import("three").Uint16BufferAttribute, typeof import("three").Uint16BufferAttribute>>>;
export declare const Int32BufferAttribute: import("react").FC<import("..").Overwrite<Partial<import("three").Int32BufferAttribute>, import("..").ReactThreeFiber.NodeProps<import("three").Int32BufferAttribute, typeof import("three").Int32BufferAttribute>>>;
export declare const Uint32BufferAttribute: import("react").FC<import("..").Overwrite<Partial<import("three").Uint32BufferAttribute>, import("..").ReactThreeFiber.NodeProps<import("three").Uint32BufferAttribute, typeof import("three").Uint32BufferAttribute>>>;
export declare const Float32BufferAttribute: import("react").FC<import("..").Overwrite<Partial<import("three").Float32BufferAttribute>, import("..").ReactThreeFiber.NodeProps<import("three").Float32BufferAttribute, typeof import("three").Float32BufferAttribute>>>;
export declare const Float64BufferAttribute: import("react").FC<import("..").Overwrite<Partial<import("three").Float64BufferAttribute>, import("..").ReactThreeFiber.NodeProps<import("three").Float64BufferAttribute, typeof import("three").Float64BufferAttribute>>>;
export declare const Face3: import("react").FC<import("..").Overwrite<Partial<import("three").Face3>, import("..").ReactThreeFiber.NodeProps<import("three").Face3, typeof import("three").Face3>>>;
export declare const Object3D: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").Object3D, typeof import("three").Object3D>>;
export declare const Raycaster: import("react").FC<import("..").Overwrite<Partial<import("three").Raycaster>, import("..").ReactThreeFiber.NodeProps<import("three").Raycaster, typeof import("three").Raycaster>>>;
export declare const Layers: import("react").FC<import("..").Overwrite<Partial<import("three").Layers>, import("..").ReactThreeFiber.NodeProps<import("three").Layers, typeof import("three").Layers>>>;
export declare const EventDispatcher: import("react").FC<import("..").Overwrite<Partial<import("three").EventDispatcher>, import("..").ReactThreeFiber.NodeProps<import("three").EventDispatcher, typeof import("three").EventDispatcher>>>;
export declare const DirectGeometry: import("react").FC<import("..").Overwrite<Partial<import("three").DirectGeometry>, import("..").ReactThreeFiber.NodeProps<import("three").DirectGeometry, typeof import("three").DirectGeometry>>>;
export declare const Clock: import("react").FC<import("..").Overwrite<Partial<import("three").Clock>, import("..").ReactThreeFiber.NodeProps<import("three").Clock, typeof import("three").Clock>>>;
export declare const QuaternionLinearInterpolant: import("react").FC<import("..").Overwrite<Partial<import("three").QuaternionLinearInterpolant>, import("..").ReactThreeFiber.NodeProps<import("three").QuaternionLinearInterpolant, typeof import("three").QuaternionLinearInterpolant>>>;
export declare const LinearInterpolant: import("react").FC<import("..").Overwrite<Partial<import("three").LinearInterpolant>, import("..").ReactThreeFiber.NodeProps<import("three").LinearInterpolant, typeof import("three").LinearInterpolant>>>;
export declare const DiscreteInterpolant: import("react").FC<import("..").Overwrite<Partial<import("three").DiscreteInterpolant>, import("..").ReactThreeFiber.NodeProps<import("three").DiscreteInterpolant, typeof import("three").DiscreteInterpolant>>>;
export declare const CubicInterpolant: import("react").FC<import("..").Overwrite<Partial<import("three").CubicInterpolant>, import("..").ReactThreeFiber.NodeProps<import("three").CubicInterpolant, typeof import("three").CubicInterpolant>>>;
export declare const Triangle: import("react").FC<import("..").Overwrite<Partial<import("three").Triangle>, import("..").ReactThreeFiber.NodeProps<import("three").Triangle, typeof import("three").Triangle>>>;
export declare const Spherical: import("react").FC<import("..").Overwrite<Partial<import("three").Spherical>, import("..").ReactThreeFiber.NodeProps<import("three").Spherical, typeof import("three").Spherical>>>;
export declare const Cylindrical: import("react").FC<import("..").Overwrite<Partial<import("three").Cylindrical>, import("..").ReactThreeFiber.NodeProps<import("three").Cylindrical, typeof import("three").Cylindrical>>>;
export declare const Plane: import("react").FC<import("..").Overwrite<Partial<import("three").Plane>, import("..").ReactThreeFiber.NodeProps<import("three").Plane, typeof import("three").Plane>>>;
export declare const Frustum: import("react").FC<import("..").Overwrite<Partial<import("three").Frustum>, import("..").ReactThreeFiber.NodeProps<import("three").Frustum, typeof import("three").Frustum>>>;
export declare const Sphere: import("react").FC<import("..").Overwrite<Partial<import("three").Sphere>, import("..").ReactThreeFiber.NodeProps<import("three").Sphere, typeof import("three").Sphere>>>;
export declare const Ray: import("react").FC<import("..").Overwrite<Partial<import("three").Ray>, import("..").ReactThreeFiber.NodeProps<import("three").Ray, typeof import("three").Ray>>>;
export declare const Matrix4: import("react").FC<import("..").Overwrite<Partial<import("three").Matrix4>, import("..").ReactThreeFiber.NodeProps<import("three").Matrix4, typeof import("three").Matrix4>>>;
export declare const Matrix3: import("react").FC<import("..").Overwrite<Partial<import("three").Matrix3>, import("..").ReactThreeFiber.NodeProps<import("three").Matrix3, typeof import("three").Matrix3>>>;
export declare const Box3: import("react").FC<import("..").Overwrite<Partial<import("three").Box3>, import("..").ReactThreeFiber.NodeProps<import("three").Box3, typeof import("three").Box3>>>;
export declare const Box2: import("react").FC<import("..").Overwrite<Partial<import("three").Box2>, import("..").ReactThreeFiber.NodeProps<import("three").Box2, typeof import("three").Box2>>>;
export declare const Line3: import("react").FC<import("..").Overwrite<Partial<import("three").Line3>, import("..").ReactThreeFiber.NodeProps<import("three").Line3, typeof import("three").Line3>>>;
export declare const Euler: import("react").FC<import("..").Overwrite<Partial<import("three").Euler>, import("..").ReactThreeFiber.NodeProps<import("three").Euler, typeof import("three").Euler>>>;
export declare const Vector4: import("react").FC<import("..").Overwrite<Partial<import("three").Vector4>, import("..").ReactThreeFiber.NodeProps<import("three").Vector4, typeof import("three").Vector4>>>;
export declare const Vector3: import("react").FC<import("..").Overwrite<Partial<import("three").Vector3>, import("..").ReactThreeFiber.NodeProps<import("three").Vector3, typeof import("three").Vector3>>>;
export declare const Vector2: import("react").FC<import("..").Overwrite<Partial<import("three").Vector2>, import("..").ReactThreeFiber.NodeProps<import("three").Vector2, typeof import("three").Vector2>>>;
export declare const Quaternion: import("react").FC<import("..").Overwrite<Partial<import("three").Quaternion>, import("..").ReactThreeFiber.NodeProps<import("three").Quaternion, typeof import("three").Quaternion>>>;
export declare const Color: import("react").FC<import("..").Overwrite<Partial<import("three").Color>, import("..").ReactThreeFiber.NodeProps<import("three").Color, typeof import("three").Color>>>;
export declare const SphericalHarmonics3: import("react").FC<import("..").Overwrite<Partial<import("three").SphericalHarmonics3>, import("..").ReactThreeFiber.NodeProps<import("three").SphericalHarmonics3, typeof import("three").SphericalHarmonics3>>>;
export declare const ImmediateRenderObject: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").ImmediateRenderObject, typeof import("three").ImmediateRenderObject>>;
export declare const SpotLightHelper: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").SpotLightHelper, typeof import("three").SpotLightHelper>>;
export declare const SkeletonHelper: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").SkeletonHelper, typeof import("three").SkeletonHelper>>;
export declare const PointLightHelper: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").PointLightHelper, typeof import("three").PointLightHelper>>;
export declare const HemisphereLightHelper: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").HemisphereLightHelper, typeof import("three").HemisphereLightHelper>>;
export declare const GridHelper: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").GridHelper, typeof import("three").GridHelper>>;
export declare const PolarGridHelper: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").PolarGridHelper, typeof import("three").PolarGridHelper>>;
export declare const DirectionalLightHelper: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").DirectionalLightHelper, typeof import("three").DirectionalLightHelper>>;
export declare const CameraHelper: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").CameraHelper, typeof import("three").CameraHelper>>;
export declare const BoxHelper: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").BoxHelper, typeof import("three").BoxHelper>>;
export declare const Box3Helper: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").Box3Helper, typeof import("three").Box3Helper>>;
export declare const PlaneHelper: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").PlaneHelper, typeof import("three").PlaneHelper>>;
export declare const ArrowHelper: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").ArrowHelper, typeof import("three").ArrowHelper>>;
export declare const AxesHelper: import("react").FC<import("..").ReactThreeFiber.Object3DNode<import("three").AxesHelper, typeof import("three").AxesHelper>>;
export declare const ArcCurve: import("react").FC<import("..").Overwrite<Partial<import("three").ArcCurve>, import("..").ReactThreeFiber.NodeProps<import("three").ArcCurve, typeof import("three").ArcCurve>>>;
export declare const CatmullRomCurve3: import("react").FC<import("..").Overwrite<Partial<import("three").CatmullRomCurve3>, import("..").ReactThreeFiber.NodeProps<import("three").CatmullRomCurve3, typeof import("three").CatmullRomCurve3>>>;
export declare const CubicBezierCurve: import("react").FC<import("..").Overwrite<Partial<import("three").CubicBezierCurve>, import("..").ReactThreeFiber.NodeProps<import("three").CubicBezierCurve, typeof import("three").CubicBezierCurve>>>;
export declare const CubicBezierCurve3: import("react").FC<import("..").Overwrite<Partial<import("three").CubicBezierCurve3>, import("..").ReactThreeFiber.NodeProps<import("three").CubicBezierCurve3, typeof import("three").CubicBezierCurve3>>>;
export declare const EllipseCurve: import("react").FC<import("..").Overwrite<Partial<import("three").EllipseCurve>, import("..").ReactThreeFiber.NodeProps<import("three").EllipseCurve, typeof import("three").EllipseCurve>>>;
export declare const LineCurve: import("react").FC<import("..").Overwrite<Partial<import("three").LineCurve>, import("..").ReactThreeFiber.NodeProps<import("three").LineCurve, typeof import("three").LineCurve>>>;
export declare const LineCurve3: import("react").FC<import("..").Overwrite<Partial<import("three").LineCurve3>, import("..").ReactThreeFiber.NodeProps<import("three").LineCurve3, typeof import("three").LineCurve3>>>;
export declare const QuadraticBezierCurve: import("react").FC<import("..").Overwrite<Partial<import("three").QuadraticBezierCurve>, import("..").ReactThreeFiber.NodeProps<import("three").QuadraticBezierCurve, typeof import("three").QuadraticBezierCurve>>>;
export declare const QuadraticBezierCurve3: import("react").FC<import("..").Overwrite<Partial<import("three").QuadraticBezierCurve3>, import("..").ReactThreeFiber.NodeProps<import("three").QuadraticBezierCurve3, typeof import("three").QuadraticBezierCurve3>>>;
export declare const SplineCurve: import("react").FC<import("..").Overwrite<Partial<import("three").SplineCurve>, import("..").ReactThreeFiber.NodeProps<import("three").SplineCurve, typeof import("three").SplineCurve>>>;
export declare const Shape: import("react").FC<import("..").Overwrite<Partial<import("three").Shape>, import("..").ReactThreeFiber.NodeProps<import("three").Shape, typeof import("three").Shape>>>;
export declare const Path: import("react").FC<import("..").Overwrite<Partial<import("three").Path>, import("..").ReactThreeFiber.NodeProps<import("three").Path, typeof import("three").Path>>>;
export declare const ShapePath: import("react").FC<import("..").Overwrite<Partial<import("three").ShapePath>, import("..").ReactThreeFiber.NodeProps<import("three").ShapePath, typeof import("three").ShapePath>>>;
export declare const Font: import("react").FC<import("..").Overwrite<Partial<import("three").Font>, import("..").ReactThreeFiber.NodeProps<import("three").Font, typeof import("three").Font>>>;
export declare const CurvePath: import("react").FC<import("..").Overwrite<Partial<import("three").CurvePath<import("three").Vector>>, import("..").ReactThreeFiber.NodeProps<import("three").CurvePath<import("three").Vector>, typeof import("three").CurvePath>>>;
export declare const Curve: import("react").FC<import("..").Overwrite<Partial<import("three").Curve<import("three").Vector>>, import("..").ReactThreeFiber.NodeProps<import("three").Curve<import("three").Vector>, typeof import("three").Curve>>>;
export declare const WebGLBufferRenderer: import("react").FC<import("..").Overwrite<Partial<import("three").WebGLBufferRenderer>, import("..").ReactThreeFiber.NodeProps<import("three").WebGLBufferRenderer, typeof import("three").WebGLBufferRenderer>>>;
export declare const WebGLCapabilities: import("react").FC<import("..").Overwrite<Partial<import("three").WebGLCapabilities>, import("..").ReactThreeFiber.NodeProps<import("three").WebGLCapabilities, typeof import("three").WebGLCapabilities>>>;
export declare const WebGLClipping: import("react").FC<import("..").Overwrite<Partial<import("three").WebGLClipping>, import("..").ReactThreeFiber.NodeProps<import("three").WebGLClipping, typeof import("three").WebGLClipping>>>;
export declare const WebGLExtensions: import("react").FC<import("..").Overwrite<Partial<import("three").WebGLExtensions>, import("..").ReactThreeFiber.NodeProps<import("three").WebGLExtensions, typeof import("three").WebGLExtensions>>>;
export declare const WebGLGeometries: import("react").FC<import("..").Overwrite<Partial<import("three").WebGLGeometries>, import("..").ReactThreeFiber.NodeProps<import("three").WebGLGeometries, typeof import("three").WebGLGeometries>>>;
export declare const WebGLIndexedBufferRenderer: import("react").FC<import("..").Overwrite<Partial<import("three").WebGLIndexedBufferRenderer>, import("..").ReactThreeFiber.NodeProps<import("three").WebGLIndexedBufferRenderer, typeof import("three").WebGLIndexedBufferRenderer>>>;
export declare const WebGLInfo: import("react").FC<import("..").Overwrite<Partial<import("three").WebGLInfo>, import("..").ReactThreeFiber.NodeProps<import("three").WebGLInfo, typeof import("three").WebGLInfo>>>;
export declare const WebGLLights: import("react").FC<import("..").Overwrite<Partial<import("three").WebGLLights>, import("..").ReactThreeFiber.NodeProps<import("three").WebGLLights, typeof import("three").WebGLLights>>>;
export declare const WebGLObjects: import("react").FC<import("..").Overwrite<Partial<import("three").WebGLObjects>, import("..").ReactThreeFiber.NodeProps<import("three").WebGLObjects, typeof import("three").WebGLObjects>>>;
export declare const WebGLProgram: import("react").FC<import("..").Overwrite<Partial<import("three").WebGLProgram>, import("..").ReactThreeFiber.NodeProps<import("three").WebGLProgram, typeof import("three").WebGLProgram>>>;
export declare const WebGLPrograms: import("react").FC<import("..").Overwrite<Partial<import("three").WebGLPrograms>, import("..").ReactThreeFiber.NodeProps<import("three").WebGLPrograms, typeof import("three").WebGLPrograms>>>;
export declare const WebGLProperties: import("react").FC<import("..").Overwrite<Partial<import("three").WebGLProperties>, import("..").ReactThreeFiber.NodeProps<import("three").WebGLProperties, typeof import("three").WebGLProperties>>>;
export declare const WebGLRenderList: import("react").FC<import("..").Overwrite<Partial<import("three").WebGLRenderList>, import("..").ReactThreeFiber.NodeProps<import("three").WebGLRenderList, typeof import("three").WebGLRenderList>>>;
export declare const WebGLRenderLists: import("react").FC<import("..").Overwrite<Partial<import("three").WebGLRenderLists>, import("..").ReactThreeFiber.NodeProps<import("three").WebGLRenderLists, typeof import("three").WebGLRenderLists>>>;
export declare const WebGLShader: import("react").FC<import("..").Overwrite<Partial<import("three").WebGLShader>, import("..").ReactThreeFiber.NodeProps<import("three").WebGLShader, typeof import("three").WebGLShader>>>;
export declare const WebGLShadowMap: import("react").FC<import("..").Overwrite<Partial<import("three").WebGLShadowMap>, import("..").ReactThreeFiber.NodeProps<import("three").WebGLShadowMap, typeof import("three").WebGLShadowMap>>>;
export declare const WebGLColorBuffer: import("react").FC<import("..").Overwrite<Partial<import("three").WebGLColorBuffer>, import("..").ReactThreeFiber.NodeProps<import("three").WebGLColorBuffer, typeof import("three").WebGLColorBuffer>>>;
export declare const WebGLDepthBuffer: import("react").FC<import("..").Overwrite<Partial<import("three").WebGLDepthBuffer>, import("..").ReactThreeFiber.NodeProps<import("three").WebGLDepthBuffer, typeof import("three").WebGLDepthBuffer>>>;
export declare const WebGLStencilBuffer: import("react").FC<import("..").Overwrite<Partial<import("three").WebGLStencilBuffer>, import("..").ReactThreeFiber.NodeProps<import("three").WebGLStencilBuffer, typeof import("three").WebGLStencilBuffer>>>;
export declare const WebGLState: import("react").FC<import("..").Overwrite<Partial<import("three").WebGLState>, import("..").ReactThreeFiber.NodeProps<import("three").WebGLState, typeof import("three").WebGLState>>>;
export declare const WebGLTextures: import("react").FC<import("..").Overwrite<Partial<import("three").WebGLTextures>, import("..").ReactThreeFiber.NodeProps<import("three").WebGLTextures, typeof import("three").WebGLTextures>>>;
export declare const WebGLUniforms: import("react").FC<import("..").Overwrite<Partial<import("three").WebGLUniforms>, import("..").ReactThreeFiber.NodeProps<import("three").WebGLUniforms, typeof import("three").WebGLUniforms>>>;
